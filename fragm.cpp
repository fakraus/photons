#include "photon.hpp"
#include "fragm.hpp"

/**
 * 
 * MODULE STORAGE
 * 
 */
natural J0;
real V, W, S;
real q2_fac, q2_mu, q2_fragm;

void STRU(real const &up1, real const &upb1, real const &do1, real const &dob1, real const &st1, real const &ch1, real const &gl1, 
real const &up2, real const &upb2, real const &do2, real const &dob2, real const &st2, real const &ch2, real const &gl2, 
real const &pff_up, real const &pff_do, real const &pff_st, real const &pff_ch, real const &pff_gl, 
real *GPPV, real *GPPC)
{
    GPPV[0] = up1 * (do2 + st2 + ch2) * pff_up + do1 * (up2 + st2 + ch2) * pff_do + st1 * (up2 + do2 + ch2) * pff_st + ch1 * (up2 + do2 + st2) * pff_ch + upb1 * (dob2 + st2 + ch2) * pff_up + dob1 * (upb2 + st2 + ch2) * pff_do + st1 * (upb2 + dob2 + ch2) * pff_st + ch1 * (upb2 + dob2 + st2) * pff_ch;
    GPPC[0] = up2 * (do1 + st1 + ch1) * pff_up + do2 * (up1 + st1 + ch1) * pff_do + st2 * (up1 + do1 + ch1) * pff_st + ch2 * (up1 + do1 + st1) * pff_ch + upb2 * (dob1 + st1 + ch1) * pff_up + dob2 * (upb1 + st1 + ch1) * pff_do + st2 * (upb1 + dob1 + ch1) * pff_st + ch2 * (upb1 + dob1 + st1) * pff_ch;

    GPPV[1] = (up1 * (do2 + st2 + ch2) + do1 * (st2 + ch2) + st1 * ch2 + upb1 * (dob2 + st2 + ch2) + dob1 * (st2 + ch2) + st1 * ch2) * pff_gl;
    GPPC[1] = (up2 * (do1 + st1 + ch1) + do2 * (st1 + ch1) + st2 * ch1 + upb2 * (dob1 + st1 + ch1) + dob2 * (st1 + ch1) + st2 * ch1) * pff_gl;

    GPPV[2] = up1 * (dob2 + st2 + ch2) * pff_up + do1 * (upb2 + st2 + ch2) * pff_do + st1 * (upb2 + dob2 + ch2) * pff_st + ch1 * (upb2 + dob2 + st2) * pff_ch + upb1 * (do2 + st2 + ch2) * pff_up + dob1 * (up2 + st2 + ch2) * pff_do + st1 * (up2 + do2 + ch2) * pff_st + ch1 * (up2 + do2 + st2) * pff_ch;
    GPPC[2] = up2 * (dob1 + st1 + ch1) * pff_up + do2 * (upb1 + st1 + ch1) * pff_do + st2 * (upb1 + dob1 + ch1) * pff_st + ch2 * (upb1 + dob1 + st1) * pff_ch + upb2 * (do1 + st1 + ch1) * pff_up + dob2 * (up1 + st1 + ch1) * pff_do + st2 * (up1 + do1 + ch1) * pff_st + ch2 * (up1 + do1 + st1) * pff_ch;

    GPPV[3] = (up1 * (dob2 + st2 + ch2) + do1 * (upb2 + st2 + ch2) + st1 * (upb2 + dob2 + ch2) + ch1 * (upb2 + dob2 + st2)) * pff_gl;
    GPPC[3] = (up2 * (dob1 + st1 + ch1) + do2 * (upb1 + st1 + ch1) + st2 * (upb1 + dob1 + ch1) + ch2 * (upb1 + dob1 + st1)) * pff_gl;

    GPPV[4] = (do1 * dob2 + st1 * st2 + ch1 * ch2) * pff_up + (up1 * upb2 + st1 * st2 + ch1 * ch2) * pff_do + (up1 * upb2 + do1 * dob2 + ch1 * ch2) * pff_st + (up1 * upb2 + do1 * dob2 + st1 * st2) * pff_ch + (dob1 * do2 + st1 * st2 + ch1 * ch2) * pff_up + (upb1 * up2 + st1 * st2 + ch1 * ch2) * pff_do + (upb1 * up2 + dob1 * do2 + ch1 * ch2) * pff_st + (upb1 * up2 + dob1 * do2 + st1 * st2) * pff_ch;
    GPPC[4] = (do2 * dob1 + st2 * st1 + ch2 * ch1) * pff_up + (up2 * upb1 + st2 * st1 + ch2 * ch1) * pff_do + (up2 * upb1 + do2 * dob1 + ch2 * ch1) * pff_st + (up2 * upb1 + do2 * dob1 + st2 * st1) * pff_ch + (dob2 * do1 + st2 * st1 + ch2 * ch1) * pff_up + (upb2 * up1 + st2 * st1 + ch2 * ch1) * pff_do + (upb2 * up1 + dob2 * do1 + ch2 * ch1) * pff_st + (upb2 * up1 + dob2 * do1 + st2 * st1) * pff_ch;

    GPPV[5] = up1 * up2 * pff_up + do1 * do2 * pff_do + st1 * st2 * pff_st + ch1 * ch2 * pff_ch + upb1 * upb2 * pff_up + dob1 * dob2 * pff_do + st1 * st2 * pff_st + ch1 * ch2 * pff_ch;
    GPPV[5] = GPPV[5] / 2.0l;
    GPPC[5] = GPPV[5];

    GPPV[6] = (up1 * up2 + do1 * do2 + st1 * st2 + ch1 * ch2 + upb1 * upb2 + dob1 * dob2 + st1 * st2 + ch1 * ch2) * pff_gl;
    GPPV[6] = GPPV[6] / 2.0l;
    GPPC[6] = GPPV[6];

    GPPV[7] = ((do1 + st1 + ch1) * pff_up + (up1 + st1 + ch1) * pff_do + (up1 + do1 + ch1) * pff_st + (up1 + do1 + st1) * pff_ch + (dob1 + st1 + ch1) * pff_up + (upb1 + st1 + ch1) * pff_do + (upb1 + dob1 + ch1) * pff_st + (upb1 + dob1 + st1) * pff_ch) * gl2;
    GPPC[7] = ((do2 + st2 + ch2) * pff_up + (up2 + st2 + ch2) * pff_do + (up2 + do2 + ch2) * pff_st + (up2 + do2 + st2) * pff_ch + (dob2 + st2 + ch2) * pff_up + (upb2 + st2 + ch2) * pff_do + (upb2 + dob2 + ch2) * pff_st + (upb2 + dob2 + st2) * pff_ch) * gl1;

    GPPV[8] = GPPV[7];
    GPPC[8] = GPPC[7];

    GPPV[9] = (up1 * pff_up + do1 * pff_do + st1 * pff_st + ch1 * pff_ch + upb1 * pff_up + dob1 * pff_do + st1 * pff_st + ch1 * pff_ch) * gl2;
    GPPC[9] = (up2 * pff_up + do2 * pff_do + st2 * pff_st + ch2 * pff_ch + upb2 * pff_up + dob2 * pff_do + st2 * pff_st + ch2 * pff_ch) * gl1;

    GPPV[10] = up1 * upb2 * pff_up + do1 * dob2 * pff_do + st1 * st2 * pff_st + ch1 * ch2 * pff_ch + upb1 * up2 * pff_up + dob1 * do2 * pff_do + st1 * st2 * pff_st + ch1 * ch2 * pff_ch;
    GPPC[10] = up2 * upb1 * pff_up + do2 * dob1 * pff_do + st2 * st1 * pff_st + ch2 * ch1 * pff_ch + upb2 * up1 * pff_up + dob2 * do1 * pff_do + st2 * st1 * pff_st + ch2 * ch1 * pff_ch;

    GPPV[11] = (up1 * upb2 + do1 * dob2 + st1 * st2 + ch1 * ch2) * pff_gl;
    GPPC[11] = (up2 * upb1 + do2 * dob1 + st2 * st1 + ch2 * ch1) * pff_gl;

    GPPV[12] = (up1 * pff_up + upb1 * pff_up + do1 * pff_do + dob1 * pff_do + 2.0l * st1 * pff_st + 2.0l * ch1 * pff_ch) * gl2;
    GPPC[12] = (up2 * pff_up + upb2 * pff_up + do2 * pff_do + dob2 * pff_do + 2.0l * st2 * pff_st + 2.0l * ch2 * pff_ch) * gl1;

    GPPV[13] = (up1 + upb1 + do1 + dob1 + 2.0l * st1 + 2.0l * ch1) * gl2 * pff_gl;
    GPPC[13] = (up2 + upb2 + do2 + dob2 + 2.0l * st2 + 2.0l * ch2) * gl1 * pff_gl;

    GPPV[14] = gl1 * gl2 * pff_gl / 2.0l;
    GPPC[14] = GPPV[14];

    GPPV[15] = gl1 * gl2 * (pff_up + pff_do + pff_st + pff_ch);
    GPPC[15] = GPPV[15];
}

/**
 *  
 * MACROS
 * 
 */

//no X dependece
constexpr real FQQW(const real &X)
{
    return 4.0l / 3.0l * (-3.0l / 2.0l + 2.0l * (1.0l + X * X) * std::log(X) + (1.0l - X) * (1.0l - X) * 3.0l / 2.0l);
};

constexpr real FQQL(const real &X)
{
    return 4.0l / 3.0l * (1.0l + X * X);
};

//Assuming JMAR = 2 for all of the following
constexpr real CQQW(real const &X)
{
    return CF * (-3. / 2.0l + (3. + 2. * X) * (1.0l - X) - (1.0l + X * X) * std::log(X));
};
constexpr real CQQL(real const &X)
{
    return 4.0l / 3.0l * (1.0l + X * X);
};

constexpr real HQQD(real const &v, natural const &J)
{
    if (J == 1)
        return CQQD;
    else
        return (1. - v) / v * (CQQD + std::log(v / (1. - v)) * CQQW(1.0l) + std::pow(std::log((1. - v) / v), 2) / 2. * CQQL(1.0l));
};

constexpr real HGQD(real const &v, natural const &J)
{
    if (J == 1)
        return CGQD;
    else
        return (1. - v) / v * (CGQD + std::log(v / (1. - v)) * CGQW + std::pow(std::log((1. - v) / v), 2) / 2. * CGQL);
};

constexpr real HQGD(real const &v, natural const &J)
{
    if (J == 1)
        return CQGD;
    else
        return (1. - v) / v * (CQGD + std::log(v / (1. - v)) * CQGW + std::pow(std::log((1. - v) / v), 2) / 2. * CQGL);
};

constexpr real HGGD(real const &v, natural const &J)
{
    if (J == 1)
        return CGGD;
    else
        return (1. - v) / v * (CGGD + std::log(v / (1. - v)) * CGGW + std::pow(std::log((1. - v) / v), 2) / 2. * CGGL);
};

constexpr real HQQW(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CQQW(w);
    else
        return (1. - v * w) / v * (CQQW((1. - v) / (1. - v * w)) + std::log(v / (1. - v * w)) * CQQL((1. - v) / (1. - v * w)));
};

constexpr real HQGW(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CQGW;
    else
        return (1. - v * w) / v * (CQGW + std::log(v / (1. - v * w)) * CQGL);
};

constexpr real HGGW(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CGGW;
    else
        return (1. - v * w) / v * (CGGW + std::log(v / (1. - v * w)) * CGGL);
};

constexpr real HGQW(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CGQW;
    else
        return (1. - v * w) / v * (CGQW + std::log(v / (1. - v * w)) * CGQL);
};

constexpr real HGQL(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CGQL;
    else
        return (1. - v * w) / v * CGQL;
};

constexpr real HGGL(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CGGL;
    else
        return (1. - v * w) / v * CGGL;
};

constexpr real HQQL(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CQQL(w);
    else
        return (1. - v * w) / v * CQQL((1. - v) / (1. - v * w));
};

constexpr real HQGL(real const &w, real const &v, natural const &J)
{
    if (J == 1)
        return CQGL;
    else
        return (1. - v * w) / v * CQGL;
};

constexpr real HFQQL(real const &w, real const &v)
{
    return FQQL(1. - v + v * w) / v;
};

constexpr real HFQQW(real const &w, real const &v)
{
    return 1. / v * (FQQW(1. - v + v * w) + std::log(v) * FQQL(1. - v + v * w));
};

constexpr real HFQQD(real const &v)
{
    return 1. / v * (FQQD + std::log(v) * FQQW(1.0l) + std::pow(std::log(v), 2) / 2. * FQQL(1.0l));
};

constexpr real HFQGL(real const &w, real const &v)
{
    return FQGL / v;
};

constexpr real HFQGW(real const &w, real const &v)
{
    return 1. / v * (FQGW + std::log(v) * FQGL);
};

constexpr real HFQGD(real const &v)
{
    return 1. / v * (FQGD + std::log(v) * FQGW + std::pow(std::log(v), 2) / 2. * FQGL);
};

constexpr real HFGGL(real const &w, real const &v)
{
    return FGGL / v;
};

constexpr real HFGGW(real const &w, real const &v)
{
    return 1. / v * (FGGW + std::log(v) * FGGL);
};

constexpr real HFGGD(real const &v)
{
    return 1. / v * (FGGD + std::log(v) * FGGW + std::pow(std::log(v), 2) / 2. * FGGL);
};

constexpr real HFGQL(real const &w, real const &v)
{
    return FGQL / v;
};

constexpr real HFGQW(real const &w, real const &v)
{
    return 1. / v * (FGQW + std::log(v) * FGQL);
};

constexpr real HFGQD(real const &v)
{
    return 1. / v * (FGQD + std::log(v) * FGQW + std::pow(std::log(v), 2) / 2. * FGQL);
};

constexpr real A(real const &S, real const &T, real const &U)
{
    return 2.0l * vC * (S * S + U * U) / (T * T);
};

constexpr real B(real const &S, real const &T, real const &U)
{
    return -4.0l * v2 * S * S / U / T;
};

constexpr real C(real const &S, real const &T, real const &U)
{
    return 2.0l * v2 * (vC / U / T - 2.0l * N2 / (S * S)) * (T * T + U * U);
};

constexpr real D(real const &S, real const &T, real const &U)
{
    return 16.0l * vC * N2 * (3. - U * T / (S * S) - U * S / (T * T) - S * T / (U * U));
};

//QJ+QK-->QJ+QK
constexpr real A0(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return A(S, T, U);
};

//Q+QB --> Q+QB DIFFERENT FLAvORS
constexpr real A2(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return A(T, S, U);
};

//Q+Q --> Q+Q SAME FLAvOR
constexpr real B0(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return A(S, T, U) + A(S, U, T) + B(S, T, U);
};

//Q+QB ->Q+QB SAME FLAvOR
constexpr real D0(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return A(U, T, S) + A(U, S, T) + B(U, T, S);
};

//Q+QB -->G+G    AND ALSO G+G --> Q+QB
constexpr real D1(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return C(S, T, U);
};

//Q+G -->Q+G
constexpr real E0(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return -C(T, S, U);
};

//G+G -->G+G
constexpr real F2(real const &X, real const &S)
{
    real T = -S * (1.0l - X);
    real U = -S * X;
    return D(S, T, U);
};


real AvWPL(real const &w, real const &v, real const &S)
{
#if _DEBUG_FRAGM_
//std::cout << "AvWPL(w=" << w << ", v=" << v << ", S=" << S << ";J0=" << J0 << ")\n";
#endif
    //real M = std::sqrt(q2_fac);
    //real MP = std::sqrt(q2_fragm);
    constexpr real WPLUS = 1.0l;
    const real vZ = v * w / (1.0l - v + v * w);
    const real vY = 1.0l - v;

    switch (J0)
    {
    case 0:
        return (-2 * std::log(1 - v) * (v - 1) * ((v * v) + 1) * (4 * v2 + v1) - 2 * (v - 1) * ((v * v) + 1) * std::log(v) * (4 * v2 - 5 * v1) + 2 * std::log(S / q2_fragm) * (v - 1) * ((v * v) + 1) * v1 + 4 * std::log(S / q2_fac) * (v - 1) * ((v * v) + 1) * v1 + 3 * (v - 1) * ((v * v) + 1) * v1) * WPLUS / (((v - 1) * (v - 1) * (v - 1)) * v) + A0(v, S) / v / w * HQQW(w, v, 1) + A0(v * w, S) / (1. - v) * HQQW(w, v, 2) + E0(w * v, S) * HGQW(w, v, 2) / (1. - v) * N / vC + A0(vZ, S) * HFQQW(w, v) / (1. - v + v * w);
    case 1:
        return 1.0e-30l + (E0(v, S) / v / w * HGQW(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQW(w, v, 2)) * N / vC + HFGQW(w, v) / (1. - v + v * w) * (A0(vZ, S) + A0(1. - vZ, S));
    case 2:
        return (2 * (v - 1) * ((v * v) + 1) * std::log(v) * (8 * v2 + v1) - 2 * std::log(1 - v) * (v - 1) * ((v * v) + 1) * (4 * v2 + v1) + 2 * std::log(S / q2_fragm) * (v - 1) * ((v * v) + 1) * v1 + 4 * std::log(S / q2_fac) * (v - 1) * ((v * v) + 1) * v1 + 3 * (v - 1) * ((v * v) + 1) * v1) * WPLUS / (((v - 1) * (v - 1) * (v - 1)) * v) + A0(v, S) / v / w * HQQW(w, v, 1) + A0(v * w, S) / (1. - v) * HQQW(w, v, 2) + E0(w * v, S) * HGQW(w, v, 2) / (1. - v) * N / vC + A0(vZ, S) * HFQQW(w, v) / (1. - v + v * w);
    case 3:
        return 1.0e-30l + (E0(v, S) / v / w * HGQW(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQW(w, v, 2)) * N / vC + HFGQW(w, v) / (1. - v + v * w) * (A0(vZ, S) + A0(1. - vZ, S));
    case 4:
        return (2 * (v - 1) * (2 * (v * v) - 2 * v + 1) * std::log(v) * (8 * v2 + v1) - 2 * std::log(1 - v) * (v - 1) * (2 * (v * v) - 2 * v + 1) * (4 * v2 - 3 * v1) + 2 * std::log(S / q2_fragm) * (v - 1) * (2 * (v * v) - 2 * v + 1) * v1 + 4 * std::log(S / q2_fac) * (v - 1) * (2 * (v * v) - 2 * v + 1) * v1 + 3 * (v - 1) * (2 * (v * v) - 2 * v + 1) * v1) * WPLUS / ((v - 1) * v) + A2(1. - v, S) / v / w * HQQW(w, v, 1) + A2(1. - v * w, S) / (1. - v) * HQQW(w, v, 2) + A2(1. - vZ, S) * HFQQW(w, v) / (1. - v + v * w) + D1(vZ, S) * HFQGW(w, v) / (1. - v + v * w);
    case 5:
        return (4 * (v - 1) * std::log(v) * (6 * (v - 1) * v * v4 - 4 * (v - 1) * v * v3 - 4 * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v2 + (3 * (v * v * v * v) - 2 * (v * v * v) + 6 * (v * v) - 3 * v + 1) * v1) + 4 * std::log(1 - v) * (v - 1) * (2 * (v - 1) * v * v4 - 4 * (v - 1) * v * v3 - 4 * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v2 + ((v * v * v * v) - 6 * (v * v * v) + 10 * (v * v) - 9 * v + 3) * v1) + 4 * std::log(S / q2_fragm) * (v - 1) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) + 8 * std::log(S / q2_fac) * (v - 1) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) + 6 * (v - 1) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1)) * WPLUS / (((v - 1) * (v - 1) * (v - 1)) * (v * v * v)) + B0(v, S) / v / w * HQQW(w, v, 1) + B0(v * w, S) / (1. - v) * HQQW(w, v, 2) + E0(1. - v, S) / w / v * N / vC * HGQW(w, v, 1) + E0(w * v, S) / (1. - v) * N / vC * HGQW(w, v, 2) + B0(vZ, S) * HFQQW(w, v) / (1. - v + v * w);
    case 6:
        return 1.0e-30l + (E0(v, S) / v / w * HGQW(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQW(w, v, 2)) * N / vC + HFGQW(w, v) / (1. - v + v * w) * B0(vZ, S);
    case 7:
        return 1.0e-30l + N / vC * D1(v, S) / v / w * HGQW(w, v, 1) + A0(1. - v * w, S) / (1. - v) * HQGW(w, v, 2) / N * vC + HFQGW(w, v) / (1. - v + v * w) * E0(1. - vZ, S) + vC / N * HQGW(w, v, 2) / (1. - v) * A2(1. - v * w, S);
    case 8:
        return 1.0e-30l + N / vC * D1(vY, S) / v / w * HGQW(w, v, 1) + A0(1. - v * w, S) / (1. - v) * HQGW(w, v, 2) / N * vC + HFQGW(w, v) / (1. - v + v * w) * E0(1. - vZ, S) + vC / N * HQGW(w, v, 2) / (1. - v) * A2(v * w, S);
    case 9:
        return 1.0e-30l + N / vC * D1(vY, S) / v / w * HGQW(w, v, 1) + D0(1. - v * w, S) / (1. - v) * HQGW(w, v, 2) / N * vC + HFQGW(w, v) / (1. - v + v * w) * E0(1. - vZ, S);
    case 10:
        return -2 * (2 * std::log(v) * (2 * (v - 1) * (v * v) * v4 + 8 * (v - 1) * (v * v) * v3 - 8 * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1) * v2 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) + 2 * std::log(1 - v) * (2 * (v - 1) * (v * v) * v4 - 4 * (v - 1) * (v * v) * v3 + 4 * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1) * v2 + (-3 * (v * v * v * v) + 9 * (v * v * v) - 10 * (v * v) + 6 * v - 1) * v1) + 2 * std::log(S / q2_fragm) * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) + 4 * std::log(S / q2_fac) * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) + 3 * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1)) * WPLUS / (((v - 1) * (v - 1)) * v) + D0(v, S) / v / w * HQQW(w, v, 1) + D0(v * w, S) / (1. - v) * HQQW(w, v, 2) + E0(w * v, S) / (1. - v) * N / vC * HGQW(w, v, 2) + D0(vZ, S) * HFQQW(w, v) / (1. - v + v * w) + D1(vZ, S) * HFQGW(w, v) / (1. - v + v * w);
    case 11:
        return (std::log(v) * (6 * N4 * (v - 1) * (2 * (v * v) - 2 * v + 1) * (2 * CQ * (2 * (v * v) - 2 * v + 1) - 10 * (v * v) + 14 * v - 7) * vC + 12 * N2 * (v - 1) * ((v * v) - v - CQ + 4) * (2 * (v * v) - 2 * v + 1) * vC - 6 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(1 - v) * (-6 * N4 * (v - 1) * (2 * (v * v) - 2 * v + 1) * (2 * (v * v) + 2 * v - 1) * vC - 12 * N2 * (v - 1) * ((v * v) - v - 1) * (2 * (v * v) - 2 * v + 1) * vC + 6 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(S / q2_fac) * (-12 * N4 * (v - 1) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 24 * N2 * (v - 1) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 12 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(S / q2_fragm) * (12 * N2 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC - 12 * N4 * (v - 1) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC) + N2 * (v - 1) * (2 * (v * v) - 2 * v + 1) * (18 * (v * v) - 18 * v + 7) * vC + 2 * N4 * (v - 1) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 4 * GTR * N3 * (v - 1) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 4 * GTR * N * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC - 9 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC) * WPLUS / (N2 * ((v - 1) * (v - 1)) * (v * v)) / 3.0l + D1(v, S) / v / w * HQQW(w, v, 1) + D1(v * w, S) / (1. - v) * HQQW(w, v, 2) + 2. * (2. * GTR - 1.) * A2(vZ, S) / (1. - v + v * w) * HFGQW(w, v) + E0(1. - v * w, S) / (1. - v) * N / vC * HGQW(w, v, 2) + N / vC * E0(v, S) / w / v * HGQW(w, v, 1) + D1(vZ, S) * HFGGW(w, v) / (1. - v + v * w) + (D0(1. - vZ, S) + D0(vZ, S)) * HFGQW(w, v) / (1. - v + v * w);
    case 12:
        return (std::log(1 - v) * (-12 * N2 * (v - 1) * ((v * v) + 1) * (CQ * ((v - 1) * (v - 1)) - 2 * ((v * v) - 3 * v + 1)) * vC + 12 * (CQ - 1) * N4 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC + 12 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(v) * (-6 * N4 * (v - 1) * ((v * v) + 1) * (2 * CQ * ((v * v) + 1) - 3 * (v * v) - 7) * vC + 12 * N2 * (v - 1) * (-4 * (v * v) + 7 * v + CQ * ((v - 1) * (v - 1)) - 4) * ((v * v) + 1) * vC + 6 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(S / q2_fac) * (-12 * N2 * (v - 1) * ((v * v) + 1) * (2 * (v * v) - 3 * v + 2) * vC + 18 * N4 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC + 6 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(S / q2_fragm) * (-12 * N2 * (v - 1) * ((v * v) + 1) * ((v * v) - v + 1) * vC + 6 * N4 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC + 6 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) - N2 * (v - 1) * ((v * v) + 1) * (7 * (v * v) + 4 * v + 7) * vC - 2 * N4 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC + 4 * GTR * N3 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC - 4 * GTR * N * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC + 9 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) * WPLUS / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v)) / 3.0l + E0(v, S) / v / w * HQQW(w, v, 1) + E0(v * w, S) / (1. - v) * HGGW(w, v, 2) + 2. * (2. * GTR - 1.) * vC / N * A0(v * w, S) / (1. - v) * HQGW(w, v, 2) + (B0(v * w, S) + D0(v * w, S)) / (1. - v) * vC / N * HQGW(w, v, 2) + N / vC * D1(v, S) / w / v * HGQW(w, v, 1) + E0(vZ, S) * HFQQW(w, v) / (1. - v + v * w) + E0(1. - vZ, S) * HFQGW(w, v) / (1. - v + v * w);
    case 13:
        return (std::log(1 - v) * (4 * CQ * N2 * ((v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 4 * N4 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (CQ * ((v * v) - 2 * v + 2) - 2 * ((v - 1) * (v - 1))) * vC) + std::log(v) * (-4 * N2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (2 * CQ * (v * v) - 3 * (v * v) + v - 1) * vC + 2 * (4 * CQ - 9) * N4 * ((v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 2 * ((v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) + std::log(S / q2_fac) * (4 * N2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (2 * (v * v) - v + 1) * vC - 6 * N4 * ((v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 2 * ((v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) + std::log(S / q2_fragm) * (4 * N2 * ((v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 4 * N4 * ((v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC)) * WPLUS / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v)) + E0(1. - v, S) / v / w * HQQW(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGGW(w, v, 2) + N / vC * F2(v, S) / w / v * HGQW(w, v, 1) + vC / N * D1(v * w, S) / (1. - v) * HQGW(w, v, 2) + E0(vZ, S) * HFGQW(w, v) / (1. - v + v * w) + E0(1. - vZ, S) * HFGGW(w, v) / (1. - v + v * w);
    case 14:
        return (-96 * N3 * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (2 * CQ * ((v * v) - v + 1) - 4 * (v * v) + 5 * v - 5) * std::log(v) * vC + 96 * N3 * std::log(1 - v) * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (CQ * ((v * v) - v + 1) - ((v - 1) * (v - 1))) * vC + 96 * N3 * std::log(S / q2_fragm) * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC + 192 * N3 * std::log(S / q2_fac) * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC - 88 * N3 * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC + 32 * GTR * N2 * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC) * WPLUS / (((v - 1) * (v - 1) * (v - 1)) * (v * v * v)) / 3.0l + F2(v, S) / v / w * HGGW(w, v, 1) + F2(v * w, S) / (1. - v) * HGGW(w, v, 2) + 4. * GTR * vC / N * (E0(vY, S) / w / v * HQGW(w, v, 1) + E0(v * w, S) / (1. - v) * HQGW(w, v, 2)) + F2(vZ, S) * HFGGW(w, v) / (1. - v + v * w) + 4. * GTR * D1(vZ, S) * HFGQW(w, v) / (1. - v + v * w);
    case 15:
        return (std::log(v) * (4 * N4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * (CQ * (2 * (v * v) - 2 * v + 1) - 2 * (3 * (v * v) - 4 * v + 2)) * vC - 4 * (CQ - 4) * N2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(1 - v) * (4 * CQ * N2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 4 * N4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * (CQ * (2 * (v * v) - 2 * v + 1) - 2 * ((v - 1) * (v - 1))) * vC) + std::log(S / q2_fragm) * (-2 * N4 * ((v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 4 * N2 * ((v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(S / q2_fac) * (8 * N2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 8 * N4 * ((v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC)) * WPLUS / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v)) + D1(v, S) / v / w * HGGW(w, v, 1) + D1(v * w, S) / (1. - v) * HGGW(w, v, 2) + vC / N * (E0(v, S) / w / v * HQGW(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HQGW(w, v, 2)) + D1(vZ, S) * HFQQW(w, v) / (1. - v + v * w) + F2(vZ, S) * HFQGW(w, v) / (1. - v + v * w);
    }
    std::cout << "AvWPL: J0 out of range (" << J0 << "\n";
    return -1.0l;
};

real AvDEL(real const &v, real const &S)
{
#if _DEBUG_FRAGM_
//std::cout << "AvDEL(v=" << v << ", S=" << S << ";J0=" << J0 << ")\n";
#endif
    //real M = std::sqrt(q2_fac);
    //real MP = std::sqrt(q2_fragm);
    constexpr real DELW = 1.;
    switch (J0)
    {
    case 0:
        return DELW * (3 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (16 * GTR * ((v * v) + 1) * v4 + 16 * GTR * ((v * v) + 1) * v3 - 4 * (17 * (v * v) - 3 * v + 8) * v2 + (-17 * (v * v) + 12 * v - 29) * v1) - 80 * GTR * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * (v4 + v3) + 2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((9 * pi2 * (v * v) + 170 * (v * v) + 27 * pi2 + 170) * v2 + (24 * pi2 * (v * v) + 179 * (v * v) + 6 * pi2 + 179) * v1) + 36 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * std::log(v) * ((3 * (v * v) + 1) * v2 + (-5 * (v * v) - 3) * v1) + 18 * std::pow(std::log(1 - v), 2) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (((v * v) + 7) * v2 + (3 * (v * v) + 1) * v1) + 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * std::log(v) * (4 * (v - 1) * v2 + (3 * (v * v) - 4 * v + 7) * v1) - 18 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (9 * (v * v) + 7) * std::pow(std::log(v), 2) * (v2 - v1) + std::log(S / q2_fac) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * std::log(v) * v1 - 36 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1 + 54 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1) + std::log(S / q2_fragm) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * std::log(v) * v1 + 27 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1)) / (((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 1)) / 18.0l + A0(v, S) / v * HQQD(v, 1) + A0(v, S) / (1. - v) * HQQD(v, 2) + E0(v, S) * HGQD(v, 2) / (1. - v) * N / vC + A0(v, S) * HFQQD(v);
    case 1:
        return 1.0e-30l + (E0(v, S) / v * HGQD(v, 1) + E0(1. - v, S) / (1. - v) * HGQD(v, 2)) * N / vC + HFGQD(v) * (A0(v, S) + A0(1. - v, S));
    case 2:
        return DELW * (3 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (16 * GTR * ((v * v) + 1) * v4 + 16 * GTR * ((v * v) + 1) * v3 - 4 * (8 * (v * v) - 3 * v + 17) * v2 + (-29 * (v * v) + 12 * v - 17) * v1) - 80 * GTR * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * (v4 + v3) + 2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (2 * (18 * pi2 * (v * v) + 85 * (v * v) + 85) * v2 + (15 * pi2 + 179) * ((v * v) + 1) * v1) + 18 * std::pow(std::log(1.0l - v), 2) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((7 * (v * v) + 1) * v2 + ((v * v) + 3) * v1) - 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * std::log(v) * (8 * (v - 1) * v2 - 3 * ((v * v) + 1) * v1) + 36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (9 * (v * v) + 7) * std::pow(std::log(v), 2) * v2 - 144 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (3 * (v * v) + 2) * std::log(v) * v2 + std::log(S / q2_fac) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * std::log(v) * v1 - 36 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1 + 54 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1) + std::log(S / q2_fragm) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * std::log(v) * v1 + 27 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * v1)) / (((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 1)) / 18.0l + A0(v, S) / v * HQQD(v, 1) + A0(v, S) / (1. - v) * HQQD(v, 2) + E0(v, S) * HGQD(v, 2) / (1. - v) * N / vC + A0(v, S) * HFQQD(v);
    case 3:
        return 1.0e-30l + (E0(v, S) / v * HGQD(v, 1) + E0(1. - v, S) / (1. - v) * HGQD(v, 2)) * N / vC + HFGQD(v) * (A0(v, S) + A0(1. - v, S));
    case 4:
        return DELW * (-80 * GTR * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * (v4 + v3) - 9 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * (4 * v * v2 + (6 * (v * v) - 10 * v + 3) * v1) - 9 * ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * std::log(v) * (8 * (v - 1) * v2 - 3 * (2 * (v * v) - 2 * v + 1) * v1) - 2 * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * (2 * (9 * pi2 - 85) * v2 + (3 * pi2 - 179) * v1) - 72 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * std::log(v) * (3 * v2 - v1) + 18 * std::pow(std::log(1 - v), 2) * ((v - 1) * (v - 1) * (v - 1)) * (2 * v - 1) * (2 * (v * v) - 2 * v + 1) * (v2 - v1) + 36 * ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * (16 * (v * v) - 14 * v + 7) * std::pow(std::log(v), 2) * v2 + std::log(S / q2_fac) * (36 * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * std::log(v) * v1 - 36 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 + 54 * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1) + std::log(S / q2_fragm) * (36 * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * std::log(v) * v1 + 27 * ((v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1)) / (((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 2 * v + 1)) / 18.0l + A2(1. - v, S) / v * HQQD(v, 1) + A2(1. - v, S) / (1. - v) * HQQD(v, 2) + A2(1. - v, S) * HFQQD(v) + D1(v, S) * HFQGD(v);
    case 5:
        return DELW * (std::log(S / q2_fac) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * std::log(v) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) - 36 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) + 54 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1)) + std::log(S / q2_fragm) * (36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * std::log(v) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) + 27 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1)) - 80 * GTR * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * (((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v3 + (v - 1) * v * v2) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * ((v - 1) * v * (18 * pi2 * (v * v) - 18 * pi2 * v + 15 * pi2 + 376) * v4 - (v - 1) * v * (18 * pi2 * (v * v) - 18 * pi2 * v - 45 * pi2 - 340) * v3 + 2 * (9 * pi2 * (v * v * v * v) + 170 * (v * v * v * v) - 18 * pi2 * (v * v * v) - 340 * (v * v * v) + 54 * pi2 * (v * v) + 680 * (v * v) - 45 * pi2 * v - 510 * v + 18 * pi2 + 170) * v2 + 2 * (24 * pi2 * (v * v * v * v) + 179 * (v * v * v * v) - 48 * pi2 * (v * v * v) - 358 * (v * v * v) + 78 * pi2 * (v * v) + 716 * (v * v) - 54 * pi2 * v - 537 * v + 15 * pi2 + 179) * v1) + 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * std::pow(std::log(v), 2) * ((v - 1) * v * (2 * (v * v) - 2 * v + 15) * v4 - (v - 1) * v * (2 * (v * v) - 2 * v + 11) * v3 - 2 * (8 * (v * v * v * v) - 14 * (v * v * v) + 25 * (v * v) - 15 * v + 4) * v2 + 2 * (6 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 7 * v + 2) * v1) - 18 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * std::log(v) * ((v - 1) * v * (2 * (v * v) - 2 * v + 3) * v4 - (v - 1) * v * (2 * (v * v) - 2 * v + 3) * v3 - 2 * ((v * v) - v + 2) * (3 * (v * v) - 3 * v + 1) * v2 + 2 * v * (3 * (v * v * v) - 2 * (v * v) + 4 * v - 1) * v1) + 9 * std::pow(std::log(1 - v), 2) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 1) * ((v * v) - 2 * v + 2) * ((v - 1) * (2 * (v * v) - 2 * v - 1) * v4 - (v - 1) * (2 * (v * v) - 2 * v - 5) * v3 + 2 * (2 * (v * v) + v + 1) * v2 + 2 * (2 * (v * v * v) - 2 * (v * v) + 3 * v - 1) * v1) + 3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * std::log(v) * (8 * GTR * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * v4 - 2 * (v - 1) * v * (6 * v - 19) * v4 + 8 * GTR * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * v3 + 4 * (v - 1) * v * (3 * v - 7) * v3 - 2 * (v - 1) * (17 * (v * v * v) - 51 * (v * v) + 53 * v - 22) * v2 + 8 * GTR * (v - 1) * v * v2 + (5 * (v * v * v * v) - 14 * (v * v * v) + 26 * (v * v) - 9 * v + 1) * v1) + 3 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 2) * (8 * GTR * (v * v) * ((v * v) + 1) * v4 + 2 * (v - 1) * v * (6 * v - 5) * v4 + 8 * GTR * (v * v) * ((v * v) + 1) * v3 - 4 * (v - 1) * v * (3 * v + 4) * v3 - 2 * v * (17 * (v * v * v) + 2 * v + 3) * v2 + 8 * GTR * (v - 1) * v * v2 + (-13 * (v * v * v * v) + 30.0l * (v * v * v) - 58 * (v * v) + 33 * v - 9) * v1)) / (((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v * v) * ((v * v) + 1) * ((v * v) - 2 * v + 2)) / 9.0l + B0(v, S) / v * HQQD(v, 1) + B0(v, S) / (1. - v) * HQQD(v, 2) + E0(1. - v, S) / v * N / vC * HGQD(v, 1) + E0(v, S) / (1. - v) * N / vC * HGQD(v, 2) + B0(v, S) * HFQQD(v);
    case 6:
        return 1.0e-30l + (E0(v, S) / v * HGQD(v, 1) + E0(1. - v, S) / (1. - v) * HGQD(v, 2)) * N / vC + HFGQD(v) * B0(v, S);
    case 7:
        return 1.0e-30l + N / vC * D1(v, S) / v * HGQD(v, 1) + A0(1. - v, S) / (1. - v) * HQGD(v, 2) / N * vC + HFQGD(v) * E0(1. - v, S) + vC / N * HQGD(v, 2) / (1. - v) * A2(1. - v, S);
    case 8:
        return 1.0e-30l + N / vC * D1(1. - v, S) / v * HGQD(v, 1) + A0(1. - v, S) / (1. - v) * HQGD(v, 2) / N * vC + HFQGD(v) * E0(1. - v, S) + vC / N * HQGD(v, 2) / (1. - v) * A2(v, S);
    case 9:
        return 1.0e-30l + N / vC * D1(1. - v, S) / v * HGQD(v, 1) + D0(1. - v, S) / (1. - v) * HQGD(v, 2) / N * vC + HFQGD(v) * E0(1. - v, S);
    case 10:
        return -DELW * (2 * (40 * GTR * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1) * v4 + 4 * (3 * pi2 + 47) * (v - 1) * (v * v) * v4 + 40 * GTR * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1) * v3 + 170 * (v - 1) * (v * v) * v3 + (18 * pi2 * (v * v * v * v) - 170 * (v * v * v * v) - 54 * pi2 * (v * v * v) + 510 * (v * v * v) + 45 * pi2 * (v * v) - 680 * (v * v) - 36 * pi2 * v + 340 * v + 9 * pi2 - 170) * v2 - 40 * GTR * (v - 1) * (v * v) * v2 + (3 * pi2 * (v * v * v * v) - 179 * (v * v * v * v) - 9 * pi2 * (v * v * v) + 537 * (v * v * v) + 3 * pi2 * (v * v) - 716 * (v * v) - 6 * pi2 * v + 358 * v - 6 * pi2 - 179) * v1) - 9 * std::pow(std::log(1 - v), 2) * ((v - 1) * ((v * v) + 2 * v - 2) * v4 - (v - 1) * (5 * (v * v) + 2 * v - 2) * v3 + 2 * v * ((v * v) + v + 2) * v2 - 2 * ((v * v * v) - 3 * (v * v) + 2 * v - 2) * v1) - 3 * std::log(1 - v) * (8 * GTR * ((v * v) + 1) * v4 + 2 * (v - 1) * v * (5 * v - 6) * v4 + 8 * GTR * ((v * v) + 1) * v3 + 4 * (v - 1) * v * (4 * v + 3) * v3 - 2 * (3 * (v * v * v) + 2 * (v * v) + 17) * v2 - 8 * GTR * (v - 1) * (v * v) * v2 + (-9 * (v * v * v * v) + 33 * (v * v * v) - 58 * (v * v) + 30.0l * v - 13) * v1) + 9 * std::log(v) * (6 * (v - 1) * (v * v) * v4 + 4 * (v - 1) * ((v * v) - 2 * v + 2) * v2 - 3 * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1) * v1) + 36 * std::log(1 - v) * std::log(v) * (2 * (v - 1) * (v * v) * v4 - 8 * (v - 1) * (v * v) * v3 + (6 * (v * v * v * v) - 18 * (v * v * v) + 27 * (v * v) - 12 * v + 7) * v2 - ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * v1) + 9 * std::log(S / q2_fragm) * (4 * std::log(v) + 3) * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) + 18 * std::log(S / q2_fac) * (2 * std::log(v) - 2 * std::log(1 - v) + 3) * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) + 36 * std::pow(std::log(v), 2) * (8 * (v - 1) * (v * v) * v3 + (-8 * (v * v * v * v) + 23 * (v * v * v) - 30.0l * (v * v) + 14 * v - 7) * v2)) / (((v - 1) * (v - 1)) * v) / 9.0l + D0(v, S) / v * HQQD(v, 1) + D0(v, S) / (1. - v) * HQQD(v, 2) + E0(v, S) / (1. - v) * N / vC * HGQD(v, 2) + D0(v, S) * HFQQD(v) + D1(v, S) * HFQGD(v);
    case 11:
        return DELW * (std::log(S / q2_fac) * (std::log(1 - v) * (36 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC + 36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(v) * (-36 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) - 54 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 108 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 54 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(S / q2_fragm) * (std::log(v) * (72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 72 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC) - 66 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 24 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 66 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 24 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::pow(std::log(v), 2) * (18 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) - 24 * (v * v * v * v) + 60 * (v * v * v) - 65 * (v * v) + 36 * v - 9) * vC - 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v * v) + 2 * CQ * (2 * (v * v) - 2 * v + 1) - 20 * (v * v) + 21 * v - 10) * vC - 18 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(v) * (3 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (52 * (v * v * v * v) - 74 * (v * v * v) + 26 * (v * v) + 14 * v - 5) * vC + 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (18 * (v * v * v * v) - 39 * (v * v * v) + 53 * (v * v) - 50 * v + 16) * vC - 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (8 * (v * v) - 14 * v + 9) * vC - 24 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 24 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(1 - v) * (9 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (12 * (v * v * v * v) - 34 * (v * v * v) + 28 * (v * v) - 12 * v + 3) * vC - 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (6 * (v * v * v * v) - 13 * (v * v * v) + 8 * (v * v) - 7 * v + 3) * vC + 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (4 * (v * v) - 10 * v + 3) * vC) + std::pow(std::log(1 - v), 2) * (18 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (4 * (v * v) - 5 * v + 2) * vC + 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * vC - 18 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * vC) + std::log(1 - v) * std::log(v) * (-72 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * v - 1) * (2 * (v * v) - 2 * v + 1) * vC - 72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + 2 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (4 * pi2 - 51) * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) - 36 * pi2 * (v * v * v * v) - 376 * (v * v * v * v) + 72 * pi2 * (v * v * v) + 752 * (v * v * v) - 72 * pi2 * (v * v) - 725 * (v * v) + 36 * pi2 * v + 349 * v - 9 * pi2 - 85) * vC + 2 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (60 * pi2 * (v * v * v * v) + 36 * (v * v * v * v) - 120 * pi2 * (v * v * v) - 72 * (v * v * v) - 3 * (4 * pi2 - 51) * CQ * (2 * (v * v) - 2 * v + 1) + 138 * pi2 * (v * v) + 269 * (v * v) - 78 * pi2 * v - 233 * v + 24 * pi2 + 103) * vC + (63 * CQ + 40) * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - (63 * CQ + 40) * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 6 * (5 * pi2 + 6) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v)) / 18.0l + D1(v, S) / v * HQQD(v, 1) + D1(v, S) / (1. - v) * HQQD(v, 2) + 2. * (2. * GTR - 1.) * A2(v, S) * HFGQD(v) + E0(1. - v, S) / (1. - v) * N / vC * HGQD(v, 2) + N / vC * E0(v, S) / v * HGQD(v, 1) + D1(v, S) * HFGGD(v) + (D0(1. - v, S) + D0(v, S)) * HFGQD(v);
    case 12:
        return DELW * (std::log(S / q2_fragm) * (std::log(v) * (-72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 1) * vC + 36 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC + 36 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) - 54 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 1) * vC + 27 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC + 27 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(S / q2_fac) * (std::log(v) * (72 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC - 72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(1 - v) * (72 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC - 72 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC) - 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (20 * (v * v) - 31 * v + 20) * vC + 93 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC - 24 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC + 24 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC + 27 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(1 - v) * std::log(v) * (36 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * (((v * v) + 1) * ((v * v) + 1)) - (v * v * v * v) - 2 * (v * v * v) - 5 * (v * v) - 4) * vC - 36 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (-2 * (v * v * v * v) + 6 * (v * v * v) + 2 * CQ * ((v - 1) * (v - 1)) * ((v * v) + 1) - 5 * (v * v) + 9 * v - 4) * vC - 36 * (v - 2) * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * vC) + std::pow(std::log(v), 2) * (-18 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * (((v * v) + 1) * ((v * v) + 1)) - 2 * (v * v * v * v) - 2 * (v * v * v) - 11 * (v * v) - 9) * vC + 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (-8 * (v * v * v) + 2 * CQ * (v - 1) * ((v * v) + 1) + 8 * (v * v) - 9 * v + 10) * vC + 18 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(v) * (-3 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (13 * (v * v * v * v) + 38 * (v * v) + 6 * v - 5) * vC + 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v * v * v) - 19 * (v * v * v) + (v * v) + 14 * v - 16) * vC + 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 4 * v + 9) * vC + 24 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC - 24 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::pow(std::log(1 - v), 2) * (-18 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * (2 * CQ * ((v * v) + 1) - ((v + 1) * (v + 1))) * vC + 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * ((v * v) + 1) - v) * vC + 18 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 4 * v + 3) * vC) + std::log(1 - v) * (18 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 10 * v + 1) * vC - 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 10 * v + 1) * vC + 72 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * vC) + 2 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (6 * CQ * (pi2 + 3) * (((v * v) + 1) * ((v * v) + 1)) + 9 * pi2 * (v * v * v * v) + 85 * (v * v * v * v) + 18 * pi2 * (v * v * v) + 9 * (v * v * v) + 9 * pi2 * (v * v) + 188 * (v * v) + 9 * v + 85) * vC - 2 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (-12 * pi2 * (v * v * v * v) + 103 * (v * v * v * v) + 18 * pi2 * (v * v * v) - 179 * (v * v * v) + 6 * CQ * (pi2 + 3) * ((v - 1) * (v - 1)) * ((v * v) + 1) - 15 * pi2 * (v * v) + 188 * (v * v) - 9 * pi2 * v - 179 * v + 6 * pi2 + 103) * vC + 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (5 * pi2 * (v * v) + 6 * (v * v) - 6 * pi2 * v + 2 * pi2 + 6) * vC - 10 * (3 * CQ + 4) * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) + 1) * ((v * v) + 1)) * vC + 10 * (3 * CQ + 4) * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v)) / 18.0l + E0(v, S) / v * HQQD(v, 1) + E0(v, S) / (1. - v) * HGGD(v, 2) + 2. * (2. * GTR - 1.) * vC / N * A0(v, S) / (1. - v) * HQGD(v, 2) + (B0(v, S) + D0(v, S)) / (1. - v) * vC / N * HQGD(v, 2) + N / vC * D1(v, S) / v * HGQD(v, 1) + E0(v, S) * HFQQD(v) + E0(1. - v, S) * HFQGD(v);
    case 13:
        return DELW * (std::log(S / q2_fac) * (std::log(1 - v) * (24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) + std::log(v) * (24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC) + 2 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (20 * (v * v) - 9 * v + 9) * vC - 31 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC + 8 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 8 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) + std::log(S / q2_fragm) * (std::log(v) * (24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC) - 22 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC + 8 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC + 22 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC - 8 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) + std::pow(std::log(1 - v), 2) * (6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) - 2 * (v * v * v * v) + 10 * (v * v * v) - 21 * (v * v) + 20 * v - 8) * vC - 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (2 * CQ * v * ((v * v) - 2 * v + 2) - v - 1) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(v) * (-6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v * v * v) - 8 * (v * v * v) + 2 * (v * v) + 12 * v - 6) * vC + 3 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v * v * v) - 10 * (v * v * v) - 2 * (v * v) + 24 * v - 12) * vC + 3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (3 * (v * v) + 2 * v - 2) * vC) + std::log(1 - v) * std::log(v) * (12 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v - 1) * (2 * (v * v) - 2 * v + 1) + 2 * CQ * v * ((v * v) - 2 * v + 2)) * vC - 12 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) - 4 * (v * v * v * v) + 18 * (v * v * v) - 37 * (v * v) + 36 * v - 16) * vC + 12 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (2 * (v * v) - 2 * v + 1) * vC) + std::pow(std::log(v), 2) * (-6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (4 * CQ * ((v * v) - 2 * v + 2) - 2 * (v * v) + 5 * v - 5) * vC + 6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (4 * CQ * ((v * v) - 2 * v + 2) - 11 * (v * v) + 24 * v - 24) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (3 * (v * v) - 2 * v + 2) * vC) + std::log(1 - v) * (-6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 7 * v - 1) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (2 * v + 1) * vC + 6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (2 * v - 5) * vC) + 2 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (CQ * (2 * pi2 - 57) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) - 3 * (2 * pi2 * (v * v * v * v) + (v * v * v * v) - 10 * pi2 * (v * v * v) - 5 * (v * v * v) + 21 * pi2 * (v * v) + 13 * (v * v) - 20 * pi2 * v - 16 * v + 8 * pi2 + 8)) * vC - 2 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (CQ * (2 * pi2 - 57) * v * ((v * v) - 2 * v + 2) - 3 * (2 * (v * v * v) - 5 * (v * v) + pi2 * v + 5 * v + pi2)) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (2 * pi2 * (v * v) + (v * v) - 2 * pi2 * v - 2 * v + pi2 + 2) * vC + 31 * CQ * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 31 * CQ * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v * v)) / 6.0l + E0(1. - v, S) / v * HQQD(v, 1) + E0(1. - v, S) / (1. - v) * HGGD(v, 2) + N / vC * F2(v, S) / v * HGQD(v, 1) + vC / N * D1(v, S) / (1. - v) * HQGD(v, 2) + E0(v, S) * HFGQD(v) + E0(1. - v, S) * HFGGD(v);
    case 14:
        return DELW * (std::log(S / q2_fac) * (288 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * std::log(v) * vC - 288 * N3 * std::log(1 - v) * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC + 528 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC - 192 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC) + std::log(S / q2_fragm) * (288 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * std::log(v) * vC + 264 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC - 96 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC) + std::log(1 - v) * std::log(v) * (72 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (4 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) - 4 * (v * v * v * v * v * v) + 16 * (v * v * v * v * v) - 37 * (v * v * v * v) + 50 * (v * v * v) - 47 * (v * v) + 26 * v - 8) * vC + 72 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 2 * v + 1) * vC) + std::pow(std::log(v), 2) * (-72 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (4 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) - 8 * (v * v * v * v * v * v) + 27 * (v * v * v * v * v) - 57 * (v * v * v * v) + 72 * (v * v * v) - 66 * (v * v) + 36 * v - 12) * vC - 36 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) + v - 1) * vC) + std::pow(std::log(1 - v), 2) * (36 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) - 3 * v + 1) * vC - 72 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) - 2 * (v * v * v * v * v * v) + 7 * (v * v * v * v * v) - 14 * (v * v * v * v) + 16 * (v * v * v) - 14 * (v * v) + 7 * v - 2) * vC) + std::log(v) * (24 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (4 * (v * v * v * v) - 3 * (v * v * v) - (v * v) + 8 * v - 4) * vC - 24 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (11 * (v * v * v * v) - 15 * (v * v * v) + 4 * (v * v) + 22 * v - 11) * vC) + std::log(1 - v) * (24 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) - v + 1) * (7 * (v * v) + 8 * v + 7) * vC - 24 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) - v + 1) * (5 * (v * v) - 2 * v + 5) * vC) + 4 * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (378 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) + 24 * pi2 * (v * v * v * v * v * v) - 134 * (v * v * v * v * v * v) - 72 * pi2 * (v * v * v * v * v) + 402 * (v * v * v * v * v) + 153 * pi2 * (v * v * v * v) - 831 * (v * v * v * v) - 186 * pi2 * (v * v * v) + 992 * (v * v * v) + 171 * pi2 * (v * v) - 831 * (v * v) - 90 * pi2 * v + 402 * v + 24 * pi2 - 134) * vC - 4 * GTR * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (123 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) - 40 * (v * v * v * v * v * v) + 120 * (v * v * v * v * v) + 18 * pi2 * (v * v * v * v) - 294 * (v * v * v * v) - 36 * pi2 * (v * v * v) + 388 * (v * v * v) + 27 * pi2 * (v * v) - 294 * (v * v) - 9 * pi2 * v + 120 * v - 40) * vC) / (((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v * v)) / 9.0l + F2(v, S) / v * HGGD(v, 1) + F2(v, S) / (1. - v) * HGGD(v, 2) + vC * (E0(1. - v, S) / v * HQGD(v, 1) + E0(v, S) / (1. - v) * HQGD(v, 2)) * 4. * GTR / N + F2(v, S) * HFGGD(v) + 4. * GTR * D1(v, S) * HFGQD(v);
    case 15:
        return DELW * (std::log(S / q2_fac) * (std::log(1 - v) * (24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(v) * (24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC) - 44 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 16 * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 44 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 16 * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::log(S / q2_fragm) * (std::log(v) * (-12 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 24 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 12 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) - 9 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC + 18 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1) * vC - 9 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) + std::pow(std::log(1 - v), 2) * (6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) - 8 * (v * v * v * v) + 20 * (v * v * v) - 21 * (v * v) + 10 * v - 2) * vC + 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) * (v + 1) - 2 * CQ * (2 * (v * v) - 2 * v + 1)) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * vC) + std::pow(std::log(v), 2) * (6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) - 24 * (v * v * v * v) + 60 * (v * v * v) - 65 * (v * v) + 36 * v - 9) * vC - 6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v * v) + 2 * CQ * (2 * (v * v) - 2 * v + 1) - 20 * (v * v) + 21 * v - 10) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) + std::log(1 - v) * std::log(v) * (24 * (CQ - 2) * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 24 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * (CQ * (2 * (v * v) - 2 * v + 1) - 2 * ((v - 1) * (v - 1))) * vC) + std::log(1 - v) * (6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + 7 * v - 2) * vC - 6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (5 * v - 2) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (v + 2) * vC) + std::log(v) * (-6 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 9 * v + 6) * vC + 6 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (5 * v - 3) * vC - 6 * (v - 3) * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * vC) - 2 * N4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (8 * (v * v * v * v) - 16 * (v * v * v) + 13 * (v * v) - 5 * v + 1) + 4 * CQ * (pi2 + 3) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1))) * vC + 2 * N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (5 * (v * v) - 5 * v + 2) + 4 * CQ * (pi2 + 3) * (2 * (v * v) - 2 * v + 1)) * vC + 20 * CQ * GTR * N3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 20 * CQ * GTR * N * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v)) / 6.0l + D1(v, S) / v * HGGD(v, 1) + D1(v, S) / (1. - v) * HGGD(v, 2) + vC * (E0(v, S) / v * HQGD(v, 1) + E0(1. - v, S) / (1. - v) * HQGD(v, 2)) / N + D1(v, S) * HFQQD(v) + F2(v, S) * HFQGD(v);
    }
    std::cout << "AvDEL: J0 out of range (" << J0 << "\n";
    return -1.0l;
};

real AvLO(real const &w, real const &v, real const &S)
{
#if _DEBUG_FRAGM_
//std::cout << "AvLO(w=" << w << ", v=" << v << ", S=" << S << ";J0=" << J0 << ")\n";
#endif
    //real M = std::sqrt(q2_fac);
    //real MP = std::sqrt(q2_fragm);
    real vZ = v * w / (1. - v + v * w);
    real vY = 1. - v;
    constexpr real LOPLUS = 1.;
    switch (J0)
    {
    case 0:
        return 4 * LOPLUS * ((v * v) + 1) * v1 / (((v - 1) * (v - 1)) * v) + A0(v, S) / v / w * HQQL(w, v, 1) + A0(v * w, S) / (1. - v) * HQQL(w, v, 2) + E0(w * v, S) * HGQL(w, v, 2) / (1. - v) * N / vC + A0(vZ, S) * HFQQL(w, v) / (1. - v + v * w);
    case 1:
        return 1.0e-30l + (E0(v, S) / v / w * HGQL(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQL(w, v, 2)) * N / vC + HFGQL(w, v) / (1. - v + v * w) * (A0(vZ, S) + A0(1. - vZ, S));
    case 2:
        return 4 * LOPLUS * ((v * v) + 1) * v1 / (((v - 1) * (v - 1)) * v) + A0(v, S) / v / w * HQQL(w, v, 1) + A0(v * w, S) / (1. - v) * HQQL(w, v, 2) + E0(w * v, S) * HGQL(w, v, 2) / (1. - v) * N / vC + A0(vZ, S) * HFQQL(w, v) / (1. - v + v * w);
    case 3:
        return 1.0e-30l + (E0(v, S) / v / w * HGQL(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQL(w, v, 2)) * N / vC + HFGQL(w, v) / (1. - v + v * w) * (A0(vZ, S) + A0(1. - vZ, S));
    case 4:
        return 4 * LOPLUS * (2 * (v * v) - 2 * v + 1) * v1 / v + A2(1. - v, S) / v / w * HQQL(w, v, 1) + A2(1. - v * w, S) / (1. - v) * HQQL(w, v, 2) + A2(1. - vZ, S) * HFQQL(w, v) / (1. - v + v * w) + D1(vZ, S) * HFQGL(w, v) / (1. - v + v * w);
    case 5:
        return 8 * LOPLUS * (2 * (v - 1) * v * v4 + ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 3 * v + 1) * v1) / (((v - 1) * (v - 1)) * (v * v * v)) + B0(v, S) / v / w * HQQL(w, v, 1) + B0(v * w, S) / (1. - v) * HQQL(w, v, 2) + E0(1. - v, S) / w / v * N / vC * HGQL(w, v, 1) + E0(w * v, S) / (1. - v) * N / vC * HGQL(w, v, 2) + B0(vZ, S) * HFQQL(w, v) / (1. - v + v * w);
    case 6:
        return 1.0e-30l + (E0(v, S) / v / w * HGQL(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGQL(w, v, 2)) * N / vC + HFGQL(w, v) / (1. - v + v * w) * B0(vZ, S);
    case 7:
        return 1.0e-30l + N / vC * D1(v, S) / v / w * HGQL(w, v, 1) + A0(1. - v * w, S) / (1. - v) * HQGL(w, v, 2) / N * vC + HFQGL(w, v) / (1. - v + v * w) * E0(1. - vZ, S) + vC / N * HQGL(w, v, 2) / (1. - v) * A2(1. - v * w, S);
    case 8:
        return 1.0e-30l + N / vC * D1(vY, S) / v / w * HGQL(w, v, 1) + A0(1. - v * w, S) / (1. - v) * HQGL(w, v, 2) / N * vC + HFQGL(w, v) / (1. - v + v * w) * E0(1. - vZ, S) + vC / N * HQGL(w, v, 2) / (1. - v) * A2(v * w, S);
    case 9:
        return 1.0e-30l + N / vC * D1(vY, S) / v / w * HGQL(w, v, 1) + D0(1. - v * w, S) / (1. - v) * HQGL(w, v, 2) / N * vC + HFQGL(w, v) / (1. - v + v * w) * E0(1. - vZ, S);
    case 10:
        return -8 * LOPLUS * (2 * (v - 1) * (v * v) * v4 + (-(v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * v1) / (((v - 1) * (v - 1)) * v) + D0(v, S) / v / w * HQQL(w, v, 1) + D0(v * w, S) / (1. - v) * HQQL(w, v, 2) + E0(w * v, S) / (1. - v) * N / vC * HGQL(w, v, 2) + D0(vZ, S) * HFQQL(w, v) / (1. - v + v * w) + D1(vZ, S) * HFQGL(w, v) / (1. - v + v * w);
    case 11:
        return LOPLUS * (4 * N2 * (v - 1) * (2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v - CQ + 3) * vC + 4 * (CQ - 2) * N4 * (v - 1) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1) * vC) / (N2 * ((v - 1) * (v - 1)) * (v * v)) + D1(v, S) / v / w * HQQL(w, v, 1) + D1(v * w, S) / (1. - v) * HQQL(w, v, 2) + 2. * (2. * GTR - 1.) * A2(vZ, S) / (1. - v + v * w) * HFGQL(w, v) + E0(1. - v * w, S) / (1. - v) * N / vC * HGQL(w, v, 2) + N / vC * E0(v, S) / w / v * HGQL(w, v, 1) + D1(vZ, S) * HFGGL(w, v) / (1. - v + v * w) + (D0(1. - vZ, S) + D0(vZ, S)) * HFGQL(w, v) / (1. - v + v * w);
    case 12:
        return LOPLUS * (-4 * (CQ - 2) * N4 * (v - 1) * (((v * v) + 1) * ((v * v) + 1)) * vC + 4 * N2 * (v - 1) * (-3 * (v * v) + 4 * v + CQ * ((v - 1) * (v - 1)) - 3) * ((v * v) + 1) * vC + 4 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v)) + E0(v, S) / v / w * HQQL(w, v, 1) + E0(v * w, S) / (1. - v) * HGGL(w, v, 2) + 2. * (2. * GTR - 1.) * vC / N * A0(v * w, S) / (1. - v) * HQGL(w, v, 2) + (B0(v * w, S) + D0(v * w, S)) / (1. - v) * vC / N * HQGL(w, v, 2) + N / vC * D1(v, S) / w / v * HGQL(w, v, 1) + E0(vZ, S) * HFQQL(w, v) / (1. - v + v * w) + E0(1. - vZ, S) * HFQGL(w, v) / (1. - v + v * w);
    case 13:
        return LOPLUS * (8 * (CQ - 2) * N2 * ((v - 1) * (v - 1)) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * vC - 8 * (CQ - 2) * ((v - 1) * (v - 1)) * (v * v) * ((v * v) - 2 * v + 2) * vC) / (((v - 1) * (v - 1) * (v - 1)) * (v * v * v)) + E0(1. - v, S) / v / w * HQQL(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HGGL(w, v, 2) + N / vC * F2(v, S) / w / v * HGQL(w, v, 1) + vC / N * D1(v * w, S) / (1. - v) * HQGL(w, v, 2) + E0(vZ, S) * HFGQL(w, v) / (1. - v + v * w) + E0(1. - vZ, S) * HFGGL(w, v) / (1. - v + v * w);
    case 14:
        return -32 * (3 * CQ - 5) * LOPLUS * N3 * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * vC / (((v - 1) * (v - 1)) * (v * v * v)) + F2(v, S) / v / w * HGGL(w, v, 1) + F2(v * w, S) / (1. - v) * HGGL(w, v, 2) + 4. * GTR * vC / N * (E0(vY, S) / w / v * HQGL(w, v, 1) + E0(v * w, S) / (1. - v) * HQGL(w, v, 2)) + F2(vZ, S) * HFGGL(w, v) / (1. - v + v * w) + 4. * GTR * D1(vZ, S) * HFGQL(w, v) / (1. - v + v * w);
    case 15:
        return LOPLUS * (8 * (CQ - 2) * N2 * ((v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC - 8 * (CQ - 2) * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC) / (((v - 1) * (v - 1) * (v - 1)) * (v * v)) + D1(v, S) / v / w * HGGL(w, v, 1) + D1(v * w, S) / (1. - v) * HGGL(w, v, 2) + vC / N * (E0(v, S) / w / v * HQGL(w, v, 1) + E0(1. - v * w, S) / (1. - v) * HQGL(w, v, 2)) + D1(vZ, S) * HFQQL(w, v) / (1. - v + v * w) + F2(vZ, S) * HFQGL(w, v) / (1. - v + v * w);
    }
    std::cout << "AvLO: J0 out of range (" << J0 << "\n";
    return -1.0l;
};

real AvGO(real const &w, real const &v)
{
#if _DEBUG_FRAGM_
//std::cout << "AvGO(w=" << w << ", v=" << v << ";J0=" << J0 << ")\n";
#endif
    //real M = std::sqrt(q2_fac);
    //real MP = std::sqrt(q2_fragm);
    real LOvW = std::log((1. - v * w) / (1. - v)) / (1. - w);
    real LOTvW = std::log(1. - v + v * w) / (1. - w);
    real LOW = std::log(w) / (1. - w);
    //real LOPLUS = 1.;
    switch (J0)
    {
    case 0:
        return -2 * ((5 * LOW * (v * v) + LOvW * (v * v) - 2 * LOTvW * (v * v) + 3 * LOW + 7 * LOvW + 2 * LOTvW) * v2 + (-6 * LOW * (v * v) + 5 * LOvW * (v * v) + 2 * LOTvW * (v * v) - 4 * LOW + 3 * LOvW + 2 * LOTvW) * v1) / (((v - 1) * (v - 1)) * v);
    case 1:
        return 1.0e-30l;
    case 2:
        return 2 * ((10 * LOW * (v * v) - 7 * LOvW * (v * v) - LOTvW * (v * v) + 6 * LOW - LOvW + LOTvW) * v2 + (LOW * (v * v) - 3 * LOvW * (v * v) - LOTvW * (v * v) + LOW - 5 * LOvW - 3 * LOTvW) * v1) / (((v - 1) * (v - 1)) * v);
    case 3:
        return 1.0e-30l;
    case 4:
        return 2 * ((16 * LOW * (v * v) - 8 * LOTvW * (v * v) - 12 * LOW * v - 2 * LOvW * v + 2 * LOTvW * v + 6 * LOW + LOvW - LOTvW) * v2 + (2 * LOW * (v * v) - 4 * LOvW * (v * v) - 8 * LOTvW * (v * v) - 2 * LOW * v + 6 * LOvW * v + 10 * LOTvW * v + LOW - 3 * LOvW - 5 * LOTvW) * v1) / v;
    case 5:
        return 2 * ((v - 1) * v * (2 * LOW * (v * v) - 2 * LOvW * (v * v) - 2 * LOW * v + 2 * LOvW * v + 11 * LOW - 7 * LOvW - 8 * LOTvW) * v4 - (v - 1) * v * (2 * LOW * (v * v) - 2 * LOvW * (v * v) - 2 * LOW * v + 2 * LOvW * v + 3 * LOW + 5 * LOvW) * v3 - 2 * v * (4 * LOW * (v * v * v) - 2 * LOTvW * (v * v * v) - 6 * LOW * (v * v) + 2 * LOvW * (v * v) + 4 * LOTvW * (v * v) + 9 * LOW * v + LOvW * v - 4 * LOTvW * v - 3 * LOW + LOvW + 2 * LOTvW) * v2 + 2 * (5 * LOW * (v * v * v * v) - 4 * LOvW * (v * v * v * v) - 2 * LOTvW * (v * v * v * v) - 8 * LOW * (v * v * v) + 6 * LOvW * (v * v * v) + 4 * LOTvW * (v * v * v) + 15 * LOW * (v * v) - 11 * LOvW * (v * v) - 8 * LOTvW * (v * v) - 10 * LOW * v + 7 * LOvW * v + 6 * LOTvW * v + 3 * LOW - 2 * LOvW - 2 * LOTvW) * v1) / (((v - 1) * (v - 1)) * (v * v * v));
    case 6:
    case 7:
    case 8:
    case 9:
        return 1.0e-30l;
    case 10:
        return -2 * ((v - 1) * (4 * LOW * (v * v) - 7 * LOvW * (v * v) - 7 * LOTvW * (v * v) + 2 * LOvW * v + 2 * LOTvW * v - 2 * LOvW - 2 * LOTvW) * v4 + (v - 1) * (16 * LOW * (v * v) - 5 * LOvW * (v * v) - 5 * LOTvW * (v * v) - 2 * LOvW * v - 2 * LOTvW * v + 2 * LOvW + 2 * LOTvW) * v3 - 2 * (8 * LOW * (v * v * v * v) - 4 * LOTvW * (v * v * v * v) - 22 * LOW * (v * v * v) - LOvW * (v * v * v) + 9 * LOTvW * (v * v * v) + 28 * LOW * (v * v) - LOvW * (v * v) - 7 * LOTvW * (v * v) - 12 * LOW * v - 2 * LOvW * v + 2 * LOTvW * v + 6 * LOW) * v2 - 2 * (LOW * (v * v * v * v) - 2 * LOvW * (v * v * v * v) - 4 * LOTvW * (v * v * v * v) - 3 * LOW * (v * v * v) + 7 * LOvW * (v * v * v) + 13 * LOTvW * (v * v * v) + 4 * LOW * (v * v) - 11 * LOvW * (v * v) - 17 * LOTvW * (v * v) - 2 * LOW * v + 6 * LOvW * v + 10 * LOTvW * v + LOW - 4 * LOvW - 4 * LOTvW) * v1) / (((v - 1) * (v - 1)) * v);
    case 11:
        return (-2 * N4 * (v - 1) * (-4 * CQ * LOTvW * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) + 12 * LOW * (v * v * v * v) - 8 * LOvW * (v * v * v * v) - 28 * LOW * (v * v * v) + 20 * LOvW * (v * v * v) + 29 * LOW * (v * v) - 21 * LOvW * (v * v) + 2 * LOTvW * (v * v) - 16 * LOW * v + 10 * LOvW * v - 2 * LOTvW * v + 4 * LOW - 2 * LOvW + LOTvW) * vC + 2 * N2 * (v - 1) * (4 * LOW * (v * v * v * v) - 8 * LOvW * (v * v * v * v) - 9 * LOW * (v * v * v) + 15 * LOvW * (v * v * v) - 4 * CQ * LOTvW * (2 * (v * v) - 2 * v + 1) + 18 * LOW * (v * v) - 17 * LOvW * (v * v) + 3 * LOTvW * (v * v) - 15 * LOW * v + 8 * LOvW * v - 3 * LOTvW * v + 6 * LOW - 2 * LOvW + 2 * LOTvW) * vC - 2 * (v - 1) * (3 * LOW * (v * v) - 5 * LOvW * (v * v) - 2 * LOTvW * (v * v) - 2 * LOW * v + 6 * LOvW * v + 2 * LOTvW * v + 2 * LOW - 4 * LOvW - 3 * LOTvW) * vC) / (N2 * ((v - 1) * (v - 1)) * (v * v));
    case 12:
        return (-2 * N2 * (v - 1) * (4 * LOW * (v * v * v * v) - 2 * LOvW * (v * v * v * v) - 4 * LOTvW * (v * v * v * v) - 6 * LOW * (v * v * v) + 3 * LOvW * (v * v * v) + 3 * LOTvW * (v * v * v) + 9 * LOW * (v * v) - 2 * LOvW * (v * v) - 5 * LOTvW * (v * v) - 9 * LOW * v + 3 * LOvW * v + 6 * LOW - 2 * LOvW - 2 * LOTvW) * vC + 2 * N4 * (v - 1) * (LOW * (v * v * v * v) - 3 * LOvW * (v * v * v * v) - LOTvW * (v * v * v * v) + 2 * LOW * (v * v * v) - 2 * LOvW * (v * v * v) + 5 * LOW * (v * v) - 6 * LOvW * (v * v) - 3 * LOTvW * (v * v) - 2 * LOvW * v - 2 * LOTvW * v + 4 * LOW - 3 * LOvW - 2 * LOTvW) * vC + 2 * ((v - 1) * (v - 1) * (v - 1)) * (3 * LOW * (v * v) - 3 * LOvW * (v * v) - 3 * LOTvW * (v * v) - 2 * LOW * v + 4 * LOvW * v + 2 * LOTvW * v + 2 * LOW - 3 * LOvW - 4 * LOTvW) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v));
    case 13:
        return (-2 * N4 * ((v - 1) * (v - 1)) * (-4 * CQ * LOTvW * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) + 4 * LOW * (v * v * v * v) - 4 * LOvW * (v * v * v * v) + LOTvW * (v * v * v * v) - 18 * LOW * (v * v * v) + 18 * LOvW * (v * v * v) - 4 * LOTvW * (v * v * v) + 38 * LOW * (v * v) - 37 * LOvW * (v * v) + 7 * LOTvW * (v * v) - 40 * LOW * v + 36 * LOvW * v - 4 * LOTvW * v + 20 * LOW - 16 * LOvW) * vC - 2 * N2 * ((v - 1) * (v - 1)) * (2 * LOvW * (v * v * v * v) + 3 * LOW * (v * v * v) - 4 * LOvW * (v * v * v) - LOTvW * (v * v * v) + 4 * CQ * LOTvW * (v * v) * ((v * v) - 2 * v + 2) - 7 * LOW * (v * v) + 5 * LOvW * (v * v) + 8 * LOW * v + LOvW * v - LOTvW * v - 4 * LOW) * vC - 2 * ((v - 1) * (v - 1)) * (v * v) * (4 * LOW * (v * v) - 2 * LOvW * (v * v) - LOTvW * (v * v) - 4 * LOW * v + 2 * LOvW * v + 4 * LOW - LOvW - LOTvW) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v));
    case 14:
        return (16 * N3 * (v - 1) * (2 * CQ * (LOW - 2 * LOTvW) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) + 2 * LOW * (v * v * v * v * v * v) - 4 * LOvW * (v * v * v * v * v * v) - 7 * LOW * (v * v * v * v * v) + 13 * LOvW * (v * v * v * v * v) + 15 * LOW * (v * v * v * v) - 26 * LOvW * (v * v * v * v) + 2 * LOTvW * (v * v * v * v) - 20 * LOW * (v * v * v) + 30.0l * LOvW * (v * v * v) - 4 * LOTvW * (v * v * v) + 20 * LOW * (v * v) - 26 * LOvW * (v * v) + 3 * LOTvW * (v * v) - 12 * LOW * v + 13 * LOvW * v - LOTvW * v + 4 * LOW - 4 * LOvW) * vC - 8 * GTR * N2 * ((v - 1) * (v - 1)) * v * (LOW * (v * v * v) + LOvW * (v * v * v) + LOW * (v * v) - 4 * LOvW * (v * v) - LOTvW * (v * v) - LOW * v + 4 * LOvW * v + LOTvW * v - LOvW + LOTvW) * vC) / (((v - 1) * (v - 1) * (v - 1)) * (v * v * v));
    case 15:
        return (-2 * N4 * ((v - 1) * (v - 1)) * (2 * CQ * LOW * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) + 8 * LOW * (v * v * v * v) - 16 * LOvW * (v * v * v * v) - 16 * LOTvW * (v * v * v * v) - 20 * LOW * (v * v * v) + 36 * LOvW * (v * v * v) + 32 * LOTvW * (v * v * v) + 21 * LOW * (v * v) - 37 * LOvW * (v * v) - 30.0l * LOTvW * (v * v) - 12 * LOW * v + 18 * LOvW * v + 14 * LOTvW * v + 3 * LOW - 4 * LOvW - 3 * LOTvW) * vC - 2 * N2 * ((v - 1) * (v - 1)) * (LOW * (v * v * v) + LOvW * (v * v * v) - 2 * CQ * LOW * (2 * (v * v) - 2 * v + 1) - 8 * LOW * (v * v) + 5 * LOvW * (v * v) + 5 * LOTvW * (v * v) + 9 * LOW * v - 4 * LOvW * v - 5 * LOTvW * v - 4 * LOW + 2 * LOvW + 2 * LOTvW) * vC - 2 * ((v - 1) * (v - 1)) * (LOW * (v * v) - LOvW * (v * v) - 2 * LOTvW * (v * v) + 2 * LOvW * v + 2 * LOTvW * v + LOW - 2 * LOvW - 3 * LOTvW) * vC) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v));
    }
    std::cout << "AvGO: J0 out of range (" << J0 << "\n";
    return -1.0l;
};

real STRUv(real const &w, real const &v, real const &X3, real const &S)
{
//real M = std::sqrt(q2_fac);
//real MP = std::sqrt(q2_fragm);
#if _DEBUG_FRAGM_
//std::cout << "STRUv(w=" << w << ", v=" << v << ",X3=" << X3 << ",S=" << S << ");J0=" << J0 << ")\n";
#endif
    switch (J0)
    {
    case 0:
        return std::log(1 - w) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 6 * v - 1) * (w * w * w * w) + 2 * (v * v * v * v) * (v + 7) * (w * w * w) - 2 * (v * v) * (3 * (v * v) + v + 7) * (w * w) + 2 * v * ((v * v) + 5) * w - (v * v) - 1) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * (v - 1) * v * v2 * w * (3 * (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * (2 * v + 5) * w + 3) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -std::log(1 - v) * (v1 * (4 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 4 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + (v * v * v * v) * (2 * (v * v) + 9 * v + 1) * (w * w * w * w) - (v * v * v) * (7 * (v * v) + 11 * v + 10) * (w * w * w) + (v * v) * (8 * (v * v) + 13 * v + 15) * (w * w) - v * (7 * (v * v) + 3 * v + 10) * w + 2 * ((v * v) + 1)) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) + 2 * v * v2 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v) * (w * w) + (v * v) + 4 * v - 3)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + std::log(v) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) - (v * v * v) * ((v * v * v) + 13 * (v * v) - 7 * v + 1) * (w * w * w * w) + (v * v) * (5 * (v * v * v) + 27 * (v * v) - 3 * v + 3) * (w * w * w) - v * (13 * (v * v * v) + 7 * (v * v) + 27 * v + 3) * (w * w) + (7 * (v * v * v) - (v * v) + 21 * v + 1) * w - 2 * ((v * v) + 1)) - 2 * v * v2 * w * (2 * (v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (3 * (v * v) + 10 * v - 1) * (w * w) - 4 * v * ((v * v) + v + 3) * w + 3 * (v * v) - 2 * v + 9) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * (v1 * (2 * (v * v * v) * (w * w * w) - 2 * (v - 2) * (v * v) * (w * w) + v * ((v * v) + v + 4) * w - (v * v) - 1) + v * v2 * w * (4 * v * w - v + 5)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * (v1 * (2 * (v * v) * (w * w) - 2 * (v - 2) * v * w + (v * v) - v + 4) + (1 - v) * v2) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + -(v1 * (v * (11 * (v * v) - 6 * v + 1) * (w * w) - (5 * (v * v * v) + 3 * (v * v) + 11 * v + 1) * w + 3 * ((v * v) + 1)) + 2 * v * v2 * w * (2 * (v * v) * (w * w) - 5 * (v - 1) * v * w + 3 * (v * v) + v + 6)) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * std::log(w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + (3 * (v - 1) * v1 * (v * w - 1) * (6 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w) + (v * v * v * v) * (7 * (v * v * v) + 6 * (v * v) - 5 * v - 2) * (w * w * w * w * w) - (v * v * v) * ((v * v * v * v) - (v * v * v) + 13 * (v * v) - 37 * v - 4) * (w * w * w * w) + 2 * (v * v * v) * (7 * (v * v) - 22 * v - 2) * (w * w * w) - 2 * v * (7 * (v * v * v * v) - 25 * (v * v * v) + 17 * (v * v) - 3 * v + 2) * (w * w) - (8 * (v * v * v * v) - 27 * (v * v * v) + 26 * (v * v) - 11 * v - 2) * w - (v - 1) * ((v * v) + 4 * v + 1)) + 12 * (v - 1) * v2 * w * (v * w - 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (6 * (v * v) - 3 * v + 1) * (w * w * w * w) + (v * v * v) * (6 * (v * v * v) - 3 * (v * v) - v + 2) * (w * w * w) - (v * v * v) * (4 * (v * v * v) - 16 * (v * v) + 27 * v - 11) * (w * w) - v * (4 * (v * v * v * v) - 10 * (v * v * v) + 3 * (v * v) - v + 2) * w + (v - 1) * (2 * (v * v * v) - 6 * (v * v) + 3 * v - 1)) - 6 * AL * (v - 1) * v1 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 8 * CQ * ((v - 1) * (v - 1)) * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 12 * AL * (v - 1) * v * v2 * w * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) - 16 * CQ * ((v - 1) * (v - 1)) * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1)) / (((v - 1) * (v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1)) / 6.0l + std::log(S / q2_fac) * (-v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + (v * v * v) * ((v * v * v) + 2 * (v * v) + 4 * v + 1) * (w * w * w * w) - (v * v) * (2 * (v * v * v) + 10 * (v * v) + 5 * v + 3) * (w * w * w) + v * (5 * (v * v * v) + 8 * (v * v) + 10 * v + 3) * (w * w) - (4 * (v * v * v) + 2 * (v * v) + 9 * v + 1) * w + 2 * ((v * v) + 1)) - 2 * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -std::log(S / q2_fragm) * v1 * (2 * (v * v * v) * (w * w * w) - 2 * (v * v) * (2 * v - 3) * (w * w) + v * (3 * (v * v) - 8 * v + 9) * w - (v - 1) * ((v * v) - v + 4)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) / (((v - 1) * (v - 1)) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1));
    case 1:
        return std::log(1 - w) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (8 * (v * v * v * v) + 12 * (v * v * v) + 21 * (v * v) - v + 2) * (w * w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 29 * (v * v * v * v) + 9 * (v * v * v) - 6 * (v * v) + v - 1) * (w * w * w * w) - 2 * (v * v) * (6 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) + 11 * (v * v * v * v) + 30.0l * (v * v * v) - 16 * (v * v) - 2 * v - 3) * (w * w * w) + (4 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v) + 54 * (v * v * v * v * v) - 5 * (v * v * v * v) - 32 * (v * v * v) + (v * v) - 2 * v + 1) * (w * w) - 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 7 * (v * v * v * v) + 6 * (v * v * v) + 6 * (v * v) - 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 2)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 2 * (v * v * v) + 17 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) - 11 * (v * v * v) + 25 * (v * v) + 4 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 19 * (v * v * v * v * v) + 20 * (v * v * v * v) + 33 * (v * v * v) - 10 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 9 * (v * v * v * v * v) - 11 * (v * v * v * v) + 63 * (v * v * v) - 16 * (v * v) - 6 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v) - 49 * (v * v * v * v * v * v) + 88 * (v * v * v * v * v) + 13 * (v * v * v * v) - 46 * (v * v * v) - (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 4 * (v * v * v * v) + 11 * (v * v * v) + 9 * (v * v) - 5 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) + 2 * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (6 * (v * v) - 3 * v + 1) * (w * w * w * w) - (v * v * v) * (8 * (v * v) + 9 * v - 5) * (w * w * w) + v * (6 * (v * v * v * v) + 9 * (v * v * v) + 15 * (v * v) - 13 * v - 1) * (w * w) - v * (9 * (v * v * v) + (v * v) + 11 * v - 13) * w + 4 * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (2 * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 2) * (w * w * w) + (v * v) * ((v * v) + 2 * v + 9) * (w * w) - 2 * v * ((v * v) + 2 * v + 3) * w + 2 * (v + 1) * ((v * v) + 1)) + CQ * v1 * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 8 * (v * v) * (w * w) - 8 * v * w + 4) - 4 * v2 * (v * w - v - 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - (v * v) * (v + 1) * (w * w) + v * (3 * (v * v) - 2 * v + 1) * w - (v - 1) * ((v * v) + 1)) - 2 * CQ * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 2) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * (v * w - v + 1)) + std::log(v) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (v + 1) * (5 * v + 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (6 * (v * v * v) + 12 * (v * v) + 17 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) + 6 * (v * v * v) + 46 * (v * v) + 14 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (3 * v + 5) * ((v * v * v * v) - 2 * (v * v * v) + 6 * (v * v) - 2 * v - 1) * (w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 7 * (v * v * v * v) + 20 * (v * v * v) + 3 * (v * v) - 18 * v + 3) * (w * w) - 2 * (v - 1) * v * (2 * (v * v * v * v * v) - 3 * (v * v * v * v) + 4 * (v * v * v) + 4 * (v * v) + 6 * v - 5) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 12 * (v * v * v) + 23 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 37 * (v * v) + 3 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) + 35 * (v * v * v * v) + 37 * (v * v * v) - 14 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 14 * (v * v * v * v * v) - 5 * (v * v * v * v) + 74 * (v * v * v) - 20 * (v * v) - 10 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v * v) - 57 * (v * v * v * v * v * v) + 114 * (v * v * v * v * v) + 7 * (v * v * v * v) - 52 * (v * v * v) - 3 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 7 * (v * v * v * v) + 10 * (v * v * v) + 14 * (v * v) - 8 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 3 * v + 4)) - 2 * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - (v * v * v) * (11 * (v * v) - 2 * v + 1) * (w * w * w * w) + 2 * (v * v * v) * (4 * (v * v) + 11 * v - 5) * (w * w * w) - v * ((v * v * v * v) + 16 * (v * v * v) + 24 * (v * v) - 20 * v - 1) * (w * w) - 2 * v * ((v * v * v * v) - 4 * (v * v * v) - 2 * (v * v) - 8 * v + 9) * w + 2 * (v - 3) * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * ((v * v) * (w * w) - 2 * v * w + 2) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 3) * (w * w * w) + (v * v) * ((v * v) + 3 * v + 12) * (w * w) - v * ((v + 3) * (v + 3)) * w + 4 * ((v * v) + 1)) + v2 * (-4 * (v * v * v) * (w * w * w) + (v * v) * (5 * v + 7) * (w * w) - v * (3 * (v * v) + 6 * v + 7) * w + 4 * ((v * v) + 1))) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -4 * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * v * w * ((v * v * v) * (w * w * w) - (v * v) * (5 * v - 3) * (w * w) + (v - 1) * v * (5 * v + 1) * w - ((v - 1) * (v - 1)) * (v + 1))) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -((v * v) * (w * w) - 2 * v * w + 1) * (2 * v1 * (v * w - v + 1) * (2 * (v * v * v) * (w * w * w) - (v * v) * ((v * v) + 7) * (w * w) + 2 * v * ((v * v * v) - (v * v) + 3 * v + 3) * w - 2 * ((v * v) + 1) * ((v * v) - v + 2)) + 4 * v2 * (v * w - v - 1) * ((v * v * v) * (w * w * w) - (v * v) * (3 * v - 1) * (w * w) + v * ((v * v) + 2 * v - 1) * w - (v - 1) * ((v * v) + 1)) - 2 * CQ * v * ((v * v) + 1) * v2 * (v * w - v + 1) * ((w * w) - 2 * w + 2) - CQ * (((v * v) + 1) * ((v * v) + 1)) * v1 * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * std::log(w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * (v * w - v + 1)) + (3 * v1 * (8 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + (v * v * v * v) * (2 * (v * v * v * v) - 24 * (v * v * v) - 13 * (v * v) + 5 * v - 2) * (w * w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) - 32 * (v * v * v) - 46 * (v * v) + 17 * v - 7) * (w * w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) - 12 * (v * v * v * v * v) - 36 * (v * v * v * v) + 7 * (v * v * v) + 5 * (v * v) - 7 * v + 2) * (w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v) + 19 * (v * v * v * v) + 22 * (v * v * v) - 27 * (v * v) + 11 * v - 5) * (w * w * w) - (8 * (v * v * v * v * v * v * v) + 17 * (v * v * v * v * v * v) + 3 * (v * v * v * v * v) + 40 * (v * v * v * v) - 66 * (v * v * v) + 21 * (v * v) - 9 * v + 2) * (w * w) + (v - 1) * (16 * (v * v * v * v * v) - 11 * (v * v * v * v) + 34 * (v * v * v) + 2 * (v * v) - 6 * v - 3) * w - 8 * ((v - 1) * (v - 1)) * v * ((v * v) - v + 2)) + 3 * AL * v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) + 12 * v * v2 * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (4 * (v * v) - v + 1) * (w * w * w * w * w) + (v * v) * (5 * (v * v * v) + 2 * (v * v) + 3 * v - 1) * (w * w * w * w) - v * (5 * (v * v * v * v) - 2 * (v * v * v) + 16 * (v * v) - 8 * v - 1) * (w * w * w) + (4 * (v * v * v * v * v) - 3 * (v * v * v * v) + 12 * (v * v * v) - 4 * (v * v) - 6 * v + 1) * (w * w) - (v - 1) * ((v * v * v * v) + 2 * (v * v * v) + 4 * (v * v) + 4 * v - 3) * w + ((v - 1) * (v - 1)) * ((v * v) + 3)) + 4 * CQ * v1 * (v * w - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (v + 2) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 5 * v - 3) * (w * w * w * w) + (v * v) * ((v * v * v * v) + 7 * (v * v * v) - (v * v) - 4 * v + 1) * (w * w * w) - (v * v) * ((v * v * v * v) + 3 * (v * v * v) + 4 * (v * v) - 5 * v + 1) * (w * w) + (v - 1) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 4 * v + 1) * w - ((v - 1) * (v - 1)) * (3 * (v * v) - 6 * v + 7)) - 6 * AL * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1)) - 8 * CQ * v2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v - 1) * (v * v) * (w * w) - v * ((v * v) + 2 * v - 1) * w + 2 * (v - 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) - 2 * v2 * (v * w - 1) * (v * w - v - 1) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 2 * std::log(S / q2_fragm) * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 2:
        return std::log(1 - w) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 2 * v + 3) * (w * w * w * w) + 2 * (v * v * v) * ((v * v) + 5 * v + 2) * (w * w * w) - 2 * (v * v) * (3 * (v * v) + 3 * v + 5) * (w * w) + 2 * v * ((v * v) + 2 * v + 3) * w - (v * v) - 1) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 2 * (v - 1) * v * v2 * w * (3 * (v * v * v) * (w * w * w) - 7 * (v * v) * (w * w) + v * (2 * v - 1) * w + 3) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -std::log(1 - v) * (v1 * (4 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 4 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + (v * v * v * v) * (2 * (v * v) + 9 * v + 1) * (w * w * w * w) - (v * v * v) * (7 * (v * v) + 3 * v + 18) * (w * w * w) + (v * v) * (8 * (v * v) - 3 * v + 31) * (w * w) - v * (7 * (v * v) - 5 * v + 18) * w + 2 * ((v * v) + 1)) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) + 2 * v * v2 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v) * (w * w) + (v * v) - 8 * v + 9)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + std::log(v) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) - (v * v * v) * ((v * v * v) + (v * v) + 5 * v + 1) * (w * w * w * w) + (v * v) * ((v * v * v) + 7 * (v * v) + 5 * v + 3) * (w * w * w) - v * (5 * (v * v * v) + 3 * (v * v) + 7 * v + 3) * (w * w) + (3 * (v * v * v) + 3 * (v * v) + 5 * v + 1) * w - 2 * ((v * v) + 1)) - 2 * v * v2 * w * (2 * (v * v * v * v) * (w * w * w * w) + 2 * (v * v * v) * (5 * v - 7) * (w * w * w) - (v * v) * (3 * (v * v) + 20 * v - 11) * (w * w) + 2 * v * (4 * (v * v) + v + 9) * w - 3 * (v * v) + 4 * v - 15) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * CQ * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * (v1 * (2 * (v * v * v) * (w * w * w) - 2 * (v - 2) * (v * v) * (w * w) + v * ((v * v) - v + 6) * w - (v * v) - 1) + v * v2 * w * (4 * v * w + 5 * v - 1)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * (v1 * (2 * (v * v) * (w * w) - 2 * (v - 2) * v * w + (v * v) - 2 * v + 5) + 2 * (v - 1) * v2) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + -(v1 * (v * ((v * v) + 4 * v + 1) * (w * w) - (v + 1) * ((v * v) + 1) * w + 3 * ((v * v) + 1)) + 2 * v * v2 * w * (2 * (v * v) * (w * w) + 10 * (v - 1) * v * w - 3 * (v * v) - 2 * v - 9)) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * std::log(w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + (3 * (v - 1) * v1 * (v * w - 1) * (6 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w) + (v * v * v * v) * (7 * (v * v * v) + 2 * (v * v) + 3 * v - 6) * (w * w * w * w * w) - (v * v * v) * ((v * v * v * v) - 9 * (v * v * v) + 21 * (v * v) - 29 * v - 12) * (w * w * w * w) - 2 * (v * v * v) * (4 * (v * v * v) - 19 * (v * v) + 34 * v - 2) * (w * w * w) - 2 * v * (7 * (v * v * v * v) - 21 * (v * v * v) + 13 * (v * v) - 7 * v + 6) * (w * w) + (v + 2) * (3 * (v * v) - 4 * v + 3) * w - (v - 1) * ((v * v) + 4 * v + 1)) + 12 * (v - 1) * v2 * w * (v * w - 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (3 * (v * v) + 3 * v - 2) * (w * w * w * w) + (v * v * v) * (3 * (v * v) + 5 * v - 4) * (w * w * w) + (v * v * v) * (2 * (v * v * v) - 2 * (v * v) - 9 * v + 5) * (w * w) - v * (4 * (v * v * v * v) - 16 * (v * v * v) + 9 * (v * v) + 5 * v - 4) * w - 2 * (v - 1) * (2 * v - 1) * ((v * v) - v + 1)) - 6 * AL * (v - 1) * v1 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 8 * CQ * ((v - 1) * (v - 1)) * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 12 * AL * (v - 1) * v * v2 * w * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) - 16 * CQ * ((v - 1) * (v - 1)) * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1)) / (((v - 1) * (v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1)) / 6.0l + std::log(S / q2_fac) * (-v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + (v * v * v) * ((v * v * v) + 2 * (v * v) + 4 * v + 1) * (w * w * w * w) - (v * v) * (2 * (v * v * v) + 10 * (v * v) + 5 * v + 3) * (w * w * w) + v * (5 * (v * v * v) + 8 * (v * v) + 10 * v + 3) * (w * w) - (4 * (v * v * v) + 2 * (v * v) + 9 * v + 1) * w + 2 * ((v * v) + 1)) - 2 * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -std::log(S / q2_fragm) * v1 * (2 * (v * v * v) * (w * w * w) - 2 * (v * v) * (2 * v - 3) * (w * w) + v * (3 * (v * v) - 8 * v + 9) * w - (v - 1) * ((v * v) - v + 4)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) / (((v - 1) * (v - 1)) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1));
    case 3:
        return std::log(1 - w) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (8 * (v * v * v * v) + 12 * (v * v * v) + 21 * (v * v) - v + 2) * (w * w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 29 * (v * v * v * v) + 9 * (v * v * v) - 6 * (v * v) + v - 1) * (w * w * w * w) - 2 * (v * v) * (6 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) + 11 * (v * v * v * v) + 30.0l * (v * v * v) - 16 * (v * v) - 2 * v - 3) * (w * w * w) + (4 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v) + 54 * (v * v * v * v * v) - 5 * (v * v * v * v) - 32 * (v * v * v) + (v * v) - 2 * v + 1) * (w * w) - 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 7 * (v * v * v * v) + 6 * (v * v * v) + 6 * (v * v) - 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 2)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 12 * (v * v * v) + 7 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 2 * (v * v * v) + 19 * (v * v) - 3 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 27 * (v * v * v * v) + 13 * (v * v * v) - 10 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 4 * (v * v * v * v * v) + 5 * (v * v * v * v) + 46 * (v * v * v) - 24 * (v * v) - 2 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v) - 29 * (v * v * v * v * v * v) + 74 * (v * v * v * v * v) + 7 * (v * v * v * v) - 56 * (v * v * v) + 9 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 9 * (v * v * v * v) + 6 * (v * v * v) + 12 * (v * v) - 8 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) - 2 * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (9 * (v * v) - 12 * v - 1) * (w * w * w * w) - 4 * (v * v * v) * (4 * (v * v) - 3 * v - 4) * (w * w * w) + v * (9 * (v * v * v * v) - 24 * (v * v) - 2 * v + 1) * (w * w) - 2 * v * (3 * (v * v * v) - 8 * (v * v) - v + 2) * w - 4 * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (2 * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - 2 * (v * v * v * v) * (2 * v + 1) * (w * w * w * w) + (v * v * v) * (3 * (v * v) + 4 * v + 5) * (w * w * w) - (v * v) * ((v * v * v) + 5 * (v * v) + 7 * v - 1) * (w * w) + 2 * v * (3 * (v * v * v) + (v * v) + v - 1) * w - 2 * (v - 1) * (v + 1) * ((v * v) + 1)) + CQ * v1 * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 8 * (v * v) * (w * w) - 8 * v * w + 4) - 4 * v2 * (v * w - v - 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - (v * v) * (v + 1) * (w * w) + 2 * v * (2 * v - 1) * w - (v - 1) * ((v * v) + 1)) - 2 * CQ * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 2) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * (v * w - v + 1)) + std::log(v) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (v + 1) * (5 * v + 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (6 * (v * v * v) + 12 * (v * v) + 17 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) + 6 * (v * v * v) + 46 * (v * v) + 14 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (3 * v + 5) * ((v * v * v * v) - 2 * (v * v * v) + 6 * (v * v) - 2 * v - 1) * (w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 7 * (v * v * v * v) + 20 * (v * v * v) + 3 * (v * v) - 18 * v + 3) * (w * w) - 2 * (v - 1) * v * (2 * (v * v * v * v * v) - 3 * (v * v * v * v) + 4 * (v * v * v) + 4 * (v * v) + 6 * v - 5) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 6 * (v * v * v) + 33 * (v * v) - 7 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 47 * (v * v * v * v) + 15 * (v * v * v) - 16 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 11 * (v * v * v * v) + 64 * (v * v * v) - 36 * (v * v) - 4 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v * v) - 41 * (v * v * v * v * v * v) + 106 * (v * v * v * v * v) + 7 * (v * v * v * v) - 76 * (v * v * v) + 13 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 11 * (v * v * v * v) + 6 * (v * v * v) + 18 * (v * v) - 12 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 3 * v + 4)) - 2 * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) + (v * v * v) * (7 * (v * v) - 16 * v - 1) * (w * w * w * w) - 4 * (v * v * v) * (4 * (v * v) - 4 * v - 5) * (w * w * w) + v * (11 * (v * v * v * v) - 4 * (v * v * v) - 24 * (v * v) - 4 * v + 1) * (w * w) - 2 * v * ((v * v * v * v) + 2 * (v * v * v) - 8 * (v * v) - 2 * v + 3) * w + 2 * (v - 3) * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * ((v * v) * (w * w) - 2 * v * w + 2) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 3) * (w * w * w) + (v * v) * ((v * v) + 4 * v + 11) * (w * w) - 2 * v * ((v * v) + 3 * v + 4) * w + 4 * ((v * v) + 1)) - 2 * v2 * (2 * (v * v * v) * (w * w * w) - (v * v) * (v + 5) * (w * w) + v * (3 * v + 5) * w - 2 * ((v * v) + 1))) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -4 * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 3 * (v - 1) * v * v2 * w * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) + 2 * ((v - 1) * (v - 1)) * (v * v * v) * v1 * (w - 1) * (w * w)) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -((v * v) * (w * w) - 2 * v * w + 1) * (2 * v1 * (2 * (v * v * v * v) * (w * w * w * w) - (v * v * v) * (v + 1) * (v + 3) * (w * w * w) + (v * v) * (3 * (v * v * v) - (v * v) + 13 * v - 3) * (w * w) - 2 * v * (2 * v - 1) * ((v * v * v) - (v * v) + 3 * v + 1) * w + 2 * (v - 1) * ((v * v) + 1) * ((v * v) - v + 2)) + 4 * v2 * (v * w - v - 1) * ((v * v * v) * (w * w * w) - 2 * (v * v) * (w * w) + v * ((v * v) + 2 * v - 1) * w - (v - 1) * ((v * v) + 1)) - 2 * CQ * v * ((v * v) + 1) * v2 * (v * w - v + 1) * ((w * w) - 2 * w + 2) - CQ * (((v * v) + 1) * ((v * v) + 1)) * v1 * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * std::log(w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * (v * w - v + 1)) + (3 * AL * v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) + 6 * v * v2 * (v * w - 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (v + 1) * (5 * v - 1) * (w * w * w * w * w) + (v * v) * (7 * (v * v * v) + 13 * (v * v) - 3 * v + 1) * (w * w * w * w) - v * (7 * (v * v * v * v) + 20 * (v * v * v) - 4 * (v * v) - 4 * v + 1) * (w * w * w) + (5 * (v * v * v * v * v) + 9 * (v * v * v * v) + 12 * (v * v * v) - 20 * (v * v) + 3 * v - 1) * (w * w) - 2 * (v - 1) * ((v * v * v * v) + 2 * (v * v * v) + 4 * (v * v) + 4 * v - 3) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 3)) + 3 * v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (8 * (v * v * v * v * v) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) - 10 * (v * v * v) - 25 * (v * v) + 3 * v - 2) * (w * w * w * w) + v * (2 * (v * v * v * v) + 28 * (v * v * v) + 33 * (v * v) - 3 * v + 4) * (w * w * w) - (8 * (v * v * v * v * v) + 3 * (v * v * v * v) + 37 * (v * v * v) + 27 * (v * v) + 3 * v + 2) * (w * w) + (16 * (v * v * v * v) - 11 * (v * v * v) + 39 * (v * v) + 9 * v + 3) * w - 8 * v * ((v * v) - v + 2)) + 4 * CQ * v1 * (v * w - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (v + 2) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 5 * v - 3) * (w * w * w * w) + (v * v) * ((v * v * v * v) + 7 * (v * v * v) - (v * v) - 4 * v + 1) * (w * w * w) - (v * v) * ((v * v * v * v) + 3 * (v * v * v) + 4 * (v * v) - 5 * v + 1) * (w * w) + (v - 1) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 4 * v + 1) * w - ((v - 1) * (v - 1)) * (3 * (v * v) - 6 * v + 7)) - 6 * AL * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1)) - 8 * CQ * v2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v - 1) * (v * v) * (w * w) - v * ((v * v) + 2 * v - 1) * w + 2 * (v - 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) - 2 * v2 * (v * w - 1) * (v * w - v - 1) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 2 * std::log(S / q2_fragm) * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 4:
        return std::log(1 - w) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (2 * v - 1) * (w * w * w * w * w) - (v * v * v * v) * (6 * (v * v) - 8 * v + 3) * (w * w * w * w) + 2 * (v - 1) * (v * v * v) * (8 * (v * v) - 9 * v + 2) * (w * w * w) - 2 * ((v - 1) * (v - 1)) * (v * v) * (11 * (v * v) - 13 * v + 5) * (w * w) + 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (6 * (v * v) - 8 * v + 3) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * (v - 1) * v * v2 * w * (3 * (v * v * v) * (w * w * w) - 7 * (v - 1) * (v * v) * (w * w) + (v - 1) * v * (v + 1) * w + 3 * ((v - 1) * (v - 1) * (v - 1))) + 2 * CQ * (v - 1) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -std::log(1 - v) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (v1 * (6 * (v * v * v * v) * (w * w * w * w) - 12 * (v * v * v) * (w * w * w) + (v * v) * (6 * (v * v) - 4 * v + 7) * (w * w) - v * (20 * (v * v * v) - 48 * (v * v) + 50 * v - 19) * w + (v - 1) * (20 * (v * v) - 33 * v + 18)) + 2 * (v - 1) * v2 * (v * w - 1) * (2 * (v * v) * (w * w) - 5 * v * w + 10 * (v * v) - 17 * v + 10)) / ((v - 1) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (v1 * (-2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (2 * v - 1) * (w * w * w * w * w) - (v * v * v) * (8 * (v * v * v) - 14 * (v * v) + 8 * v - 1) * (w * w * w * w) + (v - 1) * (v * v) * (16 * (v * v * v) - 26 * (v * v) + 14 * v - 3) * (w * w * w) - ((v - 1) * (v - 1)) * v * (18 * (v * v * v) - 26 * (v * v) + 16 * v - 3) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (12 * (v * v * v) - 16 * (v * v) + 8 * v - 1) * w - 2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * (v - 1) * v * v2 * w * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (2 * v - 7) * (w * w * w) - (v * v) * (12 * (v * v) + 2 * v - 11) * (w * w) + 2 * (v - 1) * v * (14 * (v * v) - 19 * v + 9) * w - ((v - 1) * (v - 1)) * (14 * (v * v) - 26 * v + 15)) + CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * CQ * (v - 1) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + 2 * (v1 * (2 * (v * v) * (w * w) + 2 * (v - 2) * v * w + 4 * (v * v) - 8 * v + 5) + 2 * (v - 1) * v2) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * std::log(1 - v * w) / ((v - 1) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + 2 * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + (v - 1) * v * v2 * w * (9 * (v * v * v) * (w * w * w) - (v * v) * (8 * (v * v) + 3 * v - 9) * (w * w) + ((v - 1) * (v - 1)) * v * (16 * v + 3) * w - ((v - 1) * (v - 1)) * (8 * (v * v) - 7 * v + 1)) + (v - 1) * v * v1 * w * (5 * (v * v * v) * (w * w * w) - (v * v) * (8 * (v * v) - 9 * v + 5) * (w * w) + (v - 1) * v * (16 * (v * v) - 25 * v + 13) * w - ((v - 1) * (v - 1)) * (8 * (v * v) - 11 * v + 7)) + 2 * CQ * (v - 1) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) * std::log(v * w - v + 1) / ((v - 1) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -(v1 * (v * (6 * (v * v) - 6 * v + 1) * (w * w) - (2 * v - 1) * (2 * (v * v) - 2 * v + 1) * w + 3 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + 2 * v * v2 * w * (2 * (v * v) * (w * w) + 10 * v * w - 14 * (v * v) + 20 * v - 9)) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * std::log(w) / (v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (6 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w * w) - (v - 2) * (v * v * v * v) * (18 * (v * v) - 14 * v + 3) * (w * w * w * w * w) + (v * v * v) * (52 * (v * v * v * v) - 150 * (v * v * v) + 162 * (v * v) - 77 * v + 12) * (w * w * w * w) - 2 * (v - 1) * (v * v * v) * (21 * (v * v * v) - 43 * (v * v) + 22 * v + 2) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * v * (2 * (v * v * v * v) + 12 * (v * v * v) - 32 * (v * v) + 17 * v - 6) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (6 * (v * v * v * v) - 16 * (v * v * v) + 19 * (v * v) - 11 * v + 6) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (6 * (v * v) - 6 * v + 1)) + 4 * (v - 1) * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v) + v - 2) * (w * w * w * w) + (v - 1) * (v * v * v) * (4 * (v * v) + 3 * v - 4) * (w * w * w) - (v * v * v) * (4 * (v * v * v) - 5 * (v * v) - 6 * v + 5) * (w * w) + (v - 1) * v * (2 * (v * v * v * v) + (v * v * v) - 11 * v + 4) * w - 2 * ((v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1))) / ((v - 1) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 2.0l + -std::log(S / q2_fac) * v1 * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v) * (w * w * w * w) + 2 * (v - 3) * (v * v * v) * (w * w * w) + v * (6 * (v * v * v) - 14 * (v * v) + 12 * v - 1) * (w * w) - (2 * (v * v * v * v) + 2 * (v * v * v) - 8 * (v * v) + 6 * v - 1) * w + (v - 1) * (2 * (v * v) - 2 * v + 1)) / ((v - 1) * v * w * (v * w - 1) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -std::log(S / q2_fragm) * ((v * v) * (w * w) - 2 * v * w + 1) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (6 * (v * v) - 9 * v + 4) * (w * w * w * w) - (v - 1) * (v * v * v) * (12 * (v * v) - 15 * v + 4) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (14 * (v * v) - 19 * v + 7) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * (8 * (v * v) - 13 * v + 6) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * v * w * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    case 5:
        return std::log(1 - w) * (CQ * v1 * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + (v * v * v) * (2 * (v * v * v * v * v) - 5 * (v * v * v * v) + 17 * (v * v * v) - 16 * (v * v) + 12 * v - 4) * (w * w * w * w * w) - (v * v) * (2 * (v * v * v * v * v * v) - 7 * (v * v * v * v * v) + 13 * (v * v * v * v) + 8 * (v * v * v) - 24 * (v * v) + 28 * v - 12) * (w * w * w * w) + v * (2 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) - (v * v * v * v * v) + 25 * (v * v * v * v) - 32 * (v * v * v) + 16 * (v * v) + 12 * v - 12) * (w * w * w) - (6 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v) + 43 * (v * v * v * v * v) - 27 * (v * v * v * v) - 10 * (v * v * v) + 32 * (v * v) - 12 * v - 4) * (w * w) + (6 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 63 * (v * v * v * v) - 72 * (v * v * v) + 41 * (v * v) - 8) * w - 2 * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2))) + v1 * (-2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) - (v * v * v) * (2 * (v * v * v * v * v) + 3 * (v * v * v * v) + 7 * (v * v * v) - 14 * (v * v) + 12 * v - 4) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v * v * v) + (v * v * v * v * v) + 5 * (v * v * v * v) + 30.0l * (v * v * v) - 46 * (v * v) + 36 * v - 12) * (w * w * w * w) - v * (2 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) + 21 * (v * v * v * v * v) - 39 * (v * v * v * v) + 80 * (v * v * v) - 62 * (v * v) + 36 * v - 12) * (w * w * w) + (6 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v) + 63 * (v * v * v * v * v) - 99 * (v * v * v * v) + 108 * (v * v * v) - 50 * (v * v) + 12 * v - 4) * (w * w) - v * (6 * (v * v * v * v * v) - 28 * (v * v * v * v) + 69 * (v * v * v) - 96 * (v * v) + 79 * v - 28) * w + 2 * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2))) + 2 * CQ * v2 * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (3 * (v * v * v * v) - 2 * (v * v * v) + 7 * (v * v) - 6 * v + 2) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v) - 5 * (v * v * v * v) + 5 * (v * v * v) + 9 * (v * v) - 14 * v + 6) * (w * w * w * w) - v * (2 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) - 5 * (v * v * v * v) + 20 * (v * v * v) - 11 * (v * v) - 6 * v + 6) * (w * w * w) + (6 * (v * v * v * v * v * v) - 17 * (v * v * v * v * v) + 19 * (v * v * v * v) + 3 * (v * v * v) - 17 * (v * v) + 6 * v + 2) * (w * w) - 2 * ((v - 1) * (v - 1)) * (3 * v + 1) * ((v * v) - 2 * v + 2) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 2 * (v - 1) * v2 * w * ((v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 4 * v - 2) * (w * w * w * w) - (v * v) * (3 * (v * v * v * v) - 14 * (v * v * v) + 8 * (v * v) + 8 * v - 6) * (w * w * w) + v * (7 * (v * v * v * v) - 44 * (v * v * v) + 36 * (v * v) - 6) * (w * w) - (9 * (v * v * v * v) - 42 * (v * v * v) + 40 * (v * v) - 8 * v - 2) * w + (v - 1) * (3 * (v * v) - 10 * v + 4)) + 2 * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v - 1) * (v * v * v) * (w * w * w) - 4 * (v * v * v * v) * (w * w) + v * (2 * (v * v * v) + 2 * (v * v) - 2 * v + 7) * w - 4 * (v * v) + 7 * v - 5) + 2 * (v - 1) * v * v3 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w) - 2 * (v - 1) * (v * v) * (w * w) + v * (2 * (v * v) + 1) * w - 2 * (v * v * v) + 6 * (v * v) - 9 * v + 3)) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -std::log(1 - v) * (2 * v1 * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + (v * v * v * v * v) * ((v * v * v) + 7 * (v * v) - 3 * v + 1) * (w * w * w * w * w) - (v * v * v) * (9 * (v * v * v * v) - 9 * (v * v * v) + 35 * (v * v) - 31 * v + 10) * (w * w * w * w) + (v * v) * (23 * (v * v * v * v) - 60 * (v * v * v) + 130 * (v * v) - 105 * v + 30.0l) * (w * w * w) - v * (28 * (v * v * v * v) - 87 * (v * v * v) + 158 * (v * v) - 119 * v + 30.0l) * (w * w) + (15 * (v * v * v * v) - 48 * (v * v * v) + 77 * (v * v) - 52 * v + 10) * w - 3 * (v - 1) * ((v * v) - 2 * v + 2)) + 2 * v2 * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v * v) * (w * w * w * w) - 3 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + v * (6 * (v * v * v * v) - 11 * (v * v * v) + 20 * (v * v) - 21 * v + 8) * (w * w) - ((v - 1) * (v - 1)) * (2 * (v * v * v) + (v * v) - 4 * v + 8) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 2 * (v - 1) * v * v4 * w * (v * w - 1) * (2 * (v * v * v * v * v) * (w * w * w * w) - 2 * (v - 1) * (v * v * v) * (2 * v + 1) * (w * w * w) + (v * v) * (2 * (v * v * v) + v - 14) * (w * w) - v * (2 * (v * v * v) - 6 * (v * v) + 11 * v - 22) * w - 2 * (2 * (v * v) - 4 * v + 5)) + CQ * (v * v) * v1 * w * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * CQ * (v * v * v) * v2 * (w * w) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) + 2 * (v - 1) * v * v3 * w * (v * (2 * (v * v) - 3 * v + 4) * w - 2 * (v - 1) * ((v * v) - 2 * v + 2)) * ((v * v) * (w * w) - 2 * v * w + 1)) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + std::log(v) * (v1 * (-2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) - (v * v * v) * (2 * (v * v * v * v * v) + 9 * (v * v * v * v) + (v * v * v) - 8 * (v * v) + 6 * v - 2) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v * v * v) - (v * v * v * v * v) + 35 * (v * v * v * v) - 4 * (v * v * v) - 6 * (v * v) + 12 * v - 6) * (w * w * w * w) - v * (2 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) + 13 * (v * v * v * v * v) + 23 * (v * v * v * v) + 22 * (v * v) - 6) * (w * w * w) + (6 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v) + 53 * (v * v * v * v * v) - 41 * (v * v * v * v) + 26 * (v * v * v) + 22 * (v * v) - 12 * v - 2) * (w * w) - (6 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 65 * (v * v * v * v) - 76 * (v * v * v) + 49 * (v * v) - 6 * v - 6) * w + 2 * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2))) - 2 * v2 * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (9 * (v * v * v * v) - 8 * (v * v * v) + 7 * (v * v) - 6 * v + 2) * (w * w * w * w * w) + (v * v) * (5 * (v * v * v * v * v) - 3 * (v * v * v * v) + 25 * (v * v * v) - 15 * (v * v) - 6 * v + 6) * (w * w * w * w) + v * (2 * (v * v * v * v * v * v) - 18 * (v * v * v * v * v) + 55 * (v * v * v * v) - 126 * (v * v * v) + 91 * (v * v) - 18 * v - 6) * (w * w * w) - (6 * (v * v * v * v * v * v) - 33 * (v * v * v * v * v) + 91 * (v * v * v * v) - 155 * (v * v * v) + 113 * (v * v) - 30.0l * v - 2) * (w * w) + 2 * ((v - 1) * (v - 1)) * (3 * (v * v * v) - 7 * (v * v) + 12 * v - 6) * w - 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + CQ * (v * v) * v1 * w * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 4 * (v - 1) * v * v3 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w) - 4 * v * w - (v - 2) * ((v * v) - 2 * v + 2)) - 4 * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (v * ((v * v) + 1) * (w * w) - (5 * v + 1) * w - (v * v * v) + 4 * (v * v) - 6 * v + 5) + 2 * CQ * (v * v * v) * v2 * (w * w) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * (2 * (v * v * v * v * v) * (w * w * w * w) - 2 * (v - 2) * (v * v * v * v) * (w * w * w) + (v * v * v) * ((v * v) + 2 * v + 3) * (w * w) - (3 * (v * v * v * v) - 8 * (v * v * v) + 17 * (v * v) - 14 * v + 4) * w + 2 * (v - 1) * ((v * v) - 2 * v + 2)) + v * v2 * w * (4 * (v * v * v) * (w * w) - (v - 5) * (v * v) * w - 2 * ((v - 1) * (v - 1))) + (v - 1) * v * v4 * w * (4 * (v * v) * w - 4 * (v * v) + 7 * v - 7) + (v - 1) * v * v3 * w * (2 * (v * v) * w - 2 * (v * v) + 3 * v - 5)) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * (2 * (v * v * v * v * v) * (w * w * w * w) - 2 * (v - 2) * (v * v * v * v) * (w * w * w) + (v * v * v) * (2 * (v * v) - 3 * v + 5) * (w * w) - ((v - 1) * (v - 1)) * (2 * (v * v * v) - (v * v) - 4 * v + 4) * w + 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 4 * (v - 1) * v * v4 * w * ((v * v * v) * (w * w) - (v * v) * (2 * v - 3) * w + (v - 1) * ((v * v) - 2 * v + 2)) - (v - 1) * v * v2 * w * ((v * v) * w - (v - 4) * (v - 1))) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + -((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * v2 * (2 * (v * v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (6 * v - 1) * (w * w * w) + (v * v) * (3 * (v * v * v) + 2 * (v * v) + 4 * v + 1) * (w * w) - 2 * ((v - 1) * (v - 1)) * v * ((v * v) - 2 * v + 2) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 2 * v1 * (v * ((v * v * v * v * v) + 4 * (v * v * v * v) - 3 * (v * v * v) + 3 * (v * v) - 3 * v + 1) * (w * w * w) - (2 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 2 * (v * v * v * v) + 17 * (v * v * v) - 12 * (v * v) + 2 * v + 1) * (w * w) + (2 * (v * v * v * v * v * v) - 8 * (v * v * v * v * v) + 20 * (v * v * v * v) - 30.0l * (v * v * v) + 37 * (v * v) - 23 * v + 5) * w - 2 * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2))) + 2 * (v - 1) * v * v4 * w * (2 * (v - 1) * (v * v * v) * (w * w * w) - 2 * v * (2 * (v * v * v) - 3 * (v * v) - 1) * (w * w) + (2 * (v * v * v * v) - 2 * (v * v * v) + (v * v) - 10 * v - 2) * w - 2 * ((v * v * v) - 4 * (v * v) + 6 * v - 6)) + 2 * (v - 1) * (v * v) * v3 * (w * w) * (2 * (v * v) * (w * w) - 2 * (v - 1) * v * w + v + 4) - 2 * CQ * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * v2 * (v * w - 1) * ((w * w) - 2 * w + 2) + CQ * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * v1 * (v * w - 1) * ((w * w) - 2 * w + 2)) * std::log(w) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1))) + (3 * (v - 1) * v1 * (v * w - 1) * (6 * (v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) + (v * v * v * v) * (8 * (v * v * v * v * v) + (v * v * v * v) + 19 * (v * v * v) - 62 * (v * v) + 64 * v - 24) * (w * w * w * w * w * w) - (v - 2) * (v * v * v) * (8 * (v * v * v * v * v) - 22 * (v * v * v * v) + 75 * (v * v * v) - 35 * (v * v) - 22 * v + 24) * (w * w * w * w * w) + (v * v * v) * (12 * (v * v * v * v * v * v) - 43 * (v * v * v * v * v) + 55 * (v * v * v * v) + 62 * (v * v * v) - 344 * (v * v) + 368 * v - 144) * (w * w * w * w) - v * (6 * (v * v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v * v) - 93 * (v * v * v * v * v * v) + 245 * (v * v * v * v * v) - 304 * (v * v * v * v) + 90 * (v * v * v) + 200 * (v * v) - 200 * v + 48) * (w * w * w) + (18 * (v * v * v * v * v * v * v * v) - 60 * (v * v * v * v * v * v * v) - 3 * (v * v * v * v * v * v) + 289 * (v * v * v * v * v) - 551 * (v * v * v * v) + 503 * (v * v * v) - 198 * (v * v) - 16 * v + 24) * (w * w) - (v - 1) * (18 * (v * v * v * v * v * v) - 66 * (v * v * v * v * v) + 59 * (v * v * v * v) + 56 * (v * v * v) - 119 * (v * v) + 100 * v - 36) * w + 2 * ((v - 1) * (v - 1)) * (3 * (v * v * v * v) - 10 * (v * v * v) + 8 * (v * v) + 2)) + 12 * (v - 1) * v2 * (v * w - 1) * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v) * (10 * (v * v * v * v) - 23 * (v * v * v) + 35 * (v * v) - 24 * v + 6) * (w * w * w * w * w * w) + (v * v * v) * (12 * (v * v * v * v * v) - 25 * (v * v * v * v) + 13 * (v * v * v) + 28 * (v * v) - 36 * v + 12) * (w * w * w * w * w) - (v * v * v) * (10 * (v * v * v * v * v) - 25 * (v * v * v * v) - 11 * (v * v * v) + 98 * (v * v) - 98 * v + 30.0l) * (w * w * w * w) + v * (2 * (v * v * v * v * v * v * v) + 3 * (v * v * v * v * v * v) - 27 * (v * v * v * v * v) + 24 * (v * v * v * v) + 62 * (v * v * v) - 116 * (v * v) + 66 * v - 12) * (w * w * w) - (v - 1) * (6 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) - 3 * (v * v * v * v) + 22 * (v * v * v) - 7 * (v * v) - 12 * v + 6) * (w * w) + ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (6 * (v * v) - v - 3) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - 6 * AL * (v - 1) * v1 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + (v * v * v) * (2 * (v * v * v * v * v) - 5 * (v * v * v * v) + 17 * (v * v * v) - 16 * (v * v) + 12 * v - 4) * (w * w * w * w * w) - (v * v) * (2 * (v * v * v * v * v * v) - 7 * (v * v * v * v * v) + 13 * (v * v * v * v) + 8 * (v * v * v) - 24 * (v * v) + 28 * v - 12) * (w * w * w * w) + v * (2 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) - (v * v * v * v * v) + 25 * (v * v * v * v) - 32 * (v * v * v) + 16 * (v * v) + 12 * v - 12) * (w * w * w) - (6 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v) + 43 * (v * v * v * v * v) - 27 * (v * v * v * v) - 10 * (v * v * v) + 32 * (v * v) - 12 * v - 4) * (w * w) + (6 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 63 * (v * v * v * v) - 72 * (v * v * v) + 41 * (v * v) - 8) * w - 2 * (v - 1) * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2))) - 12 * AL * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (3 * (v * v * v * v) - 2 * (v * v * v) + 7 * (v * v) - 6 * v + 2) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v) - 5 * (v * v * v * v) + 5 * (v * v * v) + 9 * (v * v) - 14 * v + 6) * (w * w * w * w) - v * (2 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) - 5 * (v * v * v * v) + 20 * (v * v * v) - 11 * (v * v) - 6 * v + 6) * (w * w * w) + (6 * (v * v * v * v * v * v) - 17 * (v * v * v * v * v) + 19 * (v * v * v * v) + 3 * (v * v * v) - 17 * (v * v) + 6 * v + 2) * (w * w) - 2 * ((v - 1) * (v - 1)) * (3 * v + 1) * ((v * v) - 2 * v + 2) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - 8 * CQ * ((v - 1) * (v - 1)) * v1 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v * v) * (w * w * w * w) + (v * v) * ((v * v * v * v) - 4 * (v * v * v) + 10 * (v * v) - 8 * v + 4) * (w * w) - 2 * v * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * w + (v * v * v * v) - 4 * (v * v * v) + 9 * (v * v) - 8 * v + 4) + 12 * ((v - 1) * (v - 1)) * v * v4 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w) - (v * v) * (2 * (v * v * v) + 2 * (v * v) + v + 4) * (w * w * w) + v * ((v * v * v * v) + 4 * (v * v * v) - 6 * (v * v) + 7 * v + 8) * (w * w) - (2 * (v * v * v * v) + 3 * (v * v * v) - 16 * (v * v) + 11 * v + 4) * w + (v * v * v) + 5 * (v * v) - 13 * v + 5) - 16 * CQ * ((v - 1) * (v - 1)) * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w) - (v - 1) * (v * v) * ((v * v) - 2 * v + 2) * (w * w) + v * (2 * (v * v * v) - 5 * (v * v) + 8 * v - 4) * w - (v - 1) * ((v * v) - 2 * v + 2)) - 12 * ((v - 1) * (v - 1) * (v - 1)) * v * v3 * (w * w) * (v * w - v + 1) * ((v * v) * (4 * v - 3) * (w * w) - 2 * v * (2 * (v * v) + 4 * v - 3) * w + (v * v) + 4 * v - 3) * ((v * v) * (w * w) - 2 * v * w + 1)) / (((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1)) / 6.0l + std::log(S / q2_fac) * (-v1 * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + (v * v * v) * (2 * (v * v * v * v * v) - (v * v * v * v) + 11 * (v * v * v) - 8 * (v * v) + 6 * v - 2) * (w * w * w * w * w) - (v * v) * (2 * v - 1) * ((v * v * v * v * v) - (v * v * v * v) + 8 * (v * v * v) + 10 * (v * v) - 4 * v + 6) * (w * w * w * w) + v * (2 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) + 9 * (v * v * v * v * v) + 11 * (v * v * v * v) + 20 * (v * v * v) - 18 * (v * v) + 12 * v - 6) * (w * w * w) - (6 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v) + 57 * (v * v * v * v * v) - 63 * (v * v * v * v) + 68 * (v * v * v) - 26 * (v * v) - 2) * (w * w) + (6 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 71 * (v * v * v * v) - 96 * (v * v * v) + 83 * (v * v) - 30.0l * v - 2) * w - 2 * (v - 1) * ((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 3)) - 2 * v2 * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (3 * (v * v * v * v) - 2 * (v * v * v) + 7 * (v * v) - 6 * v + 2) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v) - 5 * (v * v * v * v) + 5 * (v * v * v) + 9 * (v * v) - 14 * v + 6) * (w * w * w * w) - v * (2 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) - 5 * (v * v * v * v) + 20 * (v * v * v) - 11 * (v * v) - 6 * v + 6) * (w * w * w) + (6 * (v * v * v * v * v * v) - 17 * (v * v * v * v * v) + 19 * (v * v * v * v) + 3 * (v * v * v) - 17 * (v * v) + 6 * v + 2) * (w * w) - 2 * ((v - 1) * (v - 1)) * (3 * v + 1) * ((v * v) - 2 * v + 2) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - 4 * (v - 1) * v * v4 * w * (v * w - 1) * ((v * v) * (w * w * w) - v * (3 * v + 2) * (w * w) - ((v * v) - 6 * v - 1) * w - (v * v) + 2 * v - 3)) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1))) + -2 * std::log(S / q2_fragm) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * ((v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v * v) * (2 * v - 3) * (w * w * w * w) + (v * v * v * v) * (2 * (v * v) - 5 * v + 5) * (w * w * w) - (v - 1) * v * (v + 1) * (2 * v - 1) * ((v * v) - 2 * v + 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v * v) - 3 * (v * v) + 2) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 2 * (v - 1) * v * v4 * w * (v * w - v + 1) * ((v * v * v) * (w * w) - (v * v) * (2 * v - 3) * w + (v - 1) * ((v * v) - 2 * v + 2))) / (((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * (v * w - v + 1));
    case 6:
        return std::log(1 - w) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (8 * (v * v * v * v) + 12 * (v * v * v) + 21 * (v * v) - v + 2) * (w * w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 29 * (v * v * v * v) + 9 * (v * v * v) - 6 * (v * v) + v - 1) * (w * w * w * w) - 2 * (v * v) * (6 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) + 11 * (v * v * v * v) + 30.0l * (v * v * v) - 16 * (v * v) - 2 * v - 3) * (w * w * w) + (4 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v) + 54 * (v * v * v * v * v) - 5 * (v * v * v * v) - 32 * (v * v * v) + (v * v) - 2 * v + 1) * (w * w) - 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 7 * (v * v * v * v) + 6 * (v * v * v) + 6 * (v * v) - 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 2)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 2 * (v * v * v) + 17 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) - 11 * (v * v * v) + 25 * (v * v) + 4 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 19 * (v * v * v * v * v) + 20 * (v * v * v * v) + 33 * (v * v * v) - 10 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 9 * (v * v * v * v * v) - 11 * (v * v * v * v) + 63 * (v * v * v) - 16 * (v * v) - 6 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v) - 49 * (v * v * v * v * v * v) + 88 * (v * v * v * v * v) + 13 * (v * v * v * v) - 46 * (v * v * v) - (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 4 * (v * v * v * v) + 11 * (v * v * v) + 9 * (v * v) - 5 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) + 2 * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (6 * (v * v) - 3 * v + 1) * (w * w * w * w) - (v * v * v) * (8 * (v * v) + 9 * v - 5) * (w * w * w) + v * (6 * (v * v * v * v) + 9 * (v * v * v) + 15 * (v * v) - 13 * v - 1) * (w * w) - v * (9 * (v * v * v) + (v * v) + 11 * v - 13) * w + 4 * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1)) - 4 * CQ * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * (v - 1) * v4 * w * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * (v - 1) * v * v3 * w * (v * w - 1) * (v * w - v + 1) * (v * (w * w) - w + v - 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (2 * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 2) * (w * w * w) + (v * v) * ((v * v) + 2 * v + 9) * (w * w) - 2 * v * ((v * v) + 2 * v + 3) * w + 2 * (v + 1) * ((v * v) + 1)) + CQ * v1 * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 8 * (v * v) * (w * w) - 8 * v * w + 4) - 4 * v2 * (v * w - v - 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - (v * v) * (v + 1) * (w * w) + v * (3 * (v * v) - 2 * v + 1) * w - (v - 1) * ((v * v) + 1)) - 2 * CQ * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 2) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) + 4 * (v - 1) * (v * v) * v4 * (w * w) * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * ((v - 1) * (v - 1)) * v3 * w * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * (v * w - v + 1)) + std::log(v) * (-CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (v + 1) * (5 * v + 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (6 * (v * v * v) + 12 * (v * v) + 17 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) + 6 * (v * v * v) + 46 * (v * v) + 14 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (3 * v + 5) * ((v * v * v * v) - 2 * (v * v * v) + 6 * (v * v) - 2 * v - 1) * (w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 7 * (v * v * v * v) + 20 * (v * v * v) + 3 * (v * v) - 18 * v + 3) * (w * w) - 2 * (v - 1) * v * (2 * (v * v * v * v * v) - 3 * (v * v * v * v) + 4 * (v * v * v) + 4 * (v * v) + 6 * v - 5) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) - v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 12 * (v * v * v) + 23 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 37 * (v * v) + 3 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) + 35 * (v * v * v * v) + 37 * (v * v * v) - 14 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 14 * (v * v * v * v * v) - 5 * (v * v * v * v) + 74 * (v * v * v) - 20 * (v * v) - 10 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v * v) - 57 * (v * v * v * v * v * v) + 114 * (v * v * v * v * v) + 7 * (v * v * v * v) - 52 * (v * v * v) - 3 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 7 * (v * v * v * v) + 10 * (v * v * v) + 14 * (v * v) - 8 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 3 * v + 4)) - 2 * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - (v * v * v) * (11 * (v * v) - 2 * v + 1) * (w * w * w * w) + 2 * (v * v * v) * (4 * (v * v) + 11 * v - 5) * (w * w * w) - v * ((v * v * v * v) + 16 * (v * v * v) + 24 * (v * v) - 20 * v - 1) * (w * w) - 2 * v * ((v * v * v * v) - 4 * (v * v * v) - 2 * (v * v) - 8 * v + 9) * w + 2 * (v - 3) * (v - 1) * ((v * v) + 1)) + 2 * CQ * v2 * (v * w - 1) * ((v * v) * (w * w) - 2 * v * w + 2) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) - 4 * CQ * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * (v - 1) * v * v4 * w * (v * w - 2) * (v * w - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * (v - 1) * v * v3 * w * (v * w - 1) * (v * w - v + 1) * (v * w + v - 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 3) * (w * w * w) + (v * v) * ((v * v) + 3 * v + 12) * (w * w) - v * ((v + 3) * (v + 3)) * w + 4 * ((v * v) + 1)) + v2 * (-4 * (v * v * v) * (w * w * w) + (v * v) * (5 * v + 7) * (w * w) - v * (3 * (v * v) + 6 * v + 7) * w + 4 * ((v * v) + 1))) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -4 * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * v * v1 * w * ((v * v * v) * (w * w * w) - (v * v) * (5 * v - 3) * (w * w) + (v - 1) * v * (5 * v + 1) * w - ((v - 1) * (v - 1)) * (v + 1)) + 2 * CQ * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1)) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + (-2 * v1 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v) * (w * w * w) - (v * v) * ((v * v) + 7) * (w * w) + 2 * v * ((v * v * v) - (v * v) + 3 * v + 3) * w - 2 * ((v * v) + 1) * ((v * v) - v + 2)) - 4 * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v * v) * (w * w * w) - (v * v) * (3 * v - 1) * (w * w) + v * ((v * v) + 2 * v - 1) * w - (v - 1) * ((v * v) + 1)) + 4 * ((v - 1) * (v - 1)) * v4 * w * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) - 4 * (v - 1) * v * v3 * (w * w) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 2 * CQ * v * ((v * v) + 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2) + CQ * (((v * v) + 1) * ((v * v) + 1)) * v1 * (v * w - 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * std::log(w) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * (v * w - 1) * (v * w - v + 1)) + (3 * v1 * (8 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + (v * v * v * v) * (2 * (v * v * v * v) - 24 * (v * v * v) - 13 * (v * v) + 5 * v - 2) * (w * w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) - 32 * (v * v * v) - 46 * (v * v) + 17 * v - 7) * (w * w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) - 12 * (v * v * v * v * v) - 36 * (v * v * v * v) + 7 * (v * v * v) + 5 * (v * v) - 7 * v + 2) * (w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v) + 19 * (v * v * v * v) + 22 * (v * v * v) - 27 * (v * v) + 11 * v - 5) * (w * w * w) - (8 * (v * v * v * v * v * v * v) + 17 * (v * v * v * v * v * v) + 3 * (v * v * v * v * v) + 40 * (v * v * v * v) - 66 * (v * v * v) + 21 * (v * v) - 9 * v + 2) * (w * w) + (v - 1) * (16 * (v * v * v * v * v) - 11 * (v * v * v * v) + 34 * (v * v * v) + 2 * (v * v) - 6 * v - 3) * w - 8 * ((v - 1) * (v - 1)) * v * ((v * v) - v + 2)) + 3 * AL * v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) + 12 * v * v2 * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (4 * (v * v) - v + 1) * (w * w * w * w * w) + (v * v) * (5 * (v * v * v) + 2 * (v * v) + 3 * v - 1) * (w * w * w * w) - v * (5 * (v * v * v * v) - 2 * (v * v * v) + 16 * (v * v) - 8 * v - 1) * (w * w * w) + (4 * (v * v * v * v * v) - 3 * (v * v * v * v) + 12 * (v * v * v) - 4 * (v * v) - 6 * v + 1) * (w * w) - (v - 1) * ((v * v * v * v) + 2 * (v * v * v) + 4 * (v * v) + 4 * v - 3) * w + ((v - 1) * (v - 1)) * ((v * v) + 3)) + 4 * CQ * v1 * (v * w - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (v + 2) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 5 * v - 3) * (w * w * w * w) + (v * v) * ((v * v * v * v) + 7 * (v * v * v) - (v * v) - 4 * v + 1) * (w * w * w) - (v * v) * ((v * v * v * v) + 3 * (v * v * v) + 4 * (v * v) - 5 * v + 1) * (w * w) + (v - 1) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 4 * v + 1) * w - ((v - 1) * (v - 1)) * (3 * (v * v) - 6 * v + 7)) + 12 * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 6 * AL * v2 * (v * w - 1) * (v * w - v - 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1)) + 24 * CQ * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) - 8 * CQ * v2 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v - 1) * (v * v) * (w * w) - v * ((v * v) + 2 * v - 1) * w + 2 * (v - 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) - 2 * v2 * (v * w - 1) * (v * w - v - 1) * (2 * (v * v * v) * (w * w * w) - v * ((v * v) + 4 * v + 1) * (w * w) + 2 * v * ((v * v) + 3) * w - 2 * ((v * v) + 1))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 2 * std::log(S / q2_fragm) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * (v1 * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * (v - 1) * v * v4 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1)))) / (((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 7:
        return std::log(1 - w) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 30.0l * (v * v) - 7 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) + 15 * (v * v * v * v) + 25 * (v * v * v) - 16 * (v * v) + 5 * v - 1) * (w * w * w * w) - 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 60 * (v * v * v * v) + 114 * (v * v * v) - 71 * (v * v) + 20 * v - 3) * (w * w * w) + (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 280 * (v * v * v * v * v) - 150 * (v * v * v * v) + 12 * (v * v * v) + 15 * (v * v) - 6 * v + 1) * (w * w) - 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 6 * (v * v * v * v) + 30.0l * (v * v * v) - 29 * (v * v) + 10 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (36 * (v * v * v * v) - 30 * (v * v * v) + 13 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (28 * (v * v * v * v) - 39 * (v * v * v) + 22 * (v * v) - 5 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (32 * (v * v * v * v * v * v) - 46 * (v * v * v * v * v) + (v * v * v * v) + 37 * (v * v * v) - 20 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (24 * (v * v * v * v * v * v) - 20 * (v * v * v * v * v) - 66 * (v * v * v * v) + 130 * (v * v * v) - 79 * (v * v) + 20 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 292 * (v * v * v * v * v) - 138 * (v * v * v * v) - 12 * (v * v * v) + 23 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 32 * (v * v * v * v * v) + 4 * (v * v * v * v) + 46 * (v * v * v) - 43 * (v * v) + 14 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (4 * (v * v) - 14 * v + 1) * (w * w * w * w) - 4 * (v * v * v) * (3 * (v * v) - 11 * v + 4) * (w * w * w) + v * (16 * (v * v * v * v) - 50 * (v * v * v) + 24 * (v * v) + 2 * v - 1) * (w * w) - 2 * (v - 1) * v * (4 * (v * v * v) - 4 * (v * v) - 5 * v + 2) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - 2 * v + 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w) - v * (6 * (v * v) - 6 * v + 1) * (w * w) + 2 * v * (4 * (v * v) - 6 * v + 3) * w - 2 * (v - 1) * (2 * (v * v) - 2 * v + 1))) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * std::log(1 - v) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * v1 * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * w + 1) + 2 * v * v1 * (w - 1) * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 3 * v + 2) * (w * w) - (v * v) * w + 2 * (v * v) - 2 * v + 1) - 2 * (v - 1) * v2 * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 1) * (w * w * w) + (v * v * v) * (2 * v + 3) * (w * w) - v * (8 * (v * v) - 9 * v + 5) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(v) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * v - 1) * (8 * v - 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (34 * (v * v * v) - 43 * (v * v) + 14 * v + 1) * (w * w * w * w * w) + (v * v * v * v) * (60 * (v * v * v * v) - 80 * (v * v * v) - 2 * (v * v) + 46 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (8 * v - 5) * (2 * (v * v * v * v) - 6 * (v * v) + 6 * v - 1) * (w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 64 * (v * v * v * v) + 88 * (v * v * v) - 42 * (v * v) + 3) * (w * w) - 2 * (v - 1) * v * (8 * (v * v * v * v * v) - 16 * (v * v * v * v) + 2 * (v * v * v) + 22 * (v * v) - 19 * v + 5) * w + 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 24 * (v * v) - v + 2) * (w * w * w * w * w) - 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) - 9 * (v * v * v * v) + 59 * (v * v * v) - 26 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 98 * (v * v * v * v) + 180 * (v * v * v) - 101 * (v * v) + 22 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 260 * (v * v * v * v * v * v) + 380 * (v * v * v * v * v) - 178 * (v * v * v * v) - 16 * (v * v * v) + 27 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v) + 2 * (v * v * v * v) + 62 * (v * v * v) - 57 * (v * v) + 18 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 5 * v + 4) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - (v * v * v) * (10 * (v * v) - 18 * v + 1) * (w * w * w * w) + 4 * (v * v * v) * (5 * (v * v) - 14 * v + 5) * (w * w * w) - v * (20 * (v * v * v * v) - 60 * (v * v * v) + 30.0l * (v * v) - 1) * (w * w) + 2 * v * (4 * (v * v * v * v) - 8 * (v * v * v) - 4 * (v * v) + 10 * v - 3) * w - 2 * (v - 1) * (2 * v - 3) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 4 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 4 * v + 3) * (w * w) + v * (2 * (v * v) - 4 * v + 1) * w + 2 * (v * v) - 2 * v + 1) - 3 * (v - 1) * v * v2 * w * (v * w - 2 * v + 1)) * std::log(1 - v * w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 8 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) - 2 * (v - 1) * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) - v * (2 * v - 1) * w + ((v - 1) * (v - 1))) + ((v - 1) * (v - 1)) * (v * v) * v1 * w * ((2 * v - 1) * w - 2 * (v - 1))) * std::log(v * w - v + 1) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * v1 * (2 * (v - 1) * (v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (4 * v - 3) * (w * w * w) + (v * v) * (12 * (v * v * v) - 16 * (v * v) + 4 * v + 3) * (w * w) - 2 * v * (v + 1) * (4 * (v * v * v) - 8 * (v * v) + 6 * v - 1) * w + 2 * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) + 4 * (v - 1) * v2 * (v * w - 2 * v + 1) * ((v * v * v) * (w * w * w) - 2 * (v - 1) * (v * v) * (w * w) + v * (2 * (v * v) - 1) * w - 2 * (v * v) + 2 * v - 1) - 2 * CQ * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * (v * w - 1) * ((w * w) - 2 * w + 2) - CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 * (v * w - 1) * ((w * w) - 2 * w + 2)) * std::log(w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + (3 * AL * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v) - 4 * (v * v) + 4 * v - 1) * (w * w * w * w) + 2 * v * (2 * (v * v) - v + 1) * (2 * (v * v * v) - 2 * (v * v) - 2 * v + 1) * (w * w * w) - (8 * (v * v * v * v * v * v) - 16 * (v * v * v * v) + 16 * (v * v * v) - 10 * (v * v) + 1) * (w * w) + 2 * (v - 1) * (8 * (v * v * v * v) - 4 * (v * v * v) + 2 * (v * v) + 2 * v - 1) * w - 4 * (v - 1) * v * (2 * (v * v) - 2 * v + 1)) - 6 * (v - 1) * v * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (2 * v - 1) * (4 * v + 1) * (w * w * w * w * w) + (v * v) * (18 * (v * v * v) - 10 * (v * v) - 1) * (w * w * w * w) - v * (20 * (v * v * v * v) - 4 * (v * v * v) - 10 * (v * v) + 1) * (w * w * w) + (8 * (v * v * v * v * v) + 20 * (v * v * v * v) - 40 * (v * v * v) + 18 * (v * v) - 2 * v + 1) * (w * w) - 2 * (8 * (v * v * v * v) - 10 * (v * v * v) - 2 * (v * v) + 8 * v - 3) * w + 2 * (v - 1) * (4 * (v * v) - 6 * v + 3)) - 3 * v1 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (8 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) - (v * v) * (32 * (v * v * v * v) - 59 * (v * v * v) + 28 * (v * v) - 5 * v + 2) * (w * w * w * w) + (v - 1) * v * (64 * (v * v * v * v) - 101 * (v * v * v) + 48 * (v * v) - 13 * v + 4) * (w * w * w) - (v - 1) * (80 * (v * v * v * v * v) - 180 * (v * v * v * v) + 156 * (v * v * v) - 59 * (v * v) + 13 * v - 2) * (w * w) + ((v - 1) * (v - 1)) * (56 * (v * v * v * v) - 106 * (v * v * v) + 84 * (v * v) - 21 * v + 3) * w - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 3 * v + 2)) - 6 * AL * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * ((w * w) - 2 * w + 2) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) - 8 * CQ * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) - 4 * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) / 3.0l + -std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 12 * (v * v) - 4 * v + 1) * (w * w * w * w) - 2 * v * (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w) + (8 * (v * v * v * v * v * v) - 8 * (v * v * v * v) + 16 * (v * v * v) - 2 * (v * v) + 1) * (w * w) - 2 * (4 * (v * v) - 2 * v + 1) * (2 * (v * v * v) - 2 * (v * v) + v + 1) * w + 4 * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * ((w * w) - 2 * w + 2) * ((v * v) * (w * w) - 2 * v * w + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -std::log(S / q2_fragm) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * (v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) - 2 * (v - 1) * v2 * (v * w - v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 8:
        return std::log(1 - w) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 30.0l * (v * v) - 7 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) + 15 * (v * v * v * v) + 25 * (v * v * v) - 16 * (v * v) + 5 * v - 1) * (w * w * w * w) - 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 60 * (v * v * v * v) + 114 * (v * v * v) - 71 * (v * v) + 20 * v - 3) * (w * w * w) + (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 280 * (v * v * v * v * v) - 150 * (v * v * v * v) + 12 * (v * v * v) + 15 * (v * v) - 6 * v + 1) * (w * w) - 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 6 * (v * v * v * v) + 30.0l * (v * v * v) - 29 * (v * v) + 10 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (36 * (v * v * v * v) - 40 * (v * v * v) + 23 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (28 * (v * v * v * v) - 59 * (v * v * v) + 49 * (v * v) - 12 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (32 * (v * v * v * v * v * v) - 79 * (v * v * v * v * v) + 54 * (v * v * v * v) + 17 * (v * v * v) - 20 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (24 * (v * v * v * v * v * v) - 46 * (v * v * v * v * v) - 23 * (v * v * v * v) + 121 * (v * v * v) - 91 * (v * v) + 24 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 16 * (v * v * v * v * v * v * v) - 196 * (v * v * v * v * v * v) + 354 * (v * v * v * v * v) - 232 * (v * v * v * v) + 38 * (v * v * v) + 13 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 40 * (v * v * v * v * v) + 26 * (v * v * v * v) + 23 * (v * v * v) - 31 * (v * v) + 11 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (4 * (v * v) + v + 1) * (w * w * w * w) - (v * v * v) * (12 * (v * v) + v - 5) * (w * w * w) + v * (16 * (v * v * v * v) + 4 * (v * v * v) - 30.0l * (v * v) + 17 * v - 1) * (w * w) - (v - 1) * v * (8 * (v * v * v) + 16 * (v * v) - 28 * v + 13) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - 2 * v + 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w) - v * (6 * (v * v) - 6 * v + 1) * (w * w) + 2 * v * (4 * (v * v) - 6 * v + 3) * w - 2 * (v - 1) * (2 * (v * v) - 2 * v + 1))) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * std::log(1 - v) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * v1 * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * w + 1) + v * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w * w) - 2 * (v * v) * (3 * v - 2) * (w * w * w) + v * (8 * (v * v) - 11 * v + 5) * (w * w) - (2 * v - 1) * (2 * (v * v) - 3 * v + 3) * w + 2 * (2 * (v * v) - 2 * v + 1)) - (v - 1) * v2 * (v * w - 1) * ((v * v) * (w * w) + 2 * v * w + 1) * (2 * (v * v) * (w * w) - v * (4 * v - 1) * w + 2 * (2 * (v * v) - 2 * v + 1))) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(v) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * v - 1) * (8 * v - 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (34 * (v * v * v) - 43 * (v * v) + 14 * v + 1) * (w * w * w * w * w) + (v * v * v * v) * (60 * (v * v * v * v) - 80 * (v * v * v) - 2 * (v * v) + 46 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (8 * v - 5) * (2 * (v * v * v * v) - 6 * (v * v) + 6 * v - 1) * (w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 64 * (v * v * v * v) + 88 * (v * v * v) - 42 * (v * v) + 3) * (w * w) - 2 * (v - 1) * v * (8 * (v * v * v * v * v) - 16 * (v * v * v * v) + 2 * (v * v * v) + 22 * (v * v) - 19 * v + 5) * w + 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (52 * (v * v * v * v) - 62 * (v * v * v) + 29 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (42 * (v * v * v * v) - 83 * (v * v * v) + 58 * (v * v) - 11 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (44 * (v * v * v * v * v * v) - 102 * (v * v * v * v * v) + 57 * (v * v * v * v) + 29 * (v * v * v) - 24 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (28 * (v * v * v * v * v * v) - 50 * (v * v * v * v * v) - 48 * (v * v * v * v) + 166 * (v * v * v) - 115 * (v * v) + 28 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v) - 252 * (v * v * v * v * v * v) + 452 * (v * v * v * v * v) - 298 * (v * v * v * v) + 56 * (v * v * v) + 11 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 44 * (v * v * v * v * v) + 26 * (v * v * v * v) + 34 * (v * v * v) - 41 * (v * v) + 14 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 5 * v + 4) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - (v * v * v) * (10 * (v * v) + 1) * (w * w * w * w) + 2 * (v * v * v) * (10 * (v * v) - v - 5) * (w * w * w) - v * (20 * (v * v * v * v) - 42 * (v * v) + 24 * v - 1) * (w * w) + 2 * v * (4 * (v * v * v * v) + 4 * (v * v * v) - 28 * (v * v) + 28 * v - 9) * w - 2 * (v - 1) * (2 * v - 3) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 4 * v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 5 * v + 4) * (w * w) + v * (4 * (v * v) - 7 * v + 2) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * std::log(1 - v * w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 8 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * v * v1 * w * ((v * v * v) * (w * w * w) - (v * v) * (4 * v - 3) * (w * w) + (v - 1) * v * (3 * v - 2) * w + ((v - 1) * (v - 1))) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) + (v - 1) * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) - v * (5 * v - 4) * w + (v - 1) * (4 * v - 1))) * std::log(v * w - v + 1) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * v1 * (v * w - 1) * (2 * (v - 1) * (v * v * v) * (w * w * w) - (v * v) * (8 * (v * v) - 14 * v + 7) * (w * w) + 2 * v * (6 * (v * v * v) - 14 * (v * v) + 12 * v - 3) * w - 2 * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) + 4 * (v - 1) * v2 * (v * w - 2 * v + 1) * ((v * v * v) * (w * w * w) - (v * v) * (2 * v + 1) * (w * w) + v * (2 * (v * v) - 1) * w - 2 * (v * v) + 2 * v - 1) - 2 * CQ * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * (v * w - 1) * ((w * w) - 2 * w + 2) - CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 * (v * w - 1) * ((w * w) - 2 * w + 2)) * std::log(w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + (-3 * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * (8 * (v - 1) * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v) * (32 * (v * v * v * v) - 43 * (v * v * v) + 10 * (v * v) - 3 * v + 2) * (w * w * w * w * w * w) + (v * v * v * v) * (64 * (v * v * v * v) - 101 * (v * v * v) + 37 * (v * v) - 11 * v + 7) * (w * w * w * w * w) - 2 * (v * v) * (40 * (v * v * v * v * v * v) - 66 * (v * v * v * v * v) + 25 * (v * v * v * v) - 3 * (v * v * v) + 5 * v - 2) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (28 * (v * v * v * v * v) - (v * v * v * v) - 43 * (v * v * v) + 33 * (v * v) - 14 * v + 5) * (w * w * w) - (v - 1) * (16 * (v * v * v * v * v * v * v) + 56 * (v * v * v * v * v * v) - 156 * (v * v * v * v * v) + 124 * (v * v * v * v) - 26 * (v * v * v) - 9 * (v * v) + 5 * v - 2) * (w * w) + ((v - 1) * (v - 1)) * (32 * (v * v * v * v * v) - 24 * (v * v * v * v) - 26 * (v * v * v) + 52 * (v * v) - 21 * v + 3) * w - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 3 * v + 2)) + 3 * AL * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v) - 4 * (v * v) + 4 * v - 1) * (w * w * w * w) + 2 * v * (2 * (v * v) - v + 1) * (2 * (v * v * v) - 2 * (v * v) - 2 * v + 1) * (w * w * w) - (8 * (v * v * v * v * v * v) - 16 * (v * v * v * v) + 16 * (v * v * v) - 10 * (v * v) + 1) * (w * w) + 2 * (v - 1) * (8 * (v * v * v * v) - 4 * (v * v * v) + 2 * (v * v) + 2 * v - 1) * w - 4 * (v - 1) * v * (2 * (v * v) - 2 * v + 1)) - 12 * (v - 1) * v * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v) * (4 * (v * v) - v + 1) * (w * w * w * w * w) + (v * v) * (9 * (v * v * v) - 5 * (v * v) + 1) * (w * w * w * w) - v * (10 * (v * v * v * v) - 2 * (v * v * v) - 14 * (v * v) + 12 * v - 1) * (w * w * w) + (4 * (v * v * v * v * v) + 10 * (v * v * v * v) - 26 * (v * v * v) + 18 * (v * v) - v - 1) * (w * w) - (8 * (v * v * v * v) - 10 * (v * v * v) - 2 * (v * v) + 8 * v - 3) * w + (v - 1) * (4 * (v * v) - 6 * v + 3)) - 6 * AL * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * ((w * w) - 2 * w + 2) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) - 8 * CQ * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) - 4 * CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) / 3.0l + -std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 12 * (v * v) - 4 * v + 1) * (w * w * w * w) - 2 * v * (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w) + (8 * (v * v * v * v * v * v) - 8 * (v * v * v * v) + 16 * (v * v * v) - 2 * (v * v) + 1) * (w * w) - 2 * (4 * (v * v) - 2 * v + 1) * (2 * (v * v * v) - 2 * (v * v) + v + 1) * w + 4 * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * ((w * w) - 2 * w + 2) * ((v * v) * (w * w) - 2 * v * w + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -std::log(S / q2_fragm) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * (v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) - 2 * (v - 1) * v2 * (v * w - v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
        ;
    case 9:
        return std::log(1 - w) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 30.0l * (v * v) - 7 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) + 15 * (v * v * v * v) + 25 * (v * v * v) - 16 * (v * v) + 5 * v - 1) * (w * w * w * w) - 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 60 * (v * v * v * v) + 114 * (v * v * v) - 71 * (v * v) + 20 * v - 3) * (w * w * w) + (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 280 * (v * v * v * v * v) - 150 * (v * v * v * v) + 12 * (v * v * v) + 15 * (v * v) - 6 * v + 1) * (w * w) - 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 6 * (v * v * v * v) + 30.0l * (v * v * v) - 29 * (v * v) + 10 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (36 * (v * v * v * v) - 40 * (v * v * v) + 23 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (28 * (v * v * v * v) - 59 * (v * v * v) + 49 * (v * v) - 12 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (32 * (v * v * v * v * v * v) - 79 * (v * v * v * v * v) + 54 * (v * v * v * v) + 17 * (v * v * v) - 20 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (24 * (v * v * v * v * v * v) - 46 * (v * v * v * v * v) - 23 * (v * v * v * v) + 121 * (v * v * v) - 91 * (v * v) + 24 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 16 * (v * v * v * v * v * v * v) - 196 * (v * v * v * v * v * v) + 354 * (v * v * v * v * v) - 232 * (v * v * v * v) + 38 * (v * v * v) + 13 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 40 * (v * v * v * v * v) + 26 * (v * v * v * v) + 23 * (v * v * v) - 31 * (v * v) + 11 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v * v) * (4 * (v * v) + v + 1) * (w * w * w * w) - (v * v * v) * (12 * (v * v) + v - 5) * (w * w * w) + v * (16 * (v * v * v * v) + 4 * (v * v * v) - 30.0l * (v * v) + 17 * v - 1) * (w * w) - (v - 1) * v * (8 * (v * v * v) + 16 * (v * v) - 28 * v + 13) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - 2 * v + 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w) - v * (6 * (v * v) - 6 * v + 1) * (w * w) + 2 * v * (4 * (v * v) - 6 * v + 3) * w - 2 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + 4 * CQ * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 4 * (v - 1) * v4 * w * (v * w - 2 * v + 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 4 * (v - 1) * v * v3 * w * (v * w - 1) * (v * w - v + 1) * (v * (w * w) - (v - 1) * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -2 * std::log(1 - v) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * w + 1) + v * v1 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * (w * w * w * w) - 2 * (v * v) * (3 * v - 2) * (w * w * w) + v * (8 * (v * v) - 11 * v + 5) * (w * w) - (2 * v - 1) * (2 * (v * v) - 3 * v + 3) * w + 2 * (2 * (v * v) - 2 * v + 1)) - (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) + 2 * v * w + 1) * (2 * (v * v) * (w * w) - v * (4 * v - 1) * w + 2 * (2 * (v * v) - 2 * v + 1)) + 2 * CQ * v * v4 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + 2 * v * v4 * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 2 * (v - 1) * v3 * w * (v * w - 1) * (v * (v + 1) * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * ((v * v) * (w * w) - 2 * v * w + 1) * (CQ * v1 * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * v - 1) * (8 * v - 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (34 * (v * v * v) - 43 * (v * v) + 14 * v + 1) * (w * w * w * w * w) + (v * v * v * v) * (60 * (v * v * v * v) - 80 * (v * v * v) - 2 * (v * v) + 46 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (8 * v - 5) * (2 * (v * v * v * v) - 6 * (v * v) + 6 * v - 1) * (w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 64 * (v * v * v * v) + 88 * (v * v * v) - 42 * (v * v) + 3) * (w * w) - 2 * (v - 1) * v * (8 * (v * v * v * v * v) - 16 * (v * v * v * v) + 2 * (v * v * v) + 22 * (v * v) - 19 * v + 5) * w + 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) + v1 * (-4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (52 * (v * v * v * v) - 62 * (v * v * v) + 29 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (42 * (v * v * v * v) - 83 * (v * v * v) + 58 * (v * v) - 11 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (44 * (v * v * v * v * v * v) - 102 * (v * v * v * v * v) + 57 * (v * v * v * v) + 29 * (v * v * v) - 24 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (28 * (v * v * v * v * v * v) - 50 * (v * v * v * v * v) - 48 * (v * v * v * v) + 166 * (v * v * v) - 115 * (v * v) + 28 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v) - 252 * (v * v * v * v * v * v) + 452 * (v * v * v * v * v) - 298 * (v * v * v * v) + 56 * (v * v * v) + 11 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 44 * (v * v * v * v * v) + 26 * (v * v * v * v) + 34 * (v * v * v) - 41 * (v * v) + 14 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 5 * v + 4) * (2 * (v * v) - 2 * v + 1)) + 2 * (v - 1) * v2 * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - (v * v * v) * (10 * (v * v) + 1) * (w * w * w * w) + 2 * (v * v * v) * (10 * (v * v) - v - 5) * (w * w * w) - v * (20 * (v * v * v * v) - 42 * (v * v) + 24 * v - 1) * (w * w) + 2 * v * (4 * (v * v * v * v) + 4 * (v * v * v) - 28 * (v * v) + 28 * v - 9) * w - 2 * (v - 1) * (2 * v - 3) * (2 * (v * v) - 2 * v + 1)) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) + 4 * CQ * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 4 * v * v4 * w * (v * w - 2 * (v - 1)) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 4 * (v - 1) * v * v3 * w * (v * w - 1) * (v * w + 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + 4 * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 5 * v + 4) * (w * w) + v * (4 * (v * v) - 7 * v + 2) * w + 2 * (v * v) - 2 * v + 1) + 2 * v * v4 * w * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) * std::log(1 - v * w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 8 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * v * v1 * w * ((v * v * v) * (w * w * w) - (v * v) * (4 * v - 3) * (w * w) + (v - 1) * v * (3 * v - 2) * w + ((v - 1) * (v - 1))) - 2 * CQ * (v - 1) * v2 * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) + (v - 1) * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) - v * (5 * v - 4) * w + (v - 1) * (4 * v - 1))) * std::log(v * w - v + 1) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (-2 * v1 * (v * w - 1) * (v * w - v + 1) * (2 * (v - 1) * (v * v * v) * (w * w * w) - (v * v) * (8 * (v * v) - 14 * v + 7) * (w * w) + 2 * v * (6 * (v * v * v) - 14 * (v * v) + 12 * v - 3) * w - 2 * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) - 4 * (v - 1) * v2 * (v * w - 2 * v + 1) * (v * w - v + 1) * ((v * v * v) * (w * w * w) - (v * v) * (2 * v + 1) * (w * w) + v * (2 * (v * v) - 1) * w - 2 * (v * v) + 2 * v - 1) + 4 * v4 * w * (v * w - 1) * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 4 * (v - 1) * v * v3 * (w * w) * (v * w - 2 * v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + 2 * CQ * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * (v * w - 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2) + CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * v1 * (v * w - 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * std::log(w) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (AL * v1 * (6 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) - 30.0l * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) + (54 * (v * v * v * v * v * v * v * v * v * v * v) + 30.0l * (v * v * v * v * v * v * v * v * v * v) - 30.0l * (v * v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v * v) - 3 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (-18 * (v * v * v * v * v * v * v * v * v * v * v) - 144 * (v * v * v * v * v * v * v * v * v * v) + 120 * (v * v * v * v * v * v * v * v * v) - 36 * (v * v * v * v * v * v * v * v) + 3 * (v * v * v * v * v * v * v) + 3 * (v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (-84 * (v * v * v * v * v * v * v * v * v * v * v) + 258 * (v * v * v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v * v * v) - 108 * (v * v * v * v * v * v * v * v) + 129 * (v * v * v * v * v * v * v) - 60 * (v * v * v * v * v * v) + 9 * (v * v * v * v * v)) * (w * w * w * w * w * w * w) + (144 * (v * v * v * v * v * v * v * v * v * v * v) - 132 * (v * v * v * v * v * v * v * v * v * v) - 306 * (v * v * v * v * v * v * v * v * v) + 540 * (v * v * v * v * v * v * v * v) - 375 * (v * v * v * v * v * v * v) + 111 * (v * v * v * v * v * v) + 9 * (v * v * v * v * v) - 9 * (v * v * v * v)) * (w * w * w * w * w * w) + (-96 * (v * v * v * v * v * v * v * v * v * v * v) - 180 * (v * v * v * v * v * v * v * v * v * v) + 744 * (v * v * v * v * v * v * v * v * v) - 678 * (v * v * v * v * v * v * v * v) + 126 * (v * v * v * v * v * v * v) + 270 * (v * v * v * v * v * v) - 264 * (v * v * v * v * v) + 90 * (v * v * v * v) - 9 * (v * v * v)) * (w * w * w * w * w) + (24 * (v * v * v * v * v * v * v * v * v * v * v) + 264 * (v * v * v * v * v * v * v * v * v * v) - 480 * (v * v * v * v * v * v * v * v * v) - 120 * (v * v * v * v * v * v * v * v) + 834 * (v * v * v * v * v * v * v) - 900 * (v * v * v * v * v * v) + 474 * (v * v * v * v * v) - 78 * (v * v * v * v) - 27 * (v * v * v) + 9 * (v * v)) * (w * w * w * w) + (-96 * (v * v * v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v * v * v) + 816 * (v * v * v * v * v * v * v * v) - 1140 * (v * v * v * v * v * v * v) + 642 * (v * v * v * v * v * v) + 24 * (v * v * v * v * v) - 300 * (v * v * v * v) + 195 * (v * v * v) - 48 * (v * v) + 3 * v) * (w * w * w) + (144 * (v * v * v * v * v * v * v * v * v) - 336 * (v * v * v * v * v * v * v * v) + 60 * (v * v * v * v * v * v * v) + 540 * (v * v * v * v * v * v) - 774 * (v * v * v * v * v) + 528 * (v * v * v * v) - 177 * (v * v * v) + 3 * (v * v) + 15 * v - 3) * (w * w) + (-96 * (v * v * v * v * v * v * v * v) + 384 * (v * v * v * v * v * v * v) - 612 * (v * v * v * v * v * v) + 480 * (v * v * v * v * v) - 150 * (v * v * v * v) - 60 * (v * v * v) + 84 * (v * v) - 36 * v + 6) * w + 24 * (v * v * v * v * v * v * v) - 120 * (v * v * v * v * v * v) + 252 * (v * v * v * v * v) - 288 * (v * v * v * v) + 192 * (v * v * v) - 72 * (v * v) + 12 * v) + v2 * ((12 * (v * v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w * w) + (72 * (v * v * v * v * v * v * v * v * v * v * v) - 84 * (v * v * v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (-216 * (v * v * v * v * v * v * v * v * v * v * v) + 276 * (v * v * v * v * v * v * v * v * v * v) - 60 * (v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (384 * (v * v * v * v * v * v * v * v * v * v * v) - 420 * (v * v * v * v * v * v * v * v * v * v) - 264 * (v * v * v * v * v * v * v * v * v) + 516 * (v * v * v * v * v * v * v * v) - 252 * (v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (-396 * (v * v * v * v * v * v * v * v * v * v * v) + 72 * (v * v * v * v * v * v * v * v * v * v) + 1416 * (v * v * v * v * v * v * v * v * v) - 1752 * (v * v * v * v * v * v * v * v) + 684 * (v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v)) * (w * w * w * w * w * w) + (216 * (v * v * v * v * v * v * v * v * v * v * v) + 552 * (v * v * v * v * v * v * v * v * v * v) - 2256 * (v * v * v * v * v * v * v * v * v) + 1764 * (v * v * v * v * v * v * v * v) + 516 * (v * v * v * v * v * v * v) - 1224 * (v * v * v * v * v * v) + 468 * (v * v * v * v * v) - 36 * (v * v * v * v)) * (w * w * w * w * w) + (-48 * (v * v * v * v * v * v * v * v * v * v * v) - 600 * (v * v * v * v * v * v * v * v * v * v) + 1188 * (v * v * v * v * v * v * v * v * v) + 840 * (v * v * v * v * v * v * v * v) - 3576 * (v * v * v * v * v * v * v) + 3132 * (v * v * v * v * v * v) - 936 * (v * v * v * v * v) - 36 * (v * v * v * v) + 36 * (v * v * v)) * (w * w * w * w) + (192 * (v * v * v * v * v * v * v * v * v * v) + 240 * (v * v * v * v * v * v * v * v * v) - 2256 * (v * v * v * v * v * v * v * v) + 3384 * (v * v * v * v * v * v * v) - 1428 * (v * v * v * v * v * v) - 864 * (v * v * v * v * v) + 996 * (v * v * v * v) - 276 * (v * v * v) + 12 * (v * v)) * (w * w * w) + (-288 * (v * v * v * v * v * v * v * v * v) + 720 * (v * v * v * v * v * v * v * v) + 108 * (v * v * v * v * v * v * v) - 2160 * (v * v * v * v * v * v) + 2928 * (v * v * v * v * v) - 1680 * (v * v * v * v) + 360 * (v * v * v) + 24 * (v * v) - 12 * v) * (w * w) + (192 * (v * v * v * v * v * v * v * v) - 840 * (v * v * v * v * v * v * v) + 1416 * (v * v * v * v * v * v) - 1032 * (v * v * v * v * v) + 84 * (v * v * v * v) + 348 * (v * v * v) - 204 * (v * v) + 36 * v) * w - 48 * (v * v * v * v * v * v * v) + 264 * (v * v * v * v * v * v) - 612 * (v * v * v * v * v) + 768 * (v * v * v * v) - 552 * (v * v * v) + 216 * (v * v) - 36 * v) + v1 * ((24 * (v * v * v * v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w * w) + (120 * (v * v * v * v * v * v * v * v * v * v * v) - 129 * (v * v * v * v * v * v * v * v * v * v) + 6 * (v * v * v * v * v * v * v * v * v) - 9 * (v * v * v * v * v * v * v * v) + 6 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (-288 * (v * v * v * v * v * v * v * v * v * v * v) + 288 * (v * v * v * v * v * v * v * v * v * v) + 60 * (v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v) - 18 * (v * v * v * v * v * v * v) - 6 * (v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (432 * (v * v * v * v * v * v * v * v * v * v * v) - 315 * (v * v * v * v * v * v * v * v * v * v) - 372 * (v * v * v * v * v * v * v * v * v) + 201 * (v * v * v * v * v * v * v * v) - 36 * (v * v * v * v * v * v * v) + 72 * (v * v * v * v * v * v) - 18 * (v * v * v * v * v)) * (w * w * w * w * w * w * w) + (-408 * (v * v * v * v * v * v * v * v * v * v * v) - 54 * (v * v * v * v * v * v * v * v * v * v) + 1200 * (v * v * v * v * v * v * v * v * v) - 888 * (v * v * v * v * v * v * v * v) + 318 * (v * v * v * v * v * v * v) - 180 * (v * v * v * v * v * v) + 18 * (v * v * v * v * v) + 18 * (v * v * v * v)) * (w * w * w * w * w * w) + (216 * (v * v * v * v * v * v * v * v * v * v * v) + 594 * (v * v * v * v * v * v * v * v * v * v) - 1902 * (v * v * v * v * v * v * v * v * v) + 1245 * (v * v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v * v) - 243 * (v * v * v * v * v * v) + 240 * (v * v * v * v * v) - 126 * (v * v * v * v) + 18 * (v * v * v)) * (w * w * w * w * w) + (-48 * (v * v * v * v * v * v * v * v * v * v * v) - 600 * (v * v * v * v * v * v * v * v * v * v) + 1056 * (v * v * v * v * v * v * v * v * v) + 600 * (v * v * v * v * v * v * v * v) - 2340 * (v * v * v * v * v * v * v) + 2040 * (v * v * v * v * v * v) - 912 * (v * v * v * v * v) + 204 * (v * v * v * v) + 18 * (v * v * v) - 18 * (v * v)) * (w * w * w * w) + (192 * (v * v * v * v * v * v * v * v * v * v) + 240 * (v * v * v * v * v * v * v * v * v) - 2052 * (v * v * v * v * v * v * v * v) + 3048 * (v * v * v * v * v * v * v) - 1653 * (v * v * v * v * v * v) - 132 * (v * v * v * v * v) + 591 * (v * v * v * v) - 300 * (v * v * v) + 72 * (v * v) - 6 * v) * (w * w * w) + (-288 * (v * v * v * v * v * v * v * v * v) + 720 * (v * v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v * v) - 1794 * (v * v * v * v * v * v) + 2628 * (v * v * v * v * v) - 1704 * (v * v * v * v) + 510 * (v * v * v) - 36 * (v * v) - 18 * v + 6) * (w * w) + (192 * (v * v * v * v * v * v * v * v) - 840 * (v * v * v * v * v * v * v) + 1458 * (v * v * v * v * v * v) - 1146 * (v * v * v * v * v) + 147 * (v * v * v * v) + 432 * (v * v * v) - 324 * (v * v) + 90 * v - 9) * w - 48 * (v * v * v * v * v * v * v) + 264 * (v * v * v * v * v * v) - 624 * (v * v * v * v * v) + 816 * (v * v * v * v) - 624 * (v * v * v) + 264 * (v * v) - 48 * v) + AL * v4 * (12 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) + (-60 * (v * v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (132 * (v * v * v * v * v * v * v * v * v * v) + 72 * (v * v * v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (-156 * (v * v * v * v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v * v * v * v) + 96 * (v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (96 * (v * v * v * v * v * v * v * v * v * v) + 336 * (v * v * v * v * v * v * v * v * v) - 180 * (v * v * v * v * v * v * v * v) - 72 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w) + (-24 * (v * v * v * v * v * v * v * v * v * v) - 288 * (v * v * v * v * v * v * v * v * v) + 60 * (v * v * v * v * v * v * v * v) + 252 * (v * v * v * v * v * v * v) - 72 * (v * v * v * v * v * v)) * (w * w * w * w * w) + (96 * (v * v * v * v * v * v * v * v * v) + 192 * (v * v * v * v * v * v * v * v) - 480 * (v * v * v * v * v * v * v) + 252 * (v * v * v * v * v * v) - 72 * (v * v * v * v * v) + 24 * (v * v * v * v)) * (w * w * w * w) + (-144 * (v * v * v * v * v * v * v * v) + 192 * (v * v * v * v * v * v * v) + 60 * (v * v * v * v * v * v) - 180 * (v * v * v * v * v) + 96 * (v * v * v * v) - 24 * (v * v * v)) * (w * w * w) + (96 * (v * v * v * v * v * v * v) - 288 * (v * v * v * v * v * v) + 336 * (v * v * v * v * v) - 204 * (v * v * v * v) + 72 * (v * v * v) - 12 * (v * v)) * (w * w) + (-24 * (v * v * v * v * v * v) + 96 * (v * v * v * v * v) - 156 * (v * v * v * v) + 132 * (v * v * v) - 60 * (v * v) + 12 * v) * w) + v4 * (-12 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) + (36 * (v * v * v * v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (-36 * (v * v * v * v * v * v * v * v * v * v) - 144 * (v * v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (12 * (v * v * v * v * v * v * v * v * v * v) + 180 * (v * v * v * v * v * v * v * v * v) + 144 * (v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (-72 * (v * v * v * v * v * v * v * v * v) - 324 * (v * v * v * v * v * v * v * v) + 144 * (v * v * v * v * v * v * v) + 72 * (v * v * v * v * v * v)) * (w * w * w * w * w * w) + (180 * (v * v * v * v * v * v * v * v) + 180 * (v * v * v * v * v * v * v) - 360 * (v * v * v * v * v * v) + 72 * (v * v * v * v * v)) * (w * w * w * w * w) + (-240 * (v * v * v * v * v * v * v) + 180 * (v * v * v * v * v * v) + 144 * (v * v * v * v * v) - 96 * (v * v * v * v)) * (w * w * w * w) + (180 * (v * v * v * v * v * v) - 324 * (v * v * v * v * v) + 144 * (v * v * v * v)) * (w * w * w) + (-72 * (v * v * v * v * v) + 180 * (v * v * v * v) - 144 * (v * v * v) + 36 * (v * v)) * (w * w) + (12 * (v * v * v * v) - 36 * (v * v * v) + 36 * (v * v) - 12 * v) * w) + AL * v2 * ((-12 * (v * v * v * v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v * v * v * v) - 18 * (v * v * v * v * v * v * v * v * v) + 6 * (v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w * w) + (60 * (v * v * v * v * v * v * v * v * v * v * v) - 108 * (v * v * v * v * v * v * v * v * v * v) + 66 * (v * v * v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v * v * v) - 6 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (-132 * (v * v * v * v * v * v * v * v * v * v * v) + 168 * (v * v * v * v * v * v * v * v * v * v) + 30.0l * (v * v * v * v * v * v * v * v * v) - 150 * (v * v * v * v * v * v * v * v) + 102 * (v * v * v * v * v * v * v) - 18 * (v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (156 * (v * v * v * v * v * v * v * v * v * v * v) - 36 * (v * v * v * v * v * v * v * v * v * v) - 426 * (v * v * v * v * v * v * v * v * v) + 516 * (v * v * v * v * v * v * v * v) - 228 * (v * v * v * v * v * v * v) + 18 * (v * v * v * v * v)) * (w * w * w * w * w * w) + (-96 * (v * v * v * v * v * v * v * v * v * v * v) - 216 * (v * v * v * v * v * v * v * v * v * v) + 744 * (v * v * v * v * v * v * v * v * v) - 492 * (v * v * v * v * v * v * v * v) - 156 * (v * v * v * v * v * v * v) + 360 * (v * v * v * v * v * v) - 162 * (v * v * v * v * v) + 18 * (v * v * v * v)) * (w * w * w * w * w) + (24 * (v * v * v * v * v * v * v * v * v * v * v) + 264 * (v * v * v * v * v * v * v * v * v * v) - 444 * (v * v * v * v * v * v * v * v * v) - 264 * (v * v * v * v * v * v * v * v) + 960 * (v * v * v * v * v * v * v) - 756 * (v * v * v * v * v * v) + 198 * (v * v * v * v * v) + 36 * (v * v * v * v) - 18 * (v * v * v)) * (w * w * w * w) + (-96 * (v * v * v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v * v * v) + 816 * (v * v * v * v * v * v * v * v) - 1044 * (v * v * v * v * v * v * v) + 360 * (v * v * v * v * v * v) + 270 * (v * v * v * v * v) - 294 * (v * v * v * v) + 90 * (v * v * v) - 6 * (v * v)) * (w * w * w) + (144 * (v * v * v * v * v * v * v * v * v) - 336 * (v * v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v * v) + 588 * (v * v * v * v * v * v) - 738 * (v * v * v * v * v) + 372 * (v * v * v * v) - 48 * (v * v * v) - 24 * (v * v) + 6 * v) * (w * w) + (-96 * (v * v * v * v * v * v * v * v) + 384 * (v * v * v * v * v * v * v) - 600 * (v * v * v * v * v * v) + 432 * (v * v * v * v * v) - 84 * (v * v * v * v) - 84 * (v * v * v) + 60 * (v * v) - 12 * v) * w + 24 * (v * v * v * v * v * v * v) - 120 * (v * v * v * v * v * v) + 252 * (v * v * v * v * v) - 288 * (v * v * v * v) + 192 * (v * v * v) - 72 * (v * v) + 12 * v) + CQ * v2 * ((-16 * (v * v * v * v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (48 * (v * v * v * v * v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v * v * v) - 8 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (-48 * (v * v * v * v * v * v * v * v * v * v * v) + 168 * (v * v * v * v * v * v * v * v * v) - 216 * (v * v * v * v * v * v * v * v) + 120 * (v * v * v * v * v * v * v) - 24 * (v * v * v * v * v * v)) * (w * w * w * w * w * w) + (16 * (v * v * v * v * v * v * v * v * v * v * v) + 112 * (v * v * v * v * v * v * v * v * v * v) - 312 * (v * v * v * v * v * v * v * v * v) + 256 * (v * v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v) + 24 * (v * v * v * v * v)) * (w * w * w * w * w) + (-64 * (v * v * v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v * v * v) + 288 * (v * v * v * v * v * v * v * v) - 544 * (v * v * v * v * v * v * v) + 432 * (v * v * v * v * v * v) - 168 * (v * v * v * v * v) + 24 * (v * v * v * v)) * (w * w * w * w) + (96 * (v * v * v * v * v * v * v * v * v) - 288 * (v * v * v * v * v * v * v * v) + 288 * (v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v) - 120 * (v * v * v * v * v) + 96 * (v * v * v * v) - 24 * (v * v * v)) * (w * w * w) + (-64 * (v * v * v * v * v * v * v * v) + 272 * (v * v * v * v * v * v * v) - 480 * (v * v * v * v * v * v) + 456 * (v * v * v * v * v) - 248 * (v * v * v * v) + 72 * (v * v * v) - 8 * (v * v)) * (w * w) + (16 * (v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v) + 168 * (v * v * v * v * v) - 192 * (v * v * v * v) + 128 * (v * v * v) - 48 * (v * v) + 8 * v) * w) + CQ * v1 * ((-16 * (v * v * v * v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v * v * v * v) - 32 * (v * v * v * v * v * v * v * v * v) + 16 * (v * v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v * v)) * (w * w * w * w * w * w * w * w) + (48 * (v * v * v * v * v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v * v * v * v * v) + 64 * (v * v * v * v * v * v * v * v * v) - 16 * (v * v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v)) * (w * w * w * w * w * w * w) + (-48 * (v * v * v * v * v * v * v * v * v * v * v) + 144 * (v * v * v * v * v * v * v * v * v) - 240 * (v * v * v * v * v * v * v * v) + 180 * (v * v * v * v * v * v * v) - 72 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v)) * (w * w * w * w * w * w) + (16 * (v * v * v * v * v * v * v * v * v * v * v) + 112 * (v * v * v * v * v * v * v * v * v * v) - 304 * (v * v * v * v * v * v * v * v * v) + 320 * (v * v * v * v * v * v * v * v) - 140 * (v * v * v * v * v * v * v) - 12 * (v * v * v * v * v * v) + 36 * (v * v * v * v * v) - 12 * (v * v * v * v)) * (w * w * w * w * w) + (-64 * (v * v * v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v * v * v) + 256 * (v * v * v * v * v * v * v * v) - 560 * (v * v * v * v * v * v * v) + 560 * (v * v * v * v * v * v) - 312 * (v * v * v * v * v) + 96 * (v * v * v * v) - 12 * (v * v * v)) * (w * w * w * w) + (96 * (v * v * v * v * v * v * v * v * v) - 288 * (v * v * v * v * v * v * v * v) + 336 * (v * v * v * v * v * v * v) - 144 * (v * v * v * v * v * v) - 72 * (v * v * v * v * v) + 120 * (v * v * v * v) - 60 * (v * v * v) + 12 * (v * v)) * (w * w * w) + (-64 * (v * v * v * v * v * v * v * v) + 272 * (v * v * v * v * v * v * v) - 512 * (v * v * v * v * v * v) + 560 * (v * v * v * v * v) - 384 * (v * v * v * v) + 164 * (v * v * v) - 40 * (v * v) + 4 * v) * (w * w) + (16 * (v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v) + 176 * (v * v * v * v * v) - 224 * (v * v * v * v) + 180 * (v * v * v) - 92 * (v * v) + 28 * v - 4) * w)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 3.0l + -std::log(S / q2_fac) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 12 * (v * v) - 4 * v + 1) * (w * w * w * w) - 2 * v * (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w) + (8 * (v * v * v * v * v * v) - 8 * (v * v * v * v) + 16 * (v * v * v) - 2 * (v * v) + 1) * (w * w) - 2 * (4 * (v * v) - 2 * v + 1) * (2 * (v * v * v) - 2 * (v * v) + v + 1) * w + 4 * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1)) + 4 * v * v4 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * v2 * ((w * w) - 2 * w + 2) * ((v * v) * (w * w) - 2 * v * w + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + -std::log(S / q2_fragm) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * (v1 * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) - 2 * (v - 1) * v2 * (v * w - v + 1)) / ((v - 1) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 10:
        return std::log(1 - w) * (CQ * v1 * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v) * ((v * v) + 2 * v - 2) * (w * w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v * v * v) * (2 * (v * v) + 3 * v - 3) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (8 * (v * v * v * v) + (v * v * v) - 15 * (v * v) + 28 * v - 14) * (w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * (v * v * v * v) + (v * v * v) - 10 * (v * v) + 18 * v - 9) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) - 7 * (v * v * v * v) + 26 * (v * v * v) - 28 * (v * v) + 18 * v - 6) * (w * w * w * w) + (v * v * v * v) * (2 * (v * v * v * v * v * v) - 17 * (v * v * v * v) + 45 * (v * v * v) - 50 * (v * v) + 33 * v - 11) * (w * w * w) - (v - 1) * (v * v) * (6 * (v * v * v * v * v * v) - 18 * (v * v * v * v * v) + 17 * (v * v * v * v) + 5 * (v * v) - 6 * v + 2) * (w * w) + ((v - 1) * (v - 1)) * (v * v) * (6 * (v * v * v * v) - 20 * (v * v * v) + 25 * (v * v) - 10 * v + 5) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1)) + v1 * (-2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v * v) * ((v * v) + 2 * v - 2) * (w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (6 * (v * v) + 11 * v - 11) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (16 * (v * v * v * v) - 21 * (v * v * v) + 19 * (v * v) + 4 * v - 2) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (22 * (v * v * v * v) - 39 * (v * v * v) + 24 * (v * v) + 30.0l * v - 15) * (w * w * w * w * w) + 3 * (v * v * v * v) * (4 * (v * v * v * v * v * v) + (v * v * v * v * v) - 27 * (v * v * v * v) + 62 * (v * v * v) - 56 * (v * v) + 30.0l * v - 10) * (w * w * w * w) - (v * v * v * v) * (2 * (v * v * v * v * v * v) + 24 * (v * v * v * v * v) - 93 * (v * v * v * v) + 143 * (v * v * v) - 84 * (v * v) + 15 * v - 5) * (w * w * w) + (v - 1) * (v * v) * (6 * (v * v * v * v * v * v) + 6 * (v * v * v * v * v) - 65 * (v * v * v * v) + 128 * (v * v * v) - 89 * (v * v) + 30.0l * v - 10) * (w * w) - ((v - 1) * (v - 1)) * (v * v) * (6 * (v * v * v * v) - 12 * (v * v * v) + (v * v) + 22 * v - 11) * w + 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1)) + 2 * CQ * (v * v) * v2 * w * (2 * (v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (2 * (v * v * v * v) - (v * v * v) + 4 * (v * v) - 6 * v + 3) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 14 * v + 7) * (w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + (v * v * v * v * v) - 8 * (v * v * v * v) + 12 * (v * v * v) - (v * v) - 6 * v + 2) * (w * w * w) - (v - 1) * (v * v) * (6 * (v * v * v * v) - 11 * (v * v * v) - (v * v) + 24 * v - 12) * (w * w) + 2 * ((v - 1) * (v - 1)) * (3 * (v * v * v * v) - 7 * (v * v * v) + 8 * (v * v) - 2 * v + 1) * w - ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 3)) - 2 * (v - 1) * (v * v) * v2 * w * (3 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v * v) * (7 * (v * v) + 4 * v - 4) * (w * w * w * w * w) + (v * v * v * v) * ((v * v) + 29 * v - 29) * (w * w * w * w) + 3 * (v * v) * ((v * v * v * v) - 6 * (v * v * v) - 6 * (v * v) + 24 * v - 12) * (w * w * w) - (v - 1) * (v * v) * (9 * (v * v) - 43 * v + 43) * (w * w) + ((v - 1) * (v - 1)) * (7 * (v * v) - 16 * v + 16) * w - 3 * ((v - 1) * (v - 1) * (v - 1))) + 2 * (v - 1) * (v * v) * v4 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w * w * w) - (v * v) * (w * w * w) - 4 * ((v * v) - 2 * v + 2) * (w * w) + 2 * (v - 1)) + 2 * (v - 1) * (v * v) * v3 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 4 * (v - 1) * w - 2 * ((v * v) - 2 * v + 2))) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -std::log(1 - v) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (2 * v1 * ((v * v * v * v * v * v * v) * (3 * v - 1) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (4 * v - 3) * (w * w * w * w * w * w) + (v * v * v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 25 * v - 20) * (w * w * w * w * w) - (v * v * v * v) * (10 * (v * v * v * v) - 27 * (v * v * v) + 46 * (v * v) - 20 * v + 5) * (w * w * w * w) + (v * v * v) * (30.0l * (v * v * v * v) - 98 * (v * v * v) + 147 * (v * v) - 92 * v + 31) * (w * w * w) - (v * v) * (30.0l * (v * v * v * v) - 103 * (v * v * v) + 151 * (v * v) - 89 * v + 21) * (w * w) + v * (10 * (v * v * v * v) - 33 * (v * v * v) + 47 * (v * v) - 23 * v + 1) * w - (v - 1) * ((v * v) + 1)) - 2 * (v - 1) * (v * v) * v4 * (v * w - 1) * (6 * (v * v * v) * (w * w * w * w * w) - 4 * (v * v) * (w * w * w * w) - v * (7 * (v * v) + 2 * v + 2) * (w * w * w) + (22 * (v * v) - 15 * v + 4) * (w * w) - (2 * (v * v) + 11 * v - 11) * w + 2 * (v - 1)) + CQ * v1 * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) + 2 * v * v2 * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w) - (v - 1) * (v * v) * (7 * v - 5) * (w * w) + v * (10 * (v * v * v * v) - 37 * (v * v * v) + 60 * (v * v) - 55 * v + 24) * w - (v - 1) * (10 * (v * v * v) - 26 * (v * v) + 19 * v - 1)) + 2 * CQ * v * v2 * w * (v * w - v + 1) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) - 2 * (v - 1) * (v * v) * v3 * w * (2 * (v - 1) * v * (w * w) + (3 * (v * v) - 4 * v + 4) * w + (v - 1) * (2 * v - 5)) * ((v * v) * (w * w) - 2 * v * w + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (CQ * v1 * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v) * ((v * v) + 2 * v - 2) * (w * w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v * v * v) * (2 * (v * v) + 3 * v - 3) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (8 * (v * v * v * v) + (v * v * v) - 15 * (v * v) + 28 * v - 14) * (w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * (v * v * v * v) + (v * v * v) - 10 * (v * v) + 18 * v - 9) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) - 7 * (v * v * v * v) + 26 * (v * v * v) - 28 * (v * v) + 18 * v - 6) * (w * w * w * w) + (v * v * v * v) * (2 * (v * v * v * v * v * v) - 17 * (v * v * v * v) + 45 * (v * v * v) - 50 * (v * v) + 33 * v - 11) * (w * w * w) - (v - 1) * (v * v) * (6 * (v * v * v * v * v * v) - 18 * (v * v * v * v * v) + 17 * (v * v * v * v) + 5 * (v * v) - 6 * v + 2) * (w * w) + ((v - 1) * (v - 1)) * (v * v) * (6 * (v * v * v * v) - 20 * (v * v * v) + 25 * (v * v) - 10 * v + 5) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1)) + v1 * (-2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v * v) * ((v * v) + 2 * v - 2) * (w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (8 * (v * v * v * v) + 3 * (v * v * v) - (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (16 * (v * v * v * v) - 23 * (v * v * v) + 17 * (v * v) + 12 * v - 6) * (w * w * w * w * w * w) - 3 * (v * v * v * v) * (6 * (v * v * v * v * v * v) - 9 * (v * v * v * v * v) - 2 * (v * v * v * v) + 24 * (v * v * v) - 17 * (v * v) + 6 * v - 2) * (w * w * w * w * w) + (v * v * v * v) * (12 * (v * v * v * v * v * v) - 9 * (v * v * v * v * v) - 47 * (v * v * v * v) + 136 * (v * v * v) - 128 * (v * v) + 72 * v - 24) * (w * w * w * w) - (v * v) * (4 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v) - 75 * (v * v * v * v * v * v) + 137 * (v * v * v * v * v) - 90 * (v * v * v * v) + 9 * (v * v * v) + 25 * (v * v) - 24 * v + 6) * (w * w * w) + (v - 1) * (v * v) * (12 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) - 7 * (v * v * v * v) + 72 * (v * v * v) - 61 * (v * v) + 30.0l * v - 10) * (w * w) - ((v - 1) * (v - 1)) * (12 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v) + 41 * (v * v * v * v) - 8 * (v * v * v) - (v * v) + 6 * v - 2) * w + 4 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1)) - 2 * (v * v) * v2 * w * (2 * (v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w * w) - 4 * ((v - 2) * (v - 2)) * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (6 * (v * v * v * v) - 17 * (v * v * v) + 42 * (v * v) - 50 * v + 25) * (w * w * w * w * w) + (v * v * v * v) * (28 * (v * v * v * v) - 86 * (v * v * v) + 175 * (v * v) - 178 * v + 89) * (w * w * w * w) - 2 * (v * v) * (7 * (v * v * v * v * v * v) + (v * v * v * v * v) - 54 * (v * v * v * v) + 164 * (v * v * v) - 227 * (v * v) + 174 * v - 58) * (w * w * w) + (v - 1) * (v * v) * (42 * (v * v * v * v) - 117 * (v * v * v) + 173 * (v * v) - 112 * v + 56) * (w * w) - 6 * ((v - 1) * (v - 1)) * (7 * (v * v * v * v) - 21 * (v * v * v) + 30.0l * (v * v) - 18 * v + 9) * w + ((v - 1) * (v - 1) * (v - 1)) * (14 * (v * v) - 37 * v + 37)) + 2 * CQ * (v * v) * v2 * w * (2 * (v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (2 * (v * v * v * v) - (v * v * v) + 4 * (v * v) - 6 * v + 3) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 14 * v + 7) * (w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + (v * v * v * v * v) - 8 * (v * v * v * v) + 12 * (v * v * v) - (v * v) - 6 * v + 2) * (w * w * w) - (v - 1) * (v * v) * (6 * (v * v * v * v) - 11 * (v * v * v) - (v * v) + 24 * v - 12) * (w * w) + 2 * ((v - 1) * (v - 1)) * (3 * (v * v * v * v) - 7 * (v * v * v) + 8 * (v * v) - 2 * v + 1) * w - ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 3)) + 4 * (v - 1) * (v * v) * v3 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (4 * (v * v) * (w * w * w) - 2 * (v * v) * (w * w) - 2 * (3 * (v * v) - 4 * v + 4) * w - (v * v) + 8 * v - 8) - 4 * (v - 1) * (v * v) * v4 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w * w) - 4 * (v - 1) * (w * w) + 3 * (v - 1) * w - v + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + 2 * (v1 * (2 * (v * v * v * v) * (w * w * w) + 2 * ((v - 2) * (v - 2)) * (v * v) * (w * w) + v * (4 * (v * v * v) - 11 * (v * v) + 12 * v + 1) * w - (v * v) - 1) + v * v2 * w * (4 * v * w + 2 * (v * v) + v + 1) - (v - 1) * (v * v) * v4 * w * (4 * w + 3) - (v - 1) * (v * v) * v3 * w * (4 * w + 3)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * std::log(1 - v * w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + 2 * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (2 * v * v1 * w * ((v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (4 * v - 5) * (w * w * w * w) + (v * v * v) * (9 * (v * v) - 21 * v + 14) * (w * w * w) - (v - 1) * (v * v) * (4 * (v * v * v) - 3 * (v * v) - 7 * v + 12) * (w * w) + ((v - 1) * (v - 1)) * v * (8 * (v * v * v) - 18 * (v * v) + 13 * v + 3) * w - ((v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v) - 9 * (v * v) + 8 * v - 1)) + CQ * (v - 1) * v1 * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * (v * v) * v4 * w * (4 * w + 3) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) - (v - 1) * (v * v) * v3 * w * (4 * w + 3) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) + (v - 1) * v * v2 * w * ((v * v * v) * (9 * v - 7) * (w * w * w) - (v - 1) * (v * v) * (8 * (v * v) + 3 * v - 3) * (w * w) + ((v - 1) * (v - 1)) * v * (16 * (v * v) - 13 * v + 3) * w - ((v - 1) * (v - 1) * (v - 1)) * (8 * (v * v) - 7 * v + 3)) + 2 * CQ * ((v - 1) * (v - 1)) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) * std::log(v * w - v + 1) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -2 * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v - 1) * (v * v) * v4 * (2 * (v * v) * (w * w * w * w) - 3 * (v * v) * (w * w * w) + 4 * (v * v) * (w * w) - 2 * (2 * (v * v) - v + 1) * w + 4 * (v - 1)) + v1 * ((v * v) * (3 * (v * v * v * v) - 9 * (v * v * v) + 10 * (v * v) - 2 * v + 1) * (w * w * w) - 2 * (v * v) * ((v * v * v * v) - 2 * (v * v * v) + (v * v) + 2 * v - 1) * (w * w) + (3 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 13 * (v * v * v * v) - 5 * (v * v * v) + 3 * v - 1) * w - 3 * (v - 1) * ((v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 1)) + (v * v) * v2 * w * (2 * (v * v) * ((v * v) - 2 * v + 2) * (w * w * w) + 8 * (v - 1) * (v * v) * (w * w) - 2 * (7 * (v * v * v * v) - 24 * (v * v * v) + 43 * (v * v) - 38 * v + 19) * w + (v - 1) * (14 * (v * v) - 31 * v + 31)) - (v - 1) * (v * v) * v3 * w * (6 * (v * v) * (w * w * w) - (v * v) * (w * w) - 12 * ((v * v) - v + 1) * w + 12 * (v - 1))) * std::log(w) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (3 * (v - 1) * v1 * (v * w - 1) * (v * w - v + 1) * (6 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v * v * v) * ((v * v) + 4 * v - 3) * (w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (18 * (v * v * v * v) - 121 * (v * v * v) + 109 * (v * v) - 24 * v + 12) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (52 * (v * v * v * v) - 193 * (v * v * v) + 207 * (v * v) - 100 * v + 62) * (w * w * w * w * w * w) - (v * v * v * v) * (42 * (v * v * v * v * v * v) - 75 * (v * v * v * v * v) - 88 * (v * v * v * v) + 282 * (v * v * v) - 183 * (v * v) + 92 * v - 36) * (w * w * w * w * w) + (v * v * v * v) * (4 * (v * v * v * v * v * v) + 95 * (v * v * v * v * v) - 385 * (v * v * v * v) + 462 * (v * v * v) - 24 * (v * v) - 202 * v + 54) * (w * w * w * w) + (v * v) * (6 * (v * v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v * v) + 45 * (v * v * v * v * v * v) + 293 * (v * v * v * v * v) - 876 * (v * v * v * v) + 965 * (v * v * v) - 495 * (v * v) + 152 * v - 36) * (w * w * w) - (v - 1) * (v * v) * (18 * (v * v * v * v * v * v) - 102 * (v * v * v * v * v) + 229 * (v * v * v * v) - 256 * (v * v * v) + 149 * (v * v) - 38 * v + 18) * (w * w) + ((v - 1) * (v - 1)) * (18 * (v * v * v * v * v * v) - 76 * (v * v * v * v * v) + 131 * (v * v * v * v) - 114 * (v * v * v) + 75 * (v * v) - 28 * v + 12) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * (3 * (v * v * v * v) - 9 * (v * v * v) + 10 * (v * v) - 2 * v + 1)) + 12 * (v - 1) * v2 * w * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (4 * (v * v * v * v) - 3 * (v * v * v) - (v * v) + 8 * v - 4) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (4 * (v * v * v * v) - (v * v * v) - 5 * (v * v) + 12 * v - 6) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v) - 5 * (v * v * v * v * v) - 5 * (v * v * v * v) + 8 * (v * v * v) + 26 * (v * v) - 36 * v + 12) * (w * w * w * w) + (v * v * v * v) * ((v * v) + 2 * v - 2) * (2 * (v * v * v * v) - (v * v * v) - 17 * (v * v) + 36 * v - 18) * (w * w * w) - (v - 1) * (v * v) * (6 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) - 7 * (v * v * v * v) + 22 * (v * v * v) + 19 * (v * v) - 36 * v + 12) * (w * w) + ((v - 1) * (v - 1)) * (v * v) * (6 * (v * v * v * v) - 13 * (v * v * v) + 27 * (v * v) - 28 * v + 14) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * ((v * v) + 2 * v - 2)) - 12 * ((v - 1) * (v - 1)) * (v * v) * v4 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v) * (w * w * w * w * w) - 2 * (v * v) * (2 * v + 3) * (w * w * w * w) + 2 * v * ((v * v) + 9 * v - 3) * (w * w * w) + ((v * v * v) - 14 * (v * v) + 6 * v + 2) * (w * w) - (2 * (v * v) - 9 * v + 8) * w + v - 1) - 6 * AL * (v - 1) * v1 * (v * w - 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 8 * CQ * ((v - 1) * (v - 1)) * v1 * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 12 * AL * (v - 1) * v * v2 * w * (v * w - 1) * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 16 * CQ * ((v - 1) * (v - 1)) * v * v2 * w * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 12 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * v3 * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w * w) - 6 * (v * v) * (w * w) + ((v * v) + 14 * v - 14) * w - 4 * (v - 1))) / (((v - 1) * (v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 6.0l + -std::log(S / q2_fac) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (v1 * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * ((v * v) - 7 * v + 4) * (w * w * w * w * w) + (v * v * v) * (6 * (v * v * v * v) - 23 * (v * v * v) + 46 * (v * v) - 23 * v + 2) * (w * w * w * w) - 2 * (v * v) * ((v * v * v * v * v) + 6 * (v * v * v * v) - 25 * (v * v * v) + 42 * (v * v) - 17 * v + 3) * (w * w * w) + 2 * v * (3 * (v * v * v * v * v) - 14 * (v * v * v) + 29 * (v * v) - 8 * v + 3) * (w * w) - 2 * (3 * (v * v * v * v * v) - 6 * (v * v * v * v) + 4 * (v * v * v) + 4 * (v * v) + 2 * v + 1) * w + 2 * (v * v * v * v) - 6 * (v * v * v) + 9 * (v * v) - 4 * v + 3) - 4 * (v - 1) * (v * v) * v4 * (v * w - 1) * ((v * v) * (w * w * w * w) + 2 * (v - 1) * v * (w * w * w) - ((v * v) + 6 * v - 2) * (w * w) + (2 * v + 3) * w - 1) + 2 * v * v2 * w * ((v * v) * (w * w) + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + -std::log(S / q2_fragm) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (v1 * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * (v * v) + v - 4) * (w * w * w * w * w) + (v * v * v * v) * (6 * (v * v * v) - 2 * (v * v) - 19 * v + 19) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (3 * (v * v * v) - 4 * (v * v) - 2 * v + 6) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (7 * (v * v * v) - 14 * (v * v) + 8 * v + 5) * (w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (4 * (v * v * v) - 10 * (v * v) + 9 * v - 1) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 4 * (v - 1) * (v * v) * v4 * w * (v * w - v + 1) * ((v * v) * (w * w * w) - (v - 2) * v * (w * w) - 2 * (v - 1) * (v + 1) * w + 2 * ((v - 1) * (v - 1))) + 2 * ((v - 1) * (v - 1)) * v * v2 * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) / (((v - 1) * (v - 1)) * v * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    case 11:
        return std::log(1 - w) * (-N3 * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (8 * (v * v * v * v) + 12 * (v * v * v) + 21 * (v * v) - v + 2) * (w * w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 29 * (v * v * v * v) + 9 * (v * v * v) - 6 * (v * v) + v - 1) * (w * w * w * w) - 2 * (v * v) * (6 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) + 11 * (v * v * v * v) + 30.0l * (v * v * v) - 16 * (v * v) - 2 * v - 3) * (w * w * w) + (4 * (v * v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v) + 54 * (v * v * v * v * v) - 5 * (v * v * v * v) - 32 * (v * v * v) + (v * v) - 2 * v + 1) * (w * w) - 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 7 * (v * v * v * v) + 6 * (v * v * v) + 6 * (v * v) - 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - v + 2)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 12 * (v * v * v) + 7 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 2 * (v * v * v) + 19 * (v * v) - 3 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 27 * (v * v * v * v) + 13 * (v * v * v) - 10 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 4 * (v * v * v * v * v) + 5 * (v * v * v * v) + 46 * (v * v * v) - 24 * (v * v) - 2 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v) - 29 * (v * v * v * v * v * v) + 74 * (v * v * v * v * v) + 7 * (v * v * v * v) - 56 * (v * v * v) + 9 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 9 * (v * v * v * v) + 6 * (v * v * v) + 12 * (v * v) - 8 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) + N * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) + (v * v * v * v) * (16 * (v * v * v * v) + 10 * (v * v * v) + 3 * (v * v) - 2 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (8 * (v * v * v * v) + (v * v * v) + 7 * (v * v) - 6 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (8 * (v * v * v * v * v * v) - 7 * (v * v * v * v * v) + 10 * (v * v * v * v) - 8 * (v * v * v) - (v * v) + 3 * v - 1) * (w * w * w * w) - 2 * (v - 1) * (v * v) * (6 * (v * v * v * v * v) + (v * v * v * v) - 4 * (v * v * v) + 8 * (v * v) - 8 * v + 3) * (w * w * w) + ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v) + 16 * (v * v * v * v * v) - 11 * (v * v * v * v) + 6 * (v * v * v) - 2 * (v * v) - 2 * v + 1) * (w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v * v) + 2 * (v * v * v) + (v * v) - 1) * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 30.0l * (v * v * v) - 17 * (v * v) - 2 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 27 * (v * v * v) - 5 * (v * v) - 20 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) + 19 * (v * v * v * v * v) + 24 * (v * v * v * v) - 48 * (v * v * v) - (v * v) + 3 * v - 1) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (6 * (v * v * v * v * v) + 11 * (v * v * v * v) + 38 * (v * v * v) + 16 * (v * v) - 16 * v + 3) * (w * w * w) - (v - 1) * (4 * (v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v) + 13 * (v * v * v * v * v) + 29 * (v * v * v * v) - 8 * (v * v * v) - 20 * (v * v) + 3 * v - 1) * (w * w) + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1) * (4 * (v * v * v) - 2 * (v * v) + 5 * v + 1) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + 2 * N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v * v) * (6 * v - 5) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (10 * (v * v) - 16 * v + 11) * (w * w * w * w * w) - (v * v * v * v) * (30.0l * (v * v * v * v) - 67 * (v * v * v) + 67 * (v * v) - 31 * v + 4) * (w * w * w * w) + 2 * (v - 1) * (v * v * v) * (31 * (v * v * v * v) - 73 * (v * v * v) + 79 * (v * v) - 43 * v + 8) * (w * w * w) - 2 * CQ * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * w + ((v - 1) * (v - 1))) - ((v - 1) * (v - 1)) * (v * v) * (58 * (v * v * v * v) - 151 * (v * v * v) + 180 * (v * v) - 101 * v + 24) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * v * (22 * (v * v * v * v) - 62 * (v * v * v) + 81 * (v * v) - 53 * v + 16) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (2 * (v * v) - 3 * v + 4)) - 2 * N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * ((v * v) - v - 1) * (w * w * w * w * w) - CQ * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v * v) * (w * w * w) - 2 * (v * v) * (3 * (v * v) - 5 * v + 1) * (w * w) - (v - 1) * v * ((v * v * v) - 8 * (v * v) + 9 * v - 4) * w + ((v - 1) * (v - 1)) * ((v * v * v) - 2 * (v * v) + 5 * v - 2)) + (v * v * v * v) * (4 * (v * v * v) - 13 * (v * v) - v + 3) * (w * w * w * w) - (v * v * v) * (12 * (v * v * v * v) - 42 * (v * v * v) + 29 * (v * v) - 9 * v + 4) * (w * w * w) + (v * v) * (10 * (v * v * v * v * v) - 35 * (v * v * v * v) + 23 * (v * v * v) - (v * v) + 3 * v - 4) * (w * w) - (v - 1) * v * (2 * (v * v * v * v * v) - 27 * (v * v * v) + 32 * (v * v) - 19 * v + 6) * w + ((v - 1) * (v - 1)) * (2 * (v * v * v * v) - 10 * (v * v * v) + 11 * (v * v) - 12 * v + 5)) - 2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v * v) * (v + 2) * (3 * (v * v) - 3 * v + 1) * (w * w * w) + CQ * v * (v * w - 1) * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) - 2 * (v * v) * (2 * (v * v * v * v) + 4 * (v * v * v) - 5 * (v * v) + 2 * v - 2) * (w * w) + (v - 1) * (v * v) * ((v * v * v) + 5 * (v * v) - v + 5) * w - ((v - 1) * (v - 1)) * ((v * v * v) + (v * v) - v + 1)) - 4 * (CQ - 1) * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + 4 * (CQ - 1) * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (N4 * (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (12 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - 36 * (v * v * v * v * v * v) * (w * w * w * w * w) + 4 * (v * v * v * v * v) * (3 * (v * v) - 3 * v + 13) * (w * w * w * w) - 2 * (v * v * v) * (12 * (v * v * v * v) - 15 * (v * v * v) + 16 * (v * v) + 11 * v + 1) * (w * w * w) + (v * v) * (50 * (v * v * v * v) - 98 * (v * v * v) + 94 * (v * v) - 21 * v + 2) * (w * w) - v * (28 * (v * v * v * v) - 62 * (v * v * v) + 56 * (v * v) - 15 * v - 2) * w + (v - 1) * (2 * (v * v * v) - 3 * (v * v) + 2)) - 2 * N2 * (v - 1) * vC * w * (v * w - 1) * (6 * (v * v * v * v * v * v) * (w * w * w * w * w) + (v * v * v * v * v) * (2 * v - 19) * (w * w * w * w) + (v * v * v) * (8 * (v * v * v) - 21 * (v * v) + 39 * v - 1) * (w * w * w) - (v * v) * (15 * (v * v * v) - 28 * (v * v) + 36 * v + 3) * (w * w) + v * (8 * (v * v * v) - 9 * (v * v) + 9 * v + 7) * w - (v * v * v) - (v * v) + 2 * v - 3) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + N3 * vC * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v * v) * (w * w * w * w * w) - 2 * (v * v * v * v) * (2 * v + 1) * (w * w * w * w) + (v * v * v) * (3 * (v * v) + 4 * v + 5) * (w * w * w) - (v * v) * ((v * v * v) + 5 * (v * v) + 7 * v - 1) * (w * w) + 2 * v * (3 * (v * v * v) + (v * v) + v - 1) * w - 2 * (v - 1) * (v + 1) * ((v * v) + 1)) + CQ * (v * w - v + 1) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 8 * (v * v) * (w * w) - 8 * v * w + 4)) + (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) + 2 * (v * v * v * v) * ((v * v) - 3 * v + 1) * (w * w * w * w) - 2 * (v * v * v) * (2 * (v * v * v) + 3 * (v * v) - 7 * v + 3) * (w * w * w) + (v * v) * (2 * v - 1) * (2 * (v * v * v) + 4 * (v * v) + 3 * v - 6) * (w * w) - v * (8 * (v * v * v * v) - 8 * (v * v) + 7 * v - 6) * w + (v - 1) * (v + 2) * (4 * (v * v) - 5 * v + 4)) - N * v * vC * w * (v * w - 1) * (2 * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v * v * v * v) * (w * w * w * w) - 4 * (v * v * v * v) * (w * w * w) + (v * v) * (3 * (v * v) + 1) * (w * w) - (v - 1) * v * ((v * v) + 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (v + 1)) + CQ * v * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 2) * (2 * (v * v) * (w * w) - 2 * v * (v + 1) * w + (v * v) + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (-N3 * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (v + 1) * (5 * v + 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (6 * (v * v * v) + 12 * (v * v) + 17 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) + 6 * (v * v * v) + 46 * (v * v) + 14 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (3 * v + 5) * ((v * v * v * v) - 2 * (v * v * v) + 6 * (v * v) - 2 * v - 1) * (w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 7 * (v * v * v * v) + 20 * (v * v * v) + 3 * (v * v) - 18 * v + 3) * (w * w) - 2 * (v - 1) * v * (2 * (v * v * v * v * v) - 3 * (v * v * v * v) + 4 * (v * v * v) + 4 * (v * v) + 6 * v - 5) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 2 * v + 3)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v) + 24 * (v * v * v) + 11 * (v * v) + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 6 * (v * v * v) + 33 * (v * v) - 7 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 47 * (v * v * v * v) + 15 * (v * v * v) - 16 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v) * (6 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 11 * (v * v * v * v) + 64 * (v * v * v) - 36 * (v * v) - 4 * v - 3) * (w * w * w) - (4 * (v * v * v * v * v * v * v * v) + 4 * (v * v * v * v * v * v * v) - 41 * (v * v * v * v * v * v) + 106 * (v * v * v * v * v) + 7 * (v * v * v * v) - 76 * (v * v * v) + 13 * (v * v) - 2 * v + 1) * (w * w) + 2 * (v - 1) * (4 * (v * v * v * v * v * v) - 10 * (v * v * v * v * v) + 11 * (v * v * v * v) + 6 * (v * v * v) + 18 * (v * v) - 12 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * ((v * v) + 1) * ((v * v) - 3 * v + 4)) + N * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (15 * (v * v) + 12 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (6 * (v * v * v) + 5 * (v * v) + 3 * v - 2) * (w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) - 2 * (v * v * v) + 12 * (v * v) - 10 * v - 1) * (w * w * w * w) - 2 * (v - 1) * (v * v * v) * (3 * (v * v * v * v) + (v * v * v) - (v * v) + 5 * v - 2) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * ((v * v * v * v) + 4 * (v * v * v) - 3 * (v * v) + 2) * (w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v * v) + (v * v) - 1) * w + 2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (2 * v - 1) * (8 * (v * v * v) + 21 * (v * v) - 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (8 * (v * v * v * v) + 29 * (v * v * v) - (v * v) - 26 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) + 17 * (v * v * v * v * v) + 34 * (v * v * v * v) - 52 * (v * v * v) - 5 * (v * v) + 3 * v - 1) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (6 * (v * v * v * v * v) + 9 * (v * v * v * v) + 36 * (v * v * v) + 28 * (v * v) - 20 * v + 3) * (w * w * w) - (v - 1) * (4 * (v * v * v * v * v * v * v) + 12 * (v * v * v * v * v * v) + 5 * (v * v * v * v * v) + 33 * (v * v * v * v) + 8 * (v * v * v) - 32 * (v * v) + 3 * v - 1) * (w * w) + 2 * ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + 7 * (v * v * v) - (v * v) + 7 * v + 1) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (3 * v - 2) * (w * w * w * w * w * w) + (v * v * v * v) * (24 * (v * v * v * v) - 32 * (v * v * v) + 20 * (v * v) - 4 * v + 1) * (w * w * w * w * w) - (v * v * v) * (80 * (v * v * v * v * v) - 196 * (v * v * v * v) + 212 * (v * v * v) - 120 * (v * v) + 33 * v - 4) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (82 * (v * v * v * v * v) - 222 * (v * v * v * v) + 268 * (v * v * v) - 162 * (v * v) + 41 * v - 3) * (w * w * w) - 4 * CQ * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * w + ((v - 1) * (v - 1))) - 2 * ((v - 1) * (v - 1)) * v * (78 * (v * v * v * v * v) - 228 * (v * v * v * v) + 296 * (v * v * v) - 180 * (v * v) + 49 * v - 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (64 * (v * v * v * v * v) - 192 * (v * v * v * v) + 264 * (v * v * v) - 176 * (v * v) + 57 * v - 1) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (8 * (v * v * v * v) - 20 * (v * v * v) + 32 * (v * v) - 24 * v + 13)) - 2 * N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (6 * v - 7) * (w * w * w * w * w) - CQ * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v * v) * (w * w * w) - 2 * (v * v) * (3 * (v * v) - 5 * v + 1) * (w * w) - (v - 1) * v * ((v * v * v) - 8 * (v * v) + 9 * v - 4) * w + ((v - 1) * (v - 1)) * ((v * v * v) - 2 * (v * v) + 5 * v - 2)) + (v * v * v) * (2 * v - 1) * (5 * (v * v * v) - 9 * (v * v) + v - 1) * (w * w * w * w) - (v - 1) * (v * v) * (14 * (v * v * v * v) - 26 * (v * v * v) + 10 * (v * v) - 11 * v + 1) * (w * w * w) + v * (12 * (v * v * v * v * v * v) - 35 * (v * v * v * v * v) + 32 * (v * v * v * v) - 13 * (v * v * v) + 8 * (v * v) - 4 * v - 1) * (w * w) - ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v) + (v * v * v * v) - 16 * (v * v * v) + 14 * (v * v) - 10 * v + 1) * w + ((v - 1) * (v - 1)) * (4 * (v * v * v * v) - 13 * (v * v * v) + 17 * (v * v) - 16 * v + 7)) - (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (6 * (v * v * v * v * v) * (w * w * w * w) - (v * v) * (14 * (v * v * v) - 2 * v + 1) * (w * w * w) + 2 * CQ * v * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + v * (12 * (v * v * v * v) + 6 * (v * v * v) - 18 * (v * v) + 7 * v - 2) * (w * w) - (v - 1) * (2 * (v * v * v * v) + 10 * (v * v * v) - 2 * (v * v) + 5 * v - 1) * w - ((v - 1) * (v - 1)) * (2 * (v * v * v) - 2 * (v * v) + 4 * v - 1)) - 4 * (CQ - 1) * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + 4 * (CQ - 1) * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N3 * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v) * (w * w * w * w) - 2 * (v * v * v) * (v + 3) * (w * w * w) + (v * v) * ((v * v) + 4 * v + 11) * (w * w) - 2 * v * ((v * v) + 3 * v + 4) * w + 4 * ((v * v) + 1)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * N4 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (4 * (v * v * v * v) * (w * w * w) + (v * v * v) * (4 * v - 9) * (w * w) + (v * v) * (8 * (v * v) - 16 * v + 13) * w - (v * v) + 2 * v - 2) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (4 * (v * v * v * v) * (w * w * w) + 2 * (v * v * v) * (2 * v - 3) * (w * w) + (v * v) * (8 * (v * v) - 17 * v + 12) * w - (v - 2) * (v - 1)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * N * v * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v) * (w * w * w) - 2 * (v * v) * (v + 1) * (w * w) + v * ((v + 1) * (v + 1)) * w - 2 * (v - 1) * (v + 1)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * (v - 1) * vC * w * ((v * v * v) * (w * w) - (v * v) * (v + 4) * w + 2 * ((v * v) - v + 2)) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(1 - v * w) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (4 * v - 5) * (w * w * w * w * w) - (v * v * v * v) * (9 * (v * v * v) - 12 * (v * v) + 2 * v - 1) * (w * w * w * w) + 4 * (v - 1) * (v * v * v) * (3 * (v * v) - 1) * (w * w * w) + 4 * CQ * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * (2 * (v * v) - 2 * v + 1) * w + ((v - 1) * (v - 1))) - ((v - 1) * (v - 1)) * (v * v) * (9 * (v * v * v) - 6 * (v * v) + 7 * v - 6) * (w * w) + 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (4 * (v * v * v) - 5 * (v * v) + 7 * v - 2) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1)) + 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * CQ * ((v * v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v * v) * (w * w * w) - 2 * (v * v) * (3 * (v * v) - 5 * v + 1) * (w * w) - (v - 1) * v * ((v * v * v) - 8 * (v * v) + 9 * v - 4) * w + ((v - 1) * (v - 1)) * ((v * v * v) - 2 * (v * v) + 5 * v - 2)) + 2 * (v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (9 * v - 5) * (w * w * w) + 2 * (v * v) * (7 * (v * v * v) - 6 * (v * v) + 1) * (w * w) - (v - 1) * v * (9 * (v * v * v) - 2 * (v * v) + v + 4) * w + 2 * ((v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1)) + 4 * N * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + (v - 1) * v * w * (3 * (v * v * v) * (w * w * w) - (v * v) * (7 * v - 1) * (w * w) + (v - 1) * v * (7 * v + 3) * w - 3 * ((v - 1) * (v - 1)) * (v + 1))) - 4 * N3 * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * ((v - 1) * (v - 1)) * (v * v * v) * (w - 1) * (w * w)) - 2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (-3 * (v * v * v * v * v) * (w * w * w * w) + (v * v * v * v) * (6 * v + 1) * (w * w * w) + 2 * CQ * v * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) - (v * v) * (6 * (v * v * v) - 3 * (v * v) + 2 * v + 3) * (w * w) + (v - 1) * v * (6 * (v * v * v) - 3 * (v * v) - 5 * v + 6) * w - ((v - 1) * (v - 1)) * (v + 1) * (3 * (v * v) - 2 * v + 3)) - 8 * (CQ - 1) * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + 8 * (CQ - 1) * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) * std::log(v * w - v + 1) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (2 * N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (4 * (v * v) - 5 * v + 2) * (w * w * w) - v * (2 * (v * v * v * v) - 2 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w) + (6 * (v * v * v * v * v) - 11 * (v * v * v * v) + 12 * (v * v * v) - 5 * (v * v) + 4 * v + 1) * w - (2 * (v * v) - v + 2) * (3 * (v * v) - 5 * v + 3)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - N3 * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (2 * (v * v * v * v) * (w * w * w * w) - (v * v * v) * (v + 1) * (v + 3) * (w * w * w) + (v * v) * (3 * (v * v * v) - (v * v) + 13 * v - 3) * (w * w) - 2 * v * (2 * v - 1) * ((v * v * v) - (v * v) + 3 * v + 1) * w + 2 * (v - 1) * ((v * v) + 1) * ((v * v) - v + 2)) - CQ * (((v * v) + 1) * ((v * v) + 1)) * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * (4 * (v * v * v * v * v) * (w * w * w * w) - (v * v) * (4 * (v * v * v) + 10 * (v * v) + 1) * (w * w * w) + 2 * (v * v) * ((v * v * v) + 5 * (v * v) + 2 * v + 1) * (w * w) + (2 * (v * v * v * v * v) - 8 * (v * v * v * v) + (v * v) - 5 * v + 1) * w - (v - 1) * (2 * (v * v * v) - 6 * (v * v) + 8 * v - 5)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - N * (v - 1) * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * ((v * v * v) * (v + 3) * (w * w * w) - (v * v) * (3 * (v * v) + 5) * (w * w) + 2 * (v - 1) * v * (2 * (v * v) - v + 1) * w - 2 * ((v - 1) * (v - 1)) * ((v * v) + 1)) + CQ * (v - 1) * ((v * v) + 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - N4 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v) * (w * w * w) - v * (12 * (v * v * v * v) - 14 * (v * v * v) + 6 * (v * v) - 4 * v + 1) * (w * w) + (24 * (v * v * v * v * v) - 68 * (v * v * v * v) + 84 * (v * v * v) - 50 * (v * v) + 12 * v - 1) * w - (v - 1) * (12 * (v * v * v * v) - 24 * (v * v * v) + 28 * (v * v) - 18 * v + 7)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(w) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (6 * (v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 6 * (v * v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (45 * (v * v * v) - 88 * (v * v) + 42 * v - 3) * (w * w * w * w * w * w) + (v * v * v * v * v) * (250 * (v * v * v * v) - 678 * (v * v * v) + 688 * (v * v) - 291 * v + 16) * (w * w * w * w * w) - (v * v * v * v) * (234 * (v * v * v * v * v) - 754 * (v * v * v * v) + 884 * (v * v * v) - 376 * (v * v) + 5 * v - 6) * (w * w * w * w) + 2 * (v - 1) * (v * v * v) * (33 * (v * v * v * v * v) - 24 * (v * v * v * v) - 138 * (v * v * v) + 181 * (v * v) - 46 * v + 8) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (7 * (v * v * v * v * v) - 66 * (v * v * v * v) + 129 * (v * v * v) - 107 * (v * v) + 83 * v - 7) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (6 * (v * v * v * v) - 4 * (v * v * v) - 38 * (v * v) + 27 * v - 19) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (6 * (v * v * v * v) - 12 * (v * v * v) + 8 * (v * v) + 9 * v + 2)) + N2 * (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (6 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + 6 * (v - 5) * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v * v) * (84 * (v * v * v * v) - 174 * (v * v * v) + 79 * (v * v) - 15 * v + 6) * (w * w * w * w * w) + (v * v * v * v) * (120 * (v * v * v * v) - 204 * (v * v * v) + 69 * (v * v) + 19) * (w * w * w * w) - (v * v) * (42 * (v * v * v * v * v * v) + 54 * (v * v * v * v * v) - 303 * (v * v * v * v) + 296 * (v * v * v) - 117 * (v * v) + 42 * v - 12) * (w * w * w) - (v * v) * (6 * (v * v * v * v * v * v) - 102 * (v * v * v * v * v) + 245 * (v * v * v * v) - 232 * (v * v * v) + 156 * (v * v) - 95 * v + 26) * (w * w) + (v - 1) * (12 * (v * v * v * v * v * v) - 66 * (v * v * v * v * v) + 121 * (v * v * v * v) - 103 * (v * v * v) + 71 * (v * v) - 21 * v + 6) * w - ((v - 1) * (v - 1)) * (6 * (v * v * v * v) - 6 * (v * v * v) - 16 * (v * v) + 27 * v - 7)) - 3 * N * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + (v * v * v * v) * (2 * (v * v * v * v) - 16 * (v * v * v) + 3 * (v * v) + v - 2) * (w * w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) - 20 * (v * v * v) - 6 * (v * v) + 17 * v - 7) * (w * w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) - 6 * (v * v * v * v * v) - 2 * (v * v * v * v) + 7 * (v * v * v) - (v * v) - 3 * v + 2) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (4 * (v * v * v * v) + 3 * (v * v * v) - 11 * (v * v) + 2 * v + 5) * (w * w * w) - ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v) + 13 * (v * v * v * v) - 11 * (v * v * v) - 11 * (v * v) - v + 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (8 * (v * v * v) + (v * v) - 3) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v) + 3 * (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) - (v - 2) * (v - 1) * (v * v * v * v) * (2 * v - 1) * (w * w * w * w * w) - (v * v * v * v) * (19 * (v * v) - 17 * v + 7) * (w * w * w * w) - (v * v) * (2 * (v * v * v * v * v) - 29 * (v * v * v * v) + 30.0l * (v * v * v) + (v * v) - 18 * v + 4) * (w * w * w) + (v * v) * (2 * (v * v * v * v * v) - 13 * (v * v * v * v) - 5 * (v * v * v) + 50 * (v * v) - 47 * v + 10) * (w * w) - (v - 1) * (4 * (v * v * v * v * v) - 21 * (v * v * v * v) + 17 * (v * v * v) + 9 * (v * v) - 9 * v + 2) * w + ((v - 1) * (v - 1)) * (2 * (v * v * v) - 8 * (v * v) + 6 * v - 3)) + 3 * AL * N3 * vC * (v * w - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) - 3 * AL * N * vC * (v * w - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 3) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 2 * (v * v * v) + 11 * (v * v) - 2 * v + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 2 * (v * v * v) + 3 * (v * v) - v + 1) * (w * w * w) + ((v * v) + 1) * (2 * (v * v * v * v) - 3 * (v * v) + 2 * v + 1) * (w * w) - 2 * ((v - 1) * (v - 1)) * (2 * v + 1) * ((v * v) + 1) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1)) + 3 * N3 * vC * (v * w - 1) * (8 * (v * v * v * v * v) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) - 10 * (v * v * v) - 25 * (v * v) + 3 * v - 2) * (w * w * w * w) + v * (2 * (v * v * v * v) + 28 * (v * v * v) + 33 * (v * v) - 3 * v + 4) * (w * w * w) - (8 * (v * v * v * v * v) + 3 * (v * v * v * v) + 37 * (v * v * v) + 27 * (v * v) + 3 * v + 2) * (w * w) + (16 * (v * v * v * v) - 11 * (v * v * v) + 39 * (v * v) + 9 * v + 3) * w - 8 * v * ((v * v) - v + 2)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 15 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 20 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 15 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 4 * GTR * N * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w) + (v * v * v * v) * ((v * v) - 2 * v - 1) * (w * w * w * w) + 2 * (v - 1) * (v * v * v) * (14 * (v * v) - 15 * v + 2) * (w * w * w) - 2 * ((v - 1) * (v - 1)) * (v * v) * (14 * (v * v) + v + 3) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + 4 * CQ * N3 * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (v + 2) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 5 * v - 3) * (w * w * w * w) + (v * v) * ((v * v * v * v) + 7 * (v * v * v) - (v * v) - 4 * v + 1) * (w * w * w) - (v * v) * ((v * v * v * v) + 3 * (v * v * v) + 4 * (v * v) - 5 * v + 1) * (w * w) + (v - 1) * (4 * (v * v * v * v) - 6 * (v * v * v) + 13 * (v * v) - 4 * v + 1) * w - ((v - 1) * (v - 1)) * (3 * (v * v) - 6 * v + 7)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 4 * CQ * N * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (v + 2) * (w * w * w * w * w) - (v * v * v * v) * ((v * v) + 3 * v - 1) * (w * w * w * w) + (v - 1) * (v * v) * ((v * v * v) + 4 * (v * v) + v - 1) * (w * w * w) - ((v - 1) * (v - 1)) * (v * v) * ((v * v) + 3 * v + 3) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (4 * (v * v) + 1) * w - 3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 12 * CQ * N2 * (v - 1) * v * vC * w * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 12 * CQ * (v - 1) * v * vC * w * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 4 * GTR * N3 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v) * (2 * v - 3) * (w * w * w * w * w) + (v * v * v * v) * (4 * (v * v * v * v) - 12 * (v * v * v) + 6 * (v * v) + 3 * v + 1) * (w * w * w * w) - (v - 1) * (v * v * v) * (12 * (v * v * v * v) - 32 * (v * v * v) + 45 * (v * v) - 37 * v + 4) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (12 * (v * v * v * v) - 36 * (v * v * v) + 53 * (v * v) - 11 * v + 6) * (w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v * v * v) - 7 * (v * v * v) + 5 * (v * v) - 6 * v + 2) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + 24 * CQ * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) - 24 * CQ * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * (N3 * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 5) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 8 * (v * v * v) + 27 * (v * v) + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 3 * (v * v * v * v) + 10 * (v * v * v) + 20 * (v * v) + v + 1) * (w * w * w) + (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) + 13 * (v * v * v * v) + 24 * (v * v * v) + 36 * (v * v) + 4 * v + 1) * (w * w) - 2 * (2 * (v * v * v * v * v) + (v * v * v * v) + 8 * (v * v * v) + 6 * (v * v) + 10 * v + 1) * w + 2 * ((v * v) + 1) * ((v * v) + 3)) - N * vC * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (v + 3) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v) + 2 * (v * v * v) + 11 * (v * v) - 2 * v + 1) * (w * w * w * w) - 2 * v * ((v * v * v * v * v) + 2 * (v * v * v) + 3 * (v * v) - v + 1) * (w * w * w) + ((v * v) + 1) * (2 * (v * v * v * v) - 3 * (v * v) + 2 * v + 1) * (w * w) - 2 * ((v - 1) * (v - 1)) * (2 * v + 1) * ((v * v) + 1) * w + 2 * ((v - 1) * (v - 1)) * ((v * v) + 1)) + N4 * (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v) * (w * w * w * w * w) + 4 * (v - 4) * (v * v * v * v * v) * (w * w * w * w) + (v * v) * (12 * (v * v * v * v) - 32 * (v * v * v) + 40 * (v * v) - 4 * v + 1) * (w * w * w) - v * (4 * (v * v * v * v * v) + 16 * (v * v * v * v) - 40 * (v * v * v) + 40 * (v * v) - 5 * v + 2) * (w * w) + (8 * (v * v * v * v * v) - 4 * (v * v * v * v) - 4 * (v * v * v) + 7 * (v * v) + 2 * v + 1) * w - 4 * (v * v * v * v) + 8 * (v * v * v) - 9 * (v * v) + 6 * v - 3) - 2 * N2 * (v - 1) * vC * w * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) + 2 * (v - 4) * (v * v * v * v * v) * (w * w * w * w) + (v * v) * (6 * (v * v * v * v) - 16 * (v * v * v) + 22 * (v * v) - 3 * v + 1) * (w * w * w) - v * (2 * (v * v * v * v * v) + 8 * (v * v * v * v) - 18 * (v * v * v) + 22 * (v * v) - 3 * v + 2) * (w * w) + (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + (v * v * v) + 2 * (v * v) + 3 * v + 1) * w - 2 * (v * v * v * v) + 4 * (v * v * v) - 6 * (v * v) + 5 * v - 3) + (v - 1) * vC * w * (v * w - 1) * ((v * v) * (4 * (v * v) - 2 * v + 1) * (w * w * w) - v * (4 * (v * v * v) + 4 * (v * v) - v + 2) * (w * w) + (6 * (v * v * v) - 3 * (v * v) + 4 * v + 1) * w - 3 * (v * v) + 4 * v - 3) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(S / q2_fragm) * (4 * N4 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v * v) * (3 * v - 2) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (5 * (v * v) - 8 * v + 5) * (w * w * w * w * w) - (v * v * v * v) * (11 * (v * v * v * v) - 26 * (v * v * v) + 25 * (v * v) - 10 * v + 1) * (w * w * w * w) + ((v - 1) * (v - 1)) * (v * v * v) * (19 * (v * v * v) - 26 * (v * v) + 19 * v - 4) * (w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (17 * (v * v * v * v) - 44 * (v * v * v) + 49 * (v * v) - 26 * v + 6) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (7 * (v * v * v) - 12 * (v * v) + 11 * v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1))) - 2 * N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v * v) * (6 * v - 5) * (w * w * w * w) + (v * v * v * v) * (8 * (v * v) - 13 * v + 7) * (w * w * w) - 2 * (v - 1) * (v * v) * (4 * (v * v * v) - 6 * (v * v) + 6 * v - 1) * (w * w) + (v - 1) * v * (6 * (v * v * v * v) - 15 * (v * v * v) + 20 * (v * v) - 13 * v + 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - v + 2)) + 2 * N3 * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * N * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - (v - 1) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * (v - 1) * v * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) + (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + 4 * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) - 4 * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    case 12:
        return std::log(1 - w) * (N3 * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 30.0l * (v * v) - 7 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) + 15 * (v * v * v * v) + 25 * (v * v * v) - 16 * (v * v) + 5 * v - 1) * (w * w * w * w) - 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 60 * (v * v * v * v) + 114 * (v * v * v) - 71 * (v * v) + 20 * v - 3) * (w * w * w) + (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 280 * (v * v * v * v * v) - 150 * (v * v * v * v) + 12 * (v * v * v) + 15 * (v * v) - 6 * v + 1) * (w * w) - 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 6 * (v * v * v * v) + 30.0l * (v * v * v) - 29 * (v * v) + 10 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (36 * (v * v * v * v) - 30.0l * (v * v * v) + 13 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (28 * (v * v * v * v) - 39 * (v * v * v) + 22 * (v * v) - 5 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (32 * (v * v * v * v * v * v) - 46 * (v * v * v * v * v) + (v * v * v * v) + 37 * (v * v * v) - 20 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (24 * (v * v * v * v * v * v) - 20 * (v * v * v * v * v) - 66 * (v * v * v * v) + 130 * (v * v * v) - 79 * (v * v) + 20 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v) - 204 * (v * v * v * v * v * v) + 292 * (v * v * v * v * v) - 138 * (v * v * v * v) - 12 * (v * v * v) + 23 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 32 * (v * v * v * v * v) + 4 * (v * v * v * v) + 46 * (v * v * v) - 43 * (v * v) + 14 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - N * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) + (v * v * v * v) * (28 * (v * v * v * v) - 14 * (v * v * v) + 3 * (v * v) - 2 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v) * (12 * (v * v * v * v) - 5 * (v * v * v) + (v * v) - 2 * v + 2) * (w * w * w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v * v) + 6 * (v * v * v * v * v) - 5 * (v * v * v * v) + 2 * (v * v * v) - (v * v) + 3 * v - 1) * (w * w * w * w) - 2 * (v * v) * (6 * (v * v * v * v * v) + 2 * (v * v * v) - 6 * (v * v) + 7 * v - 3) * (w * w * w) + (12 * (v * v * v * v * v * v) - 10 * (v * v * v * v) + 2 * (v * v * v) + 3 * (v * v) - 4 * v + 1) * (w * w) - 2 * (v - 1) * (6 * (v * v * v * v) - 5 * (v * v) + 4 * v - 1) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (28 * (v * v * v * v) + 6 * (v * v * v) - 17 * (v * v) - 2 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (12 * (v * v * v * v) + 35 * (v * v * v) - 53 * (v * v) + 12 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (4 * (v * v * v * v * v * v) + 72 * (v * v * v * v * v) - 111 * (v * v * v * v) + 42 * (v * v * v) - (v * v) + 3 * v - 1) * (w * w * w * w) + 2 * (v * v) * (58 * (v * v * v * v * v) - 86 * (v * v * v * v) + 20 * (v * v * v) + 18 * (v * v) - v - 3) * (w * w * w) - (32 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) - 124 * (v * v * v * v * v) + 178 * (v * v * v * v) - 98 * (v * v * v) + 23 * (v * v) - 4 * v + 1) * (w * w) + 2 * (v - 1) * (2 * (v * v) - 2 * v + 1) * (8 * (v * v * v) - 11 * (v * v) + 8 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v * v) * (v + 5) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (5 * (v * v) - 6 * v + 11) * (w * w * w * w * w) - (v * v * v * v) * (3 * (v * v * v * v) + 10 * (v * v * v) - 2 * (v * v) + 15 * v + 4) * (w * w * w * w) + 2 * (v * v * v) * (2 * (v * v * v * v) + 12 * (v * v * v) - 2 * (v * v) + 11 * v + 8) * (w * w * w) - 2 * CQ * ((v * v) * w - 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (((v - 1) * (v - 1)) * (v * v) * (w * w) - 2 * v * ((v * v) + 1) * w + ((v - 1) * (v - 1))) - (v * v) * (10 * (v * v * v * v) - 2 * (v * v * v) + 21 * (v * v) + 5 * v + 24) * (w * w) + v * (4 * (v * v * v * v) - 5 * (v * v * v) + 18 * (v * v) - 11 * v + 16) * w - ((v * v) - v + 1) * (3 * (v * v) - 5 * v + 4)) + 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * ((v * v) - 3 * v + 1) * (w * w * w * w * w) - CQ * (v - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (w * w * w) + 2 * (v - 1) * (v * v) * ((v * v) - 3 * v - 1) * (w * w) + v * (2 * (v * v * v) - 2 * (v * v) + 3 * v - 4) * w + 2 * (v * v * v) - 2 * (v * v) - v + 2) - (v * v * v * v) * (7 * (v * v * v) - 6 * (v * v) - 8 * v + 3) * (w * w * w * w) + (v * v * v) * (6 * (v * v * v * v) + 5 * (v * v * v) - 26 * (v * v) + 7 * v - 4) * (w * w * w) - (v * v) * (4 * (v * v * v * v * v) + 2 * (v * v * v) - 29 * (v * v) + 17 * v - 4) * (w * w) + v * (6 * (v * v * v * v * v) - 4 * (v * v * v * v) - 15 * (v * v * v) + 16 * (v * v) - 11 * v + 6) * w - (v - 1) * (4 * (v * v * v * v) - 4 * (v * v * v) - 5 * (v * v) + 8 * v - 5)) + 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v) + v - 1) * (w * w * w * w) + 2 * (v * v * v) * (3 * v - 2) * ((v * v) + v + 1) * (w * w * w) + CQ * v * (v * w - v + 1) * ((v * v) * (w * w) + v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) - 2 * (v * v) * ((v * v * v * v) + 8 * (v * v * v) - 11 * (v * v) + 6 * v - 2) * (w * w) + (v * v) * (10 * (v * v * v) - 18 * (v * v) + 14 * v - 5) * w - (v - 1) * (2 * (v * v * v) - 2 * (v * v) + 2 * v - 1)) + 4 * (CQ - 1) * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 4 * (CQ - 1) * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (2 * N * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 2 * (v * v * v * v * v) * (w * w * w * w) + 2 * (v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w) + 2 * (v * v * v) * (2 * v - 3) * (w * w) - 2 * v * (2 * v - 3) * (2 * (v * v) - 2 * v + 1) * w - 2 * (v * v) + 2 * v - 1) + CQ * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * w + 1)) - 2 * N4 * (v - 1) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * w - 1) * (4 * (v * v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v * v) * (w * w * w) + (v * v * v) * (5 * (v * v) - 6 * v + 9) * (w * w) - v * (v + 1) * ((v * v * v) - (v * v) + 3 * v + 1) * w + ((v + 1) * (v + 1)) * ((v * v) - v + 1)) + 2 * CQ * ((v * v) * w - 1) * (((v - 1) * (v - 1)) * (v * v) * (w * w) - 2 * v * ((v * v) + 1) * w + ((v - 1) * (v - 1)))) + 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (((v * v) * (w * w) - 2 * v * w + 1) * (4 * (v * v * v * v * v) * (w * w * w * w) - 7 * (v - 1) * (v * v * v * v) * (w * w * w) + (v * v) * (4 * (v * v * v) - 8 * (v * v) + 13 * v - 1) * (w * w) + v * (4 * (v * v * v * v) - 15 * (v * v * v) + 9 * (v * v) - 4 * v + 2) * w - (v - 1) * (4 * (v * v * v * v) - 14 * (v * v * v) + 14 * (v * v) - 9 * v + 1)) + CQ * (v - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (w * w * w) + 2 * (v - 1) * (v * v) * ((v * v) - 3 * v - 1) * (w * w) + v * (2 * (v * v * v) - 2 * (v * v) + 3 * v - 4) * w + 2 * (v * v * v) - 2 * (v * v) - v + 2)) - 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * w - 1) * ((v * v * v * v * v) * (w * w * w * w) - ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - (v - 1) * (v * v) * (5 * (v * v) - 5 * v + 6) * (w * w) + v * (4 * (v * v * v * v) - 7 * (v * v * v) + 2 * (v * v) + v - 1) * w - (v - 1) * (4 * (v * v * v) - 12 * (v * v) + 11 * v - 4)) + CQ * v * (v * w - v + 1) * ((v * v) * (w * w) + v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) - 2 * N3 * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (w * w * w) + (v * v) * (w * w) - v * w + 1) + 2 * v * (w - 1) * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 3 * v + 2) * (w * w) - (v * v) * w + 2 * (v * v) - 2 * v + 1)) - 4 * CQ * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 4 * CQ * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (N3 * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) + 3 * (v * v * v * v * v * v) * (2 * v - 1) * (8 * v - 3) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (34 * (v * v * v) - 43 * (v * v) + 14 * v + 1) * (w * w * w * w * w) + (v * v * v * v) * (60 * (v * v * v * v) - 80 * (v * v * v) - 2 * (v * v) + 46 * v - 15) * (w * w * w * w) - 2 * (v * v * v) * (8 * v - 5) * (2 * (v * v * v * v) - 6 * (v * v) + 6 * v - 1) * (w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 64 * (v * v * v * v) + 88 * (v * v * v) - 42 * (v * v) + 3) * (w * w) - 2 * (v - 1) * v * (8 * (v * v * v * v * v) - 16 * (v * v * v * v) + 2 * (v * v * v) + 22 * (v * v) - 19 * v + 5) * w + 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (5 * v - 2) * (w * w * w * w * w * w * w) - (v * v * v * v) * (52 * (v * v * v * v) - 50 * (v * v * v) + 17 * (v * v) - 4 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (42 * (v * v * v * v) - 59 * (v * v * v) + 24 * (v * v) - v + 2) * (w * w * w * w * w) - 2 * (v * v) * (44 * (v * v * v * v * v * v) - 64 * (v * v * v * v * v) - 9 * (v * v * v * v) + 59 * (v * v * v) - 26 * (v * v) + 5 * v - 1) * (w * w * w * w) + 2 * (v * v) * (28 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 98 * (v * v * v * v) + 180 * (v * v * v) - 101 * (v * v) + 22 * v - 3) * (w * w * w) - (16 * (v * v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v * v) - 260 * (v * v * v * v * v * v) + 380 * (v * v * v * v * v) - 178 * (v * v * v * v) - 16 * (v * v * v) + 27 * (v * v) - 6 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v) + 2 * (v * v * v * v) + 62 * (v * v * v) - 57 * (v * v) + 18 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 5 * v + 4) * (2 * (v * v) - 2 * v + 1)) - N * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (28 * (v * v) - 14 * v + 1) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (12 * (v * v * v) - 5 * (v * v) - 3 * v + 2) * (w * w * w * w * w) + (v * v * v * v) * (8 * (v * v * v * v) + 12 * (v * v * v) - 24 * (v * v) + 14 * v - 1) * (w * w * w * w) - 2 * (v * v * v) * (6 * (v * v * v * v) - 6 * (v * v * v) + 2 * (v * v) + 3 * v - 2) * (w * w * w) + 2 * (v * v) * (4 * (v * v * v * v) - 6 * (v * v * v) + 9 * (v * v) - 8 * v + 2) * (w * w) - 2 * (v - 1) * v * (2 * (v * v * v) + 2 * (v * v) - 3 * v + 1) * w + 2 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w * w) - (v * v * v * v) * (v + 1) * (28 * (v * v * v) - 18 * (v * v) - 3 * v + 1) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (12 * (v * v * v * v) + 43 * (v * v * v) - 67 * (v * v) + 18 * v + 2) * (w * w * w * w * w) - 2 * (v * v) * (4 * (v * v * v * v * v * v) + 82 * (v * v * v * v * v) - 137 * (v * v * v * v) + 62 * (v * v * v) - 5 * (v * v) + 3 * v - 1) * (w * w * w * w) + 2 * (v * v) * (62 * (v * v * v * v * v) - 100 * (v * v * v * v) + 30.0l * (v * v * v) + 22 * (v * v) - 5 * v - 3) * (w * w * w) - (32 * (v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v) - 144 * (v * v * v * v * v) + 230 * (v * v * v * v) - 142 * (v * v * v) + 35 * (v * v) - 4 * v + 1) * (w * w) + 2 * (v - 1) * (16 * (v * v * v * v * v) - 42 * (v * v * v * v) + 56 * (v * v * v) - 37 * (v * v) + 12 * v - 1) * w - 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (v + 2) * (w * w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) + 14 * (v * v) + 1) * (w * w * w * w * w) - (v * v * v) * (5 * (v * v * v * v * v) + 20 * (v * v * v * v) + 10 * (v * v * v) + 28 * (v * v) + 13 * v + 4) * (w * w * w * w) + 2 * (v * v) * (4 * (v * v * v * v * v) + 23 * (v * v * v * v) - 2 * (v * v * v) + 28 * (v * v) + 26 * v + 3) * (w * w * w) - 4 * CQ * ((v * v) * w - 1) * ((v * v) * (w * w) - 2 * v * w + 1) * (((v - 1) * (v - 1)) * (v * v) * (w * w) - 2 * v * ((v * v) + 1) * w + ((v - 1) * (v - 1))) - 2 * v * (13 * (v * v * v * v * v) - 10 * (v * v * v * v) + 30.0l * (v * v * v) + 4 * (v * v) + 39 * v + 2) * (w * w) + (16 * (v * v * v * v * v) - 31 * (v * v * v * v) + 68 * (v * v * v) - 42 * (v * v) + 52 * v + 1) * w - 9 * (v * v * v * v) + 24 * (v * v * v) - 38 * (v * v) + 28 * v - 13) + 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (2 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) + (v - 7) * (v * v * v * v * v * v) * (w * w * w * w * w) - CQ * (v - 1) * (v * w - v + 1) * ((v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (w * w * w) + 2 * (v - 1) * (v * v) * ((v * v) - 3 * v - 1) * (w * w) + v * (2 * (v * v * v) - 2 * (v * v) + 3 * v - 4) * w + 2 * (v * v * v) - 2 * (v * v) - v + 2) - (v * v * v) * (v + 1) * (4 * (v * v * v) - 10 * (v * v) + 2 * v - 1) * (w * w * w * w) + (v * v) * (12 * (v * v * v * v) - 35 * (v * v * v) + 17 * (v * v) - 7 * v - 1) * (w * w * w) - v * ((v * v * v * v * v * v) - 4 * (v * v * v * v * v) + 14 * (v * v * v * v) - 41 * (v * v * v) + 27 * (v * v) - 10 * v + 1) * (w * w) + (6 * (v * v * v * v * v) - 24 * (v * v * v * v) + 24 * (v * v * v) - 16 * (v * v) + 5 * v + 1) * w - (v - 1) * ((v * v * v * v) + (v * v * v) - 11 * (v * v) + 12 * v - 7)) + ((v - 1) * (v - 1)) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (6 * (v * v * v * v * v) * (w * w * w * w) - (v * v) * (13 * (v * v * v) + (v * v) + v - 1) * (w * w * w) + 2 * CQ * v * ((v * v) * (w * w) + v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + v * (5 * (v * v * v * v) + 17 * (v * v * v) - 9 * (v * v) + v - 2) * (w * w) - (14 * (v * v * v * v) - 17 * (v * v * v) + 7 * (v * v) - v - 1) * w - 3 * (v * v * v) + 3 * (v * v) - v - 1) + 4 * (CQ - 1) * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 4 * (CQ - 1) * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (4 * N3 * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v) * (2 * (v * v) - 4 * v + 3) * (w * w) + v * (2 * (v * v) - 4 * v + 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 4 * N * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (w * w * w) + (v * v * v) * (2 * v - 1) * (w * w) - v * (4 * (v * v) - 5 * v + 2) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 2 * N2 * (v - 1) * vC * w * (4 * (v * v * v * v) * (w * w * w) - 4 * (v * v * v) * (w * w) - (v * v) * (3 * v - 7) * w + 2 * (2 * (v * v * v * v) - 5 * (v * v * v) + 3 * (v * v) - v - 1)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) + 2 * N4 * (v - 1) * vC * w * (4 * (v * v * v * v) * (w * w * w) - (v * v * v) * (3 * v - 7) * (w * w) + 2 * (v * v) * (3 * (v * v) - 4 * v + 7) * w - ((v * v) - v + 1) * (2 * (v * v) - v + 3)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w) - (v * v) * (3 * v - 1) * w + 4 * (v * v * v) - 8 * (v * v) + 8 * v - 3) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1)) * std::log(1 - v * w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (2 * N3 * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 8 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + ((v - 1) * (v - 1)) * (v * v) * w * ((2 * v - 1) * w - 2 * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 2 * N2 * (v - 1) * vC * w * (4 * (v * v * v * v) * (w * w * w) - 2 * (v - 3) * (v * v * v) * (w * w) + (v * v) * (3 * (v * v) - 7 * v + 12) * w + (v - 2) * ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) + 2 * N4 * (v - 1) * vC * w * (4 * (v * v * v * v) * (w * w * w) - (v * v * v) * (5 * v - 9) * (w * w) + (v * v) * (5 * (v * v) - 10 * v + 13) * w - ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w) - (v * v) * (5 * v - 4) * w + 2 * (v - 1) * (2 * (v * v) - 3 * v + 2)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 2 * N * ((v - 1) * (v - 1)) * v * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v - 1) * (2 * (v * v * v) * (w * w * w) - 2 * (v * v) * (3 * v - 2) * (w * w) + (v - 1) * v * (8 * v - 5) * w - 2 * ((v - 1) * (v - 1)) * (2 * v - 1)) + CQ * v * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1)) * std::log(v * w - v + 1) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N2 * (v - 1) * vC * w * ((v * v * v) * ((v * v) + v + 2) * (w * w * w) - v * (4 * (v * v * v * v) - 6 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w) + (7 * (v * v * v * v * v) - 19 * (v * v * v * v) + 31 * (v * v * v) - 21 * (v * v) + 9 * v - 1) * w - (v - 1) * ((v * v) - v + 3) * (3 * (v * v) - 3 * v + 2)) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) + N3 * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (2 * (v - 1) * (v * v * v * v) * (w * w * w * w) - (v * v * v) * (2 * v - 1) * (4 * v - 3) * (w * w * w) + (v * v) * (12 * (v * v * v) - 16 * (v * v) + 4 * v + 3) * (w * w) - 2 * v * (v + 1) * (4 * (v * v * v) - 8 * (v * v) + 6 * v - 1) * w + 2 * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) - CQ * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * (v * w - 1) * ((w * w) - 2 * w + 2)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) + ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v) * (w * w * w * w) - (v * v) * (15 * (v * v * v) - 13 * (v * v) + 3 * v - 1) * (w * w * w) + 2 * (v * v) * (9 * (v * v * v) - 12 * (v * v) + 5 * v - 1) * (w * w) - (9 * (v * v * v * v * v) - 20 * (v * v * v * v) + 17 * (v * v * v) - 9 * (v * v) + 1) * w + (v - 1) * ((v * v * v) - 5 * (v * v) + 7 * v - 5)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) + N * ((v - 1) * (v - 1)) * vC * (2 * ((v * v * v) * (4 * v - 3) * (w * w * w) - (v * v) * (8 * (v * v) - 10 * v + 5) * (w * w) + 2 * v * (2 * (v * v) - v + 1) * w - 2 * (2 * (v * v) - 2 * v + 1)) + CQ * (2 * (v * v) - 2 * v + 1) * (v * w - 1) * ((w * w) - 2 * w + 2)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) + N4 * (v - 1) * vC * w * (2 * (v - 1) * (v * v * v * v) * (w * w * w) - v * ((v * v * v * v) + 10 * (v * v * v) + 1) * (w * w) + ((v * v * v * v * v) + 7 * (v * v * v * v) - 4 * (v * v * v) + 12 * (v * v) + 7 * v + 1) * w - 5 * (v * v * v * v) + 6 * (v * v * v) - 16 * (v * v) + 10 * v - 7) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1)) * std::log(w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (N4 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (6 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 6 * (v * v * v * v * v * v * v * v * v) * (3 * v + 2) * (w * w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v * v) * (10 * (v * v * v) + 2 * (v * v) - 6 * v - 3) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (23 * (v * v * v * v) - 97 * (v * v * v) + 145 * (v * v) - 167 * v - 10) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (14 * (v * v * v * v * v) - 113 * (v * v * v * v) + 297 * (v * v * v) - 378 * (v * v) + 106 * v + 5) * (w * w * w * w * w) - (v * v * v * v) * (13 * (v * v * v * v * v * v) - 159 * (v * v * v * v * v) + 668 * (v * v * v * v) - 1072 * (v * v * v) + 475 * (v * v) + 11 * v + 22) * (w * w * w * w) - 2 * (v * v * v) * (14 * (v * v * v * v * v * v) - 164 * (v * v * v * v * v) + 452 * (v * v * v * v) - 474 * (v * v * v) + 226 * (v * v) - 62 * v + 1) * (w * w * w) - (v * v) * (78 * (v * v * v * v * v * v) - 406 * (v * v * v * v * v) + 835 * (v * v * v * v) - 877 * (v * v * v) + 503 * (v * v) - 113 * v - 14) * (w * w) - 2 * (v - 1) * v * (14 * (v * v * v * v * v) - 56 * (v * v * v * v) + 79 * (v * v * v) - 60 * (v * v) + 18 * v - 1) * w - ((v - 1) * (v - 1)) * (13 * (v * v * v * v) - 33 * (v * v * v) + 35 * (v * v) - 11 * v + 2)) - N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (6 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 6 * (v * v * v * v * v * v * v) * (4 * v - 1) * (w * w * w * w * w * w) + (v * v * v * v) * (20 * (v * v * v * v) + 11 * (v * v * v) - 70 * (v * v) + 9 * v - 6) * (w * w * w * w * w) + (v * v * v * v) * (4 * (v * v * v * v) - 70 * (v * v * v) + 207 * (v * v) - 64 * v + 19) * (w * w * w * w) - (v * v) * (2 * (v * v * v * v * v * v) - 42 * (v * v * v * v * v) + 111 * (v * v * v * v) + 76 * (v * v * v) - 123 * (v * v) + 30.0l * v - 12) * (w * w * w) - (v * v) * (4 * (v * v * v * v * v * v) + 15 * (v * v * v * v * v) - 51 * (v * v * v * v) - 46 * (v * v * v) + 119 * (v * v) - 61 * v + 26) * (w * w) + (v - 1) * (20 * (v * v * v * v * v * v) - 58 * (v * v * v * v * v) + 82 * (v * v * v * v) - 91 * (v * v * v) + 68 * (v * v) - 15 * v + 6) * w - ((v - 1) * (v - 1)) * (4 * (v * v * v * v) - 3 * (v * v * v) - (v * v) + 13 * v - 7)) + 3 * N * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (4 * (v - 1) * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - (v * v * v * v) * (12 * (v * v * v * v) - 15 * (v * v * v) + 6 * (v * v) - 7 * v + 2) * (w * w * w * w * w * w) + (v * v * v * v) * (12 * (v * v * v * v) - 9 * (v * v * v) - 3 * (v * v) - 11 * v + 7) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v * v * v) + 4 * (v * v * v * v * v) - 13 * (v * v * v * v) + 13 * (v * v * v) - 14 * (v * v) + 9 * v - 2) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (3 * (v * v * v * v) - 7 * (v * v * v) + 25 * (v * v) - 22 * v + 5) * (w * w * w) + (v - 1) * (4 * (v * v * v * v * v) - 36 * (v * v * v * v) + 30 * (v * v * v) + 5 * (v * v) - 9 * v + 2) * (w * w) + ((v - 1) * (v - 1)) * (6 * (v * v * v) + 8 * (v * v) - 9 * v + 3) * w - 4 * ((v - 1) * (v - 1) * (v - 1)) * v) + 3 * AL * N3 * ((v - 1) * (v - 1)) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v) - 4 * (v * v) + 4 * v - 1) * (w * w * w * w) + 2 * v * (2 * (v * v) - v + 1) * (2 * (v * v * v) - 2 * (v * v) - 2 * v + 1) * (w * w * w) - (8 * (v * v * v * v * v * v) - 16 * (v * v * v * v) + 16 * (v * v * v) - 10 * (v * v) + 1) * (w * w) + 2 * (v - 1) * (8 * (v * v * v * v) - 4 * (v * v * v) + 2 * (v * v) + 2 * v - 1) * w - 4 * (v - 1) * v * (2 * (v * v) - 2 * v + 1)) - 3 * N3 * ((v - 1) * (v - 1)) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (8 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) - (v * v) * (32 * (v * v * v * v) - 59 * (v * v * v) + 28 * (v * v) - 5 * v + 2) * (w * w * w * w) + (v - 1) * v * (64 * (v * v * v * v) - 101 * (v * v * v) + 48 * (v * v) - 13 * v + 4) * (w * w * w) - (v - 1) * (80 * (v * v * v * v * v) - 180 * (v * v * v * v) + 156 * (v * v * v) - 59 * (v * v) + 13 * v - 2) * (w * w) + ((v - 1) * (v - 1)) * (56 * (v * v * v * v) - 106 * (v * v * v) + 84 * (v * v) - 21 * v + 3) * w - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * (2 * (v * v) - 3 * v + 2)) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 4 * CQ * N3 * ((v - 1) * (v - 1)) * ((2 * (v * v) - 2 * v + 1) * (2 * (v * v) - 2 * v + 1)) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) + 4 * CQ * N * ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v) * (w * w * w * w * w) + 15 * (v * v * v * v) * (w * w * w * w) - 20 * (v * v * v) * (w * w * w) + 15 * (v * v) * (w * w) - 6 * v * w + 1) - 4 * GTR * N3 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v - 3) * (v - 1) * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (2 * (v * v * v * v) - 13 * (v * v * v) + 21 * (v * v) - 7 * v + 1) * (w * w * w * w) - (v * v * v) * (8 * (v * v * v * v) - 37 * (v * v * v) + 42 * (v * v) - 21 * v - 4) * (w * w * w) - (v * v) * (24 * (v * v * v * v) - 61 * (v * v * v) + 56 * (v * v) - 13 * v + 6) * (w * w) - 2 * v * (4 * (v * v * v * v) - 7 * (v * v * v) + (v * v) + 2 * v - 2) * w - ((v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 3 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) + (v * v * v) * (2 * (v * v * v) - (v * v) - v - 2) * (w * w * w * w) - (v - 1) * (v * v) * (7 * (v * v * v) + 8 * v + 2) * (w * w * w) + v * (3 * (v * v * v * v * v) - 8 * (v * v * v * v) + 20 * (v * v * v) - 13 * (v * v) - 6 * v + 2) * (w * w) + (2 * (v * v * v * v * v) - 7 * (v * v * v * v) - (v * v * v) + 12 * (v * v) - 2 * v - 2) * w + (v - 1) * (3 * (v * v * v) - 7 * (v * v) + 5 * v - 3)) - 3 * AL * N * ((v - 1) * (v - 1)) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w) + (v * v) * (4 * (v * v * v * v) + 2 * (v * v) + 2 * v - 1) * (w * w * w) - 2 * v * (2 * (v * v * v * v) - 2 * (v * v * v) + 2 * (v * v) + v - 1) * (w * w) - (4 * (v * v * v) - 8 * (v * v) + 2 * v + 1) * w + 2 * (v - 1) * (2 * (v * v) - 1)) + 4 * GTR * N * ((v - 1) * (v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (2 * (v * v) - 4 * v + 1) * (w * w * w * w) + 2 * (v * v * v) * ((v * v) + 11 * v + 2) * (w * w * w) - 2 * (v * v) * (18 * (v * v) - 7 * v + 3) * (w * w) + v * (2 * (v * v) - 7 * v + 4) * w - 2 * (v * v) + 2 * v - 1) - 6 * AL * N2 * ((v - 1) * (v - 1)) * v * vC * w * ((v * v) * (w * w) + v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 6 * AL * ((v - 1) * (v - 1)) * v * vC * w * ((v * v) * (w * w) + v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + 12 * AL * GTR * N3 * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 12 * AL * GTR * N * ((v - 1) * (v - 1)) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * (-N4 * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (v + 2) * (w * w * w * w * w * w) + (v * v * v * v) * (9 * (v * v * v * v) - 8 * (v * v * v) + 22 * (v * v) + 1) * (w * w * w * w * w) - (v * v * v) * (5 * (v * v * v * v * v) + 12 * (v * v * v * v) + 6 * (v * v * v) + 32 * (v * v) + 5 * v + 4) * (w * w * w * w) + 2 * (v * v) * (2 * (v * v * v * v * v) + 19 * (v * v * v * v) + 4 * (v * v * v) + 20 * (v * v) + 10 * v + 3) * (w * w * w) - 2 * v * (7 * (v * v * v * v * v) + 2 * (v * v * v * v) + 20 * (v * v * v) + 8 * (v * v) + 15 * v + 2) * (w * w) + (4 * (v * v * v * v * v) + 9 * (v * v * v * v) + 16 * (v * v * v) - 2 * (v * v) + 20 * v + 1) * w - 5 * (v * v * v * v) + 8 * (v * v * v) - 14 * (v * v) + 8 * v - 5) - N3 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (8 * (v * v * v * v) - 8 * (v * v * v) + 12 * (v * v) - 4 * v + 1) * (w * w * w * w) - 2 * v * (4 * (v * v * v * v * v) - 2 * (v * v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w) + (8 * (v * v * v * v * v * v) - 8 * (v * v * v * v) + 16 * (v * v * v) - 2 * (v * v) + 1) * (w * w) - 2 * (4 * (v * v) - 2 * v + 1) * (2 * (v * v * v) - 2 * (v * v) + v + 1) * w + 4 * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1)) + N * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 2 * (v * v * v * v * v) * (2 * v + 1) * (w * w * w * w * w) + (v * v) * (4 * (v * v * v * v) + 6 * (v * v) - 2 * v + 1) * (w * w * w * w) - 2 * v * (2 * (v * v * v * v) + 2 * (v * v * v) + 2 * (v * v) - v + 1) * (w * w * w) + (2 * v + 1) * (4 * (v * v * v) + 1) * (w * w) - 2 * (6 * (v * v * v) - 2 * (v * v) + v + 1) * w + 4 * (2 * (v * v) - 2 * v + 1)) + 2 * N2 * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v * v) * (v + 5) * (w * w * w * w) + (v * v) * (3 * (v * v * v * v) - 2 * (v * v * v) + 9 * (v * v) - v + 1) * (w * w * w) - v * ((v * v * v * v * v) + 7 * (v * v * v * v) - 6 * (v * v * v) + 9 * (v * v) + v + 2) * (w * w) + (4 * (v * v * v * v * v) - 3 * (v * v * v * v) + 8 * (v * v * v) - 3 * (v * v) + 5 * v + 1) * w - (v * v * v * v) + (v * v * v) - 5 * (v * v) + 4 * v - 3) - (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v * v * v * v) * (w * w * w * w) - (v * v) * (3 * (v * v * v) - (v * v) - v + 1) * (w * w * w) + (v - 1) * v * (3 * (v * v * v) - 6 * (v * v) - v - 2) * (w * w) + (6 * (v * v * v * v) - 9 * (v * v * v) + 3 * (v * v) - v - 1) * w + 3 * (v * v * v) - 3 * (v * v) + v + 1) - 4 * GTR * N3 * (v - 1) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + 4 * GTR * N * (v - 1) * (v * v) * vC * (w * w) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1))) + std::log(S / q2_fragm) * (-N4 * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (4 * (v * v * v * v * v * v) * (w * w * w * w * w) - 4 * (v * v * v * v * v) * (3 * v - 4) * (w * w * w * w) + 8 * (v * v * v * v) * (2 * (v * v) - 5 * v + 4) * (w * w * w) - 2 * (v - 1) * (v * v) * (7 * (v * v * v) - 15 * (v * v) + 17 * v - 1) * (w * w) + ((v - 1) * (v - 1)) * v * (7 * (v * v * v) - 14 * (v * v) + 19 * v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 2 * N2 * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - 2 * (v * v * v * v * v) * (3 * v - 4) * (w * w * w * w) + (v * v * v * v) * (9 * (v * v) - 22 * v + 17) * (w * w * w) - (v - 1) * (v * v) * (10 * (v * v * v) - 21 * (v * v) + 21 * v - 2) * (w * w) + ((v - 1) * (v - 1)) * v * (6 * (v * v * v) - 13 * (v * v) + 15 * v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - N3 * (v - 1) * vC * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 8 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 8 * ((v - 1) * (v - 1) * (v - 1)) * v * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - ((v - 1) * (v - 1)) * vC * w * (2 * (v * v * v * v) * (w * w * w) - 2 * (v * v) * (3 * (v * v) - 3 * v + 1) * (w * w) + (v - 1) * v * (5 * (v * v) - 7 * v + 4) * w - ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) + N * (v - 1) * (v * v) * vC * (w * w) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1)));
    case 13:
        return std::log(1 - w) * (-N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v * v * v) * (5 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (13 * (v * v * v * v * v * v) - 13 * (v * v * v * v * v) + 19 * (v * v * v * v) - 14 * (v * v * v) + 12 * (v * v) - 6 * v + 2) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (23 * (v * v * v * v * v * v) - 37 * (v * v * v * v * v) + 67 * (v * v * v * v) - 62 * (v * v * v) + 36 * (v * v) - 6 * v + 2) * (w * w * w * w * w * w * w) + (v * v * v * v) * (120 * (v * v * v * v * v * v * v * v) - 227 * (v * v * v * v * v * v * v) + 440 * (v * v * v * v * v * v) - 378 * (v * v * v * v * v) + 45 * (v * v * v * v) + 240 * (v * v * v) - 192 * (v * v) + 96 * v - 24) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (112 * (v * v * v * v * v * v) - 178 * (v * v * v * v * v) + 275 * (v * v * v * v) - 24 * (v * v * v) - 413 * (v * v) + 510 * v - 170) * (w * w * w * w * w) + (v * v) * (64 * (v * v * v * v * v * v * v * v * v * v) - 7 * (v * v * v * v * v * v * v * v * v) - 194 * (v * v * v * v * v * v * v * v) + 750 * (v * v * v * v * v * v * v) - 1245 * (v * v * v * v * v * v) + 1020 * (v * v * v * v * v) - 228 * (v * v * v * v) - 240 * (v * v * v) + 240 * (v * v) - 120 * v + 24) * (w * w * w * w) - (v * v) * (16 * (v * v * v * v * v * v * v * v * v * v) + 96 * (v * v * v * v * v * v * v * v * v) - 373 * (v * v * v * v * v * v * v * v) + 838 * (v * v * v * v * v * v * v) - 1161 * (v * v * v * v * v * v) + 1004 * (v * v * v * v * v) - 596 * (v * v * v * v) + 368 * (v * v * v) - 272 * (v * v) + 120 * v - 24) * (w * w * w) + (v - 1) * (48 * (v * v * v * v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v * v * v * v) - 29 * (v * v * v * v * v * v * v * v) + 325 * (v * v * v * v * v * v * v) - 662 * (v * v * v * v * v * v) + 793 * (v * v * v * v * v) - 563 * (v * v * v * v) + 208 * (v * v * v) + 8 * (v * v) - 40 * v + 8) * (w * w) - ((v - 1) * (v - 1)) * (48 * (v * v * v * v * v * v * v * v) - 128 * (v * v * v * v * v * v * v) + 275 * (v * v * v * v * v * v) - 392 * (v * v * v * v * v) + 457 * (v * v * v * v) - 358 * (v * v * v) + 194 * (v * v) - 64 * v + 16) * w + 16 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v * v * v) - 3 * (v * v * v * v * v) + 7 * (v * v * v * v) - 11 * (v * v * v) + 13 * (v * v) - 9 * v + 3)) - 8 * (v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) + 20 * (v * v * v * v * v * v * v * v * v * v) * (2 * (v * v) - v + 1) * (w * w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (26 * (v * v * v * v * v * v) - 31 * (v * v * v * v * v) + 34 * (v * v * v * v) - 8 * (v * v * v) + 9 * (v * v) - 6 * v + 2) * (w * w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (92 * (v * v * v * v * v * v) - 171 * (v * v * v * v * v) + 184 * (v * v * v * v) - 14 * (v * v * v) - 23 * (v * v) + 36 * v - 12) * (w * w * w * w * w * w * w) - (v * v * v * v) * (240 * (v * v * v * v * v * v * v * v) - 529 * (v * v * v * v * v * v * v) + 492 * (v * v * v * v * v * v) + 166 * (v * v * v * v * v) - 337 * (v * v * v * v) + 372 * (v * v * v) - 236 * (v * v) + 96 * v - 24) * (w * w * w * w * w * w) + (v * v * v * v) * (224 * (v * v * v * v * v * v * v * v) - 444 * (v * v * v * v * v * v * v) + 113 * (v * v * v * v * v * v) + 786 * (v * v * v * v * v) - 607 * (v * v * v * v) - 12 * (v * v * v) + 452 * (v * v) - 384 * v + 96) * (w * w * w * w * w) - (v * v) * (128 * (v * v * v * v * v * v * v * v * v * v) - 73 * (v * v * v * v * v * v * v * v * v) - 726 * (v * v * v * v * v * v * v * v) + 1934 * (v * v * v * v * v * v * v) - 1699 * (v * v * v * v * v * v) + 552 * (v * v * v * v * v) + 432 * (v * v * v * v) - 672 * (v * v * v) + 348 * (v * v) - 120 * v + 24) * (w * w * w * w) + (v * v) * (32 * (v * v * v * v * v * v * v * v * v * v) + 176 * (v * v * v * v * v * v * v * v * v) - 951 * (v * v * v * v * v * v * v * v) + 1822 * (v * v * v * v * v * v * v) - 1601 * (v * v * v * v * v * v) + 976 * (v * v * v * v * v) - 932 * (v * v * v * v) + 1240 * (v * v * v) - 1210 * (v * v) + 600 * v - 120) * (w * w * w) - (v - 1) * (96 * (v * v * v * v * v * v * v * v * v * v) - 160 * (v * v * v * v * v * v * v * v * v) - 191 * (v * v * v * v * v * v * v * v) + 1091 * (v * v * v * v * v * v * v) - 1554 * (v * v * v * v * v * v) + 1303 * (v * v * v * v * v) - 565 * (v * v * v * v) + 64 * (v * v * v) + 44 * (v * v) - 40 * v + 8) * (w * w) + ((v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v * v * v) - 336 * (v * v * v * v * v * v * v) + 621 * (v * v * v * v * v * v) - 650 * (v * v * v * v * v) + 573 * (v * v * v * v) - 432 * (v * v * v) + 368 * (v * v) - 192 * v + 48) * w - 32 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (((v * v) - v + 1) * ((v * v) - v + 1))) + 2 * N2 * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v * v) * (5 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (22 * (v * v) - 13 * v + 13) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (26 * (v * v * v * v) - 11 * (v * v * v) + 15 * (v * v) - 8 * v + 4) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (8 * (v * v * v * v) + 5 * (v * v * v) + 3 * (v * v) - 16 * v + 8) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v) + 21 * (v * v * v * v * v) + 10 * (v * v * v * v) - 72 * (v * v * v) + 61 * (v * v) - 30.0l * v + 10) * (w * w * w * w) + (v - 1) * (v * v * v * v) * (9 * (v * v * v * v) + 32 * (v * v * v) - 35 * (v * v) + 6 * v - 3) * (w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (13 * (v * v * v * v) + 15 * (v * v * v) - 19 * (v * v) + 8 * v - 4) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (9 * (v * v) + 2 * v - 2) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - (v * w - 1) * (v * w - v + 1) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (4 * (v * v) - 3 * v + 3) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (28 * (v * v) - 31 * v + 31) * (w * w * w * w * w) - (v * v * v * v) * (24 * (v * v * v * v) - 15 * (v * v * v) - (v * v) + 32 * v - 16) * (w * w * w * w) + (v * v * v * v) * (8 * (v * v * v * v) + 20 * (v * v * v) - 41 * (v * v) + 42 * v - 21) * (w * w * w) - 2 * (v - 1) * (v * v) * (8 * (v * v * v * v) + 5 * (v * v * v) - 16 * (v * v) + 22 * v - 11) * (w * w) + 4 * ((v - 1) * (v - 1)) * (v * v) * (4 * (v * v) - 3 * v + 3) * w - 2 * ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - v + 1))) - ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + CQ * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (v + 2) * (3 * v - 2) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (7 * (v * v) + 27 * v - 27) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) + 37 * (v * v * v) - 43 * (v * v) + 12 * v - 6) * (w * w * w * w) + (v * v * v * v) * ((v * v * v * v) + 25 * (v * v * v) - 27 * (v * v) + 4 * v - 2) * (w * w * w) - (v - 1) * (v * v * v * v) * (7 * (v * v) + 10 * v - 10) * (w * w) + ((v - 1) * (v - 1)) * (v * v) * (7 * (v * v) + v - 1) * w - ((v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - 18 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (8 * (v * v) + 5 * v - 5) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (29 * (v * v) + 63 * v - 63) * (w * w * w * w * w) + (v * v * v * v) * (14 * (v * v * v * v) + 79 * (v * v * v) - 73 * (v * v) - 12 * v + 6) * (w * w * w * w) - (v * v * v * v) * (3 * (v * v * v * v) + 49 * (v * v * v) - 27 * (v * v) - 44 * v + 22) * (w * w * w) + (v - 1) * (v * v) * ((v * v) + 2 * v - 2) * (13 * (v * v) + 2 * v - 2) * (w * w) - ((v - 1) * (v - 1)) * (v * v) * (13 * (v * v) + 5 * v - 5) * w + ((v - 1) * (v - 1) * (v - 1)) * (5 * (v * v) - 2 * v + 2))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (v - 1) * (v * w - v + 1) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (2 * (v * v) + 3 * v + 2) * (w * w * w * w * w) - 4 * (v * v * v) * (4 * (v * v * v * v) + 3 * (v * v * v) + 5 * (v * v) - 8 * v + 4) * (w * w * w * w) + (v * v) * (16 * (v * v * v * v) + 4 * (v * v * v) + 69 * (v * v) - 112 * v + 48) * (w * w * w) - 2 * v * (4 * (v * v * v * v) - (v * v * v) + 50 * (v * v) - 72 * v + 24) * (w * w) + (2 * (v * v * v * v) - 2 * (v * v * v) + 65 * (v * v) - 80 * v + 16) * w - 16 * (v - 1)) + 2 * ((v * v) * (w * w) - 2 * v * w + 1) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w) - 16 * (v * v * v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w) + (v * v * v * v * v) * (28 * (v * v * v) - 47 * (v * v) + 48 * v + 7) * (w * w * w * w) - 2 * (v * v) * (12 * (v * v * v * v * v * v) - 26 * (v * v * v * v * v) + 36 * (v * v * v * v) - 3 * (v * v * v) - 4 * (v * v) + 13 * v - 4) * (w * w * w) + (v * v * v) * (8 * (v * v * v * v * v) - 11 * (v * v * v * v) + 29 * (v * v * v) + 7 * v + 7) * (w * w) - (8 * (v * v * v * v * v * v * v) - 3 * (v * v * v * v * v * v) + 7 * (v * v * v * v * v) + 17 * (v * v * v * v) - 37 * (v * v * v) + 50 * (v * v) - 34 * v + 8) * w + 8 * (v - 1) * (v + 1) * (((v * v) - v + 1) * ((v * v) - v + 1)))) - 2 * N2 * (v - 1) * v * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (v - 1) * v * (v * w - v + 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 4 * (v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + (v * v * v * v) * (4 * (v * v) + 6 * v + 5) * (w * w * w * w) - (v * v * v) * (8 * (v * v) + 8 * v + 3) * (w * w * w) + 2 * (v * v) * (5 * (v * v) + v + 2) * (w * w) - v * (6 * (v * v) - 2 * v + 3) * w + 2 * (v * v) - 2 * v + 1) + ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (4 * (v * v * v * v * v * v) * (w * w * w * w) - 4 * (v * v * v * v) * (3 * (v * v) - 3 * v + 2) * (w * w * w) + (v * v * v) * (16 * (v * v * v) - 33 * (v * v) + 37 * v - 12) * (w * w) - (v - 1) * v * (8 * (v * v * v * v) - 14 * (v * v * v) + 16 * (v * v) - v + 1) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v + 1))) + ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + CQ * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * (2 * (v * v) * (w * w) - 2 * v * w + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (-N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (4 * (v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v * v * v) * (5 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v * v * v * v * v) * (11 * (v * v) - 7 * v + 7) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (13 * (v * v * v * v * v * v) - 7 * (v * v * v * v * v) + 7 * (v * v * v * v) + 8 * (v * v * v) - 24 * (v * v) + 24 * v - 8) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (32 * (v * v * v * v * v * v) + 13 * (v * v * v * v * v) + 8 * (v * v * v * v) + 22 * (v * v * v) - 171 * (v * v) + 192 * v - 64) * (w * w * w * w * w * w) - (v * v * v * v) * (8 * (v * v * v * v * v * v * v * v) + 38 * (v * v * v * v * v * v * v) + 35 * (v * v * v * v * v * v) - 160 * (v * v * v * v * v) + 211 * (v * v * v * v) - 426 * (v * v * v) + 590 * (v * v) - 384 * v + 96) * (w * w * w * w * w) + (v - 1) * (v * v * v * v) * (17 * (v * v * v * v * v * v) + 87 * (v * v * v * v * v) - 107 * (v * v * v * v) + 136 * (v * v * v) - 308 * (v * v) + 288 * v - 96) * (w * w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (35 * (v * v * v * v * v * v) + 84 * (v * v * v * v * v) - 188 * (v * v * v * v) + 304 * (v * v * v) - 392 * (v * v) + 288 * v - 96) * (w * w * w) + ((v - 1) * (v - 1) * (v - 1)) * (v * v * v * v) * (59 * (v * v) - 45 * v + 45) * (w * w) - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (51 * (v * v * v * v) - 98 * (v * v * v) + 130 * (v * v) - 64 * v + 32) * w + 16 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - 8 * (v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) + 16 * (v * v * v * v * v * v * v * v * v * v) * (3 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (144 * (v * v * v * v * v * v) - 199 * (v * v * v * v * v) + 219 * (v * v * v * v) - 44 * (v * v * v) + 32 * (v * v) - 12 * v + 4) * (w * w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (68 * (v * v * v * v * v * v) - 131 * (v * v * v * v * v) + 135 * (v * v * v * v) + 2 * (v * v * v) - 26 * (v * v) + 30.0l * v - 10) * (w * w * w * w * w * w * w) - (v * v * v * v) * (344 * (v * v * v * v * v * v * v * v) - 741 * (v * v * v * v * v * v * v) + 573 * (v * v * v * v * v * v) + 460 * (v * v * v * v * v) - 552 * (v * v * v * v) + 420 * (v * v * v) - 196 * (v * v) + 48 * v - 12) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (144 * (v * v * v * v * v * v * v * v) - 265 * (v * v * v * v * v * v * v) - 62 * (v * v * v * v * v * v) + 729 * (v * v * v * v * v) - 486 * (v * v * v * v) - 39 * (v * v * v) + 321 * (v * v) - 264 * v + 66) * (w * w * w * w * w) - (v * v) * (144 * (v * v * v * v * v * v * v * v * v * v) - 34 * (v * v * v * v * v * v * v * v * v) - 1130 * (v * v * v * v * v * v * v * v) + 2671 * (v * v * v * v * v * v * v) - 2073 * (v * v * v * v * v * v) + 537 * (v * v * v * v * v) + 437 * (v * v * v * v) - 600 * (v * v * v) + 240 * (v * v) - 60 * v + 12) * (w * w * w * w) + 2 * (v * v) * (16 * (v * v * v * v * v * v * v * v * v * v) + 104 * (v * v * v * v * v * v * v * v * v) - 569 * (v * v * v * v * v * v * v * v) + 1019 * (v * v * v * v * v * v * v) - 730 * (v * v * v * v * v * v) + 331 * (v * v * v * v * v) - 437 * (v * v * v * v) + 712 * (v * v * v) - 718 * (v * v) + 360 * v - 72) * (w * w * w) - 2 * (v - 1) * (48 * (v * v * v * v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v * v * v * v) - 165 * (v * v * v * v * v * v * v * v) + 730 * (v * v * v * v * v * v * v) - 997 * (v * v * v * v * v * v) + 846 * (v * v * v * v * v) - 422 * (v * v * v * v) + 108 * (v * v * v) - 12 * (v * v) - 10 * v + 2) * (w * w) + 2 * ((v - 1) * (v - 1)) * (48 * (v * v * v * v * v * v * v * v) - 184 * (v * v * v * v * v * v * v) + 338 * (v * v * v * v * v * v) - 351 * (v * v * v * v * v) + 309 * (v * v * v * v) - 233 * (v * v * v) + 199 * (v * v) - 104 * v + 26) * w - 16 * ((v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (2 * (v * v) - 5 * v + 5)) + 2 * N2 * (v - 1) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (v * v) * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v * v) * (5 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (22 * (v * v) - 13 * v + 13) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (26 * (v * v * v * v) - 11 * (v * v * v) + 15 * (v * v) - 8 * v + 4) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (8 * (v * v * v * v) + 5 * (v * v * v) + 3 * (v * v) - 16 * v + 8) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v) + 21 * (v * v * v * v * v) + 10 * (v * v * v * v) - 72 * (v * v * v) + 61 * (v * v) - 30.0l * v + 10) * (w * w * w * w) + (v - 1) * (v * v * v * v) * (9 * (v * v * v * v) + 32 * (v * v * v) - 35 * (v * v) + 6 * v - 3) * (w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (13 * (v * v * v * v) + 15 * (v * v * v) - 19 * (v * v) + 8 * v - 4) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (9 * (v * v) + 2 * v - 2) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - (v * w - 1) * (v * w - v + 1) * (4 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v) * (4 * (v * v) - 3 * v + 3) * (w * w * w * w * w * w) + (v * v * v * v) * (28 * (v * v * v * v * v * v) - 30.0l * (v * v * v * v * v) + 27 * (v * v * v * v) + 8 * (v * v * v) - 9 * (v * v) + 6 * v - 2) * (w * w * w * w * w) - (v * v * v * v) * (24 * (v * v * v * v * v * v) - 15 * (v * v * v * v * v) - 2 * (v * v * v * v) + 40 * (v * v * v) - 35 * (v * v) + 18 * v - 6) * (w * w * w * w) + (v * v) * (8 * (v * v * v * v * v * v * v * v) + 19 * (v * v * v * v * v * v * v) - 35 * (v * v * v * v * v * v) + 32 * (v * v * v * v * v) - 12 * (v * v * v * v) - 16 * (v * v * v) + 24 * (v * v) - 16 * v + 4) * (w * w * w) - (v - 1) * (v * v) * (16 * (v * v * v * v * v * v) + 13 * (v * v * v * v * v) - 37 * (v * v * v * v) + 56 * (v * v * v) - 48 * (v * v) + 24 * v - 8) * (w * w) + ((v - 1) * (v - 1)) * (18 * (v * v * v * v * v * v) - 13 * (v * v * v * v * v) + 14 * (v * v * v * v) - 5 * (v * v) + 6 * v - 2) * w - ((v - 1) * (v - 1) * (v - 1)) * (6 * (v * v * v * v) - 5 * (v * v * v) + 7 * (v * v) - 4 * v + 2))) - ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (8 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) + CQ * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (v + 2) * (3 * v - 2) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (7 * (v * v) + 27 * v - 27) * (w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v) + 37 * (v * v * v) - 43 * (v * v) + 12 * v - 6) * (w * w * w * w) + (v * v * v * v) * ((v * v * v * v) + 25 * (v * v * v) - 27 * (v * v) + 4 * v - 2) * (w * w * w) - (v - 1) * (v * v * v * v) * (7 * (v * v) + 10 * v - 10) * (w * w) + ((v - 1) * (v - 1)) * (v * v) * (7 * (v * v) + v - 1) * w - ((v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - (v * v * v * v * v * v) * (35 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (31 * (v * v) + 12 * v - 12) * (w * w * w * w * w * w) - 3 * (v * v * v * v) * (19 * (v * v * v * v) + 30.0l * (v * v * v) - 32 * (v * v) + 4 * v - 2) * (w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (14 * (v * v) + 61 * v - 61) * (w * w * w * w) - (v * v) * (6 * (v * v * v * v * v * v) + 80 * (v * v * v * v * v) - 49 * (v * v * v * v) - 68 * (v * v * v) + 49 * (v * v) - 18 * v + 6) * (w * w * w) + 2 * (v - 1) * (v * v) * (11 * (v * v * v * v) + 23 * (v * v * v) - 25 * (v * v) + 4 * v - 2) * (w * w) - 2 * ((v - 1) * (v - 1)) * (11 * (v * v * v * v) + 2 * (v * v * v) - 3 * (v * v) + 2 * v - 1) * w + 4 * ((v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - v + 1))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N4 * (v - 1) * vC * (4 * (v * v * v * v * v * v) * (w * w * w * w) - 8 * (v * v * v * v) * ((v * v) - v + 2) * (w * w * w) + (v * v * v) * (8 * (v * v * v) - 17 * (v * v) + 26 * v + 15) * (w * w) + (6 * (v * v * v * v * v) - 24 * (v * v * v * v) - 11 * (v * v * v) + 33 * (v * v) - 52 * v + 16) * w + 16 * (((v * v) - v + 1) * ((v * v) - v + 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * N2 * (v - 1) * v * vC * w * (4 * (v * v * v * v * v) * (w * w * w) - 2 * (v * v * v) * (4 * (v * v) - 5 * v + 5) * (w * w) + (v * v * v) * (8 * (v * v) - 15 * v + 15) * w - (v - 1) * (2 * (v * v * v) - (v * v) - v + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 2 * ((v - 1) * (v - 1)) * (v * v) * vC * w * (2 * (v * v) * (w * w) - 3 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(1 - v * w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * (CQ * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v * v) * (2 * v - 1) * (w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (7 * (v * v) - 7 * v + 2) * (w * w * w * w * w) - 4 * (v - 1) * (v * v * v) * (8 * (v * v * v * v) - 5 * (v * v * v) + 5 * (v * v) - 8 * v + 4) * (w * w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (25 * (v * v * v * v) + 2 * (v * v * v) + 21 * (v * v) - 80 * v + 48) * (w * w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (5 * (v * v * v * v) + 21 * (v * v * v) - 22 * (v * v) - 24 * v + 24) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v * v * v) + 48 * (v * v * v) - 79 * (v * v) + 16 * v + 16) * w - 16 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - (v - 1) * v * w * ((v * v * v * v * v) * (w * w * w * w) - (v * v * v) * (3 * (v * v * v) + 3 * (v * v) - 4) * (w * w * w) + (v - 1) * (v * v) * (2 * (v * v * v) + 5 * (v * v) + 15 * v - 12) * (w * w) + ((v - 1) * (v - 1)) * v * (5 * (v * v * v) - 3 * (v * v) - 16 * v + 12) * w - 4 * ((v - 1) * (v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1))) + 2 * N2 * (v - 1) * v * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * (2 * CQ * v * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 4 * (v * v * v * v * v) * (2 * v - 1) * (w * w * w * w * w) + (v * v * v * v) * (15 * (v * v) - 16 * v + 5) * (w * w * w * w) - (v - 1) * (v * v * v) * (19 * (v * v) - 14 * v + 3) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (8 * (v * v) - 5 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * (7 * (v * v) - 4 * v + 3) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + (v - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (5 * v - 6) * (w * w * w) + (v * v) * (11 * (v * v * v) - 14 * (v * v) - 4 * v + 1) * (w * w) - (v - 1) * v * (9 * (v * v * v) - 7 * (v * v) + 2) * w + ((v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1))) + 2 * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (v * w * (2 * (v * v * v * v) * (w * w * w * w) - (v * v * v) * (7 * v - 4) * (w * w * w) + (v * v) * (10 * (v * v) - 13 * v + 5) * (w * w) - (v - 1) * v * (7 * (v * v) - 7 * v + 2) * w + ((v - 1) * (v - 1)) * (2 * (v * v) - v + 1)) - CQ * (v - 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * (2 * (v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1)))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1)) * std::log(v * w - v + 1) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-((v - 1) * (v - 1)) * (v * v) * vC * w * (4 * (v * v) * (w * w) - (9 * (v * v) - 2 * v + 2) * w + 5 * (v * v) - 6 * v + 6) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - N4 * (v - 1) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v) * (2 * (v * v) - 3 * v + 3) * (w * w * w * w * w) - (v * v) * (40 * (v * v * v * v * v * v) - 89 * (v * v * v * v * v) + 97 * (v * v * v * v) - 12 * (v * v * v) - 4 * (v * v) + 12 * v - 4) * (w * w * w * w) + 2 * (v * v) * (40 * (v * v * v * v * v * v) - 104 * (v * v * v * v * v) + 121 * (v * v * v * v) - 14 * (v * v * v) - 43 * (v * v) + 60 * v - 20) * (w * w * w) - 8 * CQ * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1)) * (v * w - 1) * (v * w - v + 1) * ((w * w) - 2 * w + 2) - (80 * (v * v * v * v * v * v * v * v) - 223 * (v * v * v * v * v * v * v) + 308 * (v * v * v * v * v * v) - 174 * (v * v * v * v * v) + 101 * (v * v * v * v) - 28 * (v * v * v) + 28 * (v * v) - 16 * v + 4) * (w * w) + (32 * (v * v * v * v * v * v * v * v) - 64 * (v * v * v * v * v * v * v) + 33 * (v * v * v * v * v * v) + 92 * (v * v * v * v * v) - 85 * (v * v * v * v) - 54 * (v * v * v) + 186 * (v * v) - 144 * v + 36) * w - 16 * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (2 * (v * v) - 3 * v + 3)) - 2 * N2 * ((v - 1) * (v - 1)) * vC * w * ((v * v) * ((v * v) - 2 * v + 2) * ((v * v) - v + 1) * (w * w * w) - (v - 1) * (v * v) * ((v * v) + 4 * v - 4) * (w * w) + ((v * v) + 2 * v - 2) * ((v * v * v * v) - (v * v * v) + 2 * (v * v) - 2 * v + 1) * w - (v - 1) * (3 * (v * v * v * v) - 4 * (v * v * v) + 6 * (v * v) - 4 * v + 2)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (3 * N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (8 * (v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v * v * v * v * v) * (3 * (v * v) + 2 * v - 2) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (24 * (v * v * v * v * v * v) + 91 * (v * v * v * v * v) - 141 * (v * v * v * v) + 148 * (v * v * v) - 194 * (v * v) + 144 * v - 48) * (w * w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (12 * (v * v * v * v * v * v) - 125 * (v * v * v * v * v) + 230 * (v * v * v * v) - 306 * (v * v * v) + 393 * (v * v) - 288 * v + 96) * (w * w * w * w * w * w * w) - (v * v * v * v) * (128 * (v * v * v * v * v * v * v * v) - 494 * (v * v * v * v * v * v * v) + 927 * (v * v * v * v * v * v) - 1036 * (v * v * v * v * v) + 799 * (v * v * v * v) + 66 * (v * v * v) - 694 * (v * v) + 576 * v - 144) * (w * w * w * w * w * w) + (v * v * v * v) * (192 * (v * v * v * v * v * v * v * v) - 522 * (v * v * v * v * v * v * v) + 773 * (v * v * v * v * v * v) - 186 * (v * v * v * v * v) - 1129 * (v * v * v * v) + 2676 * (v * v * v) - 2908 * (v * v) + 1728 * v - 432) * (w * w * w * w * w) - (v * v) * (128 * (v * v * v * v * v * v * v * v * v * v) - 107 * (v * v * v * v * v * v * v * v * v) - 422 * (v * v * v * v * v * v * v * v) + 1971 * (v * v * v * v * v * v * v) - 3646 * (v * v * v * v * v * v) + 4107 * (v * v * v * v * v) - 2461 * (v * v * v * v) + 72 * (v * v * v) + 1062 * (v * v) - 720 * v + 144) * (w * w * w * w) + (v * v) * (32 * (v * v * v * v * v * v * v * v * v * v) + 192 * (v * v * v * v * v * v * v * v * v) - 891 * (v * v * v * v * v * v * v * v) + 1964 * (v * v * v * v * v * v * v) - 2315 * (v * v * v * v * v * v) + 1082 * (v * v * v * v * v) + 1366 * (v * v * v * v) - 3208 * (v * v * v) + 2962 * (v * v) - 1440 * v + 288) * (w * w * w) - (v - 1) * (96 * (v * v * v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v * v * v) - 217 * (v * v * v * v * v * v * v * v) + 1119 * (v * v * v * v * v * v * v) - 1982 * (v * v * v * v * v * v) + 2191 * (v * v * v * v * v) - 1393 * (v * v * v * v) + 280 * (v * v * v) + 290 * (v * v) - 240 * v + 48) * (w * w) + ((v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v * v * v) - 256 * (v * v * v * v * v * v * v) + 427 * (v * v * v * v * v * v) - 302 * (v * v * v * v * v) + 3 * (v * v * v * v) + 312 * (v * v * v) - 328 * (v * v) + 192 * v - 48) * w - 32 * ((v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1))) - 6 * AL * N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v - 1) * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 8 * (v - 1) * (v * v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w * w) + 4 * (v * v * v) * (6 * (v * v * v * v * v) - 11 * (v * v * v * v) + 11 * (v * v * v) - 12 * (v * v) + 6 * v - 2) * (w * w * w * w * w) + 4 * (v * v) * (4 * (v * v * v * v * v * v * v) - 10 * (v * v * v * v * v * v) + 10 * (v * v * v * v * v) + 5 * (v * v * v * v) - 15 * (v * v * v) + 24 * (v * v) - 14 * v + 6) * (w * w * w * w) - v * (16 * (v * v * v * v * v * v * v * v) - 40 * (v * v * v * v * v * v) + 128 * (v * v * v * v * v) - 113 * (v * v * v * v) + 81 * (v * v * v) + 16 * (v * v) - 24 * v + 24) * (w * w * w) + 2 * (24 * (v * v * v * v * v * v * v * v) - 48 * (v * v * v * v * v * v * v) + 72 * (v * v * v * v * v * v) - 29 * (v * v * v * v * v) - 5 * (v * v * v * v) + 46 * (v * v * v) - 24 * (v * v) + 12 * v + 4) * (w * w) - (48 * (v * v * v * v * v * v * v) - 128 * (v * v * v * v * v * v) + 238 * (v * v * v * v * v) - 236 * (v * v * v * v) + 173 * (v * v * v) - 47 * (v * v) + 16) * w + 16 * (((v * v) - v + 1) * ((v * v) - v + 1) * ((v * v) - v + 1))) - 6 * N2 * (v - 1) * (v * v) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v) * ((v * v) + v - 1) * (w * w * w * w * w * w) + (v * v * v * v) * (4 * (v * v * v * v) + 39 * (v * v * v) - 60 * (v * v) + 42 * v - 21) * (w * w * w * w * w) - 3 * (v - 1) * (v * v * v * v) * (15 * (v * v) - 11 * v + 11) * (w * w * w * w) + 3 * (v - 1) * (v * v) * (7 * (v * v * v * v) - 6 * (v * v * v) - 8 * (v * v) + 28 * v - 14) * (w * w * w) - (v - 1) * (v * v) * (7 * (v * v * v * v) - 18 * (v * v * v) + 12 * (v * v) + 12 * v - 6) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (10 * (v * v) - 21 * v + 21) * w - ((v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 5 * v + 5)) + 3 * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v * v) * (11 * (v * v) - 4 * v + 4) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (15 * (v * v) - 11 * v + 11) * (w * w * w * w * w * w) + (v * v * v * v) * (30.0l * (v * v * v * v) - 23 * (v * v * v) + 11 * (v * v) + 24 * v - 12) * (w * w * w * w * w) - (v * v * v * v) * (14 * (v * v * v * v) - 23 * (v * v * v) + 89 * (v * v) - 132 * v + 66) * (w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v) - 23 * (v * v * v * v * v) + 144 * (v * v * v * v) - 254 * (v * v * v) + 157 * (v * v) - 36 * v + 12) * (w * w * w) + (v - 1) * (v * v) * (5 * (v * v * v * v) - 44 * (v * v * v) + 54 * (v * v) - 20 * v + 10) * (w * w) + ((v - 1) * (v - 1)) * (5 * (v * v * v * v) - 5 * (v * v * v) + (v * v) + 8 * v - 4) * w - ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + 12 * AL * N2 * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * (2 * (v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 6 * AL * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * (2 * (v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 4 * CQ * N4 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (12 * (v * v * v * v * v * v) * (w * w * w * w) - 24 * (v - 1) * (v * v * v * v * v) * (w * w * w) + 8 * (v * v) * (2 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 15 * (v * v * v * v) - 20 * (v * v * v) + 15 * (v * v) - 6 * v + 2) * (w * w) - 4 * (v - 1) * v * (8 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) + 51 * (v * v * v * v) - 62 * (v * v * v) + 51 * (v * v) - 24 * v + 8) * w + ((v - 1) * (v - 1)) * (16 * (v * v * v * v * v * v) - 48 * (v * v * v * v * v) + 99 * (v * v * v * v) - 118 * (v * v * v) + 99 * (v * v) - 48 * v + 16)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) - 24 * CQ * N2 * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) - (v - 1) * v * w + ((v - 1) * (v - 1))) * (2 * (v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) + 12 * CQ * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * vC * w * (2 * (v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1)) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 6.0l + std::log(S / q2_fac) * (N4 * vC * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (2 * (v * v) + v + 4) * (w * w * w * w * w * w) + (v * v * v) * (16 * (v * v * v * v * v * v) - 15 * (v * v * v * v * v) + 55 * (v * v * v * v) + 20 * (v * v * v) + 32 * (v * v) - 12 * v + 4) * (w * w * w * w * w) - (v * v) * (16 * (v * v * v * v * v * v * v) - 3 * (v * v * v * v * v * v) + 26 * (v * v * v * v * v) + 77 * (v * v * v * v) + 24 * (v * v * v) + 108 * (v * v) - 40 * v + 12) * (w * w * w * w) + v * (16 * (v * v * v * v * v * v * v * v) + 11 * (v * v * v * v * v * v) + 80 * (v * v * v * v * v) + 54 * (v * v * v * v) + 23 * (v * v * v) + 164 * (v * v) - 48 * v + 12) * (w * w * w) - (48 * (v * v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v * v) + 195 * (v * v * v * v * v * v) - 128 * (v * v * v * v * v) + 213 * (v * v * v * v) - 96 * (v * v * v) + 164 * (v * v) - 24 * v + 4) * (w * w) + (48 * (v * v * v * v * v * v * v) - 128 * (v * v * v * v * v * v) + 275 * (v * v * v * v * v) - 297 * (v * v * v * v) + 319 * (v * v * v) - 177 * (v * v) + 108 * v - 4) * w - 16 * (((v * v) - v + 1) * ((v * v) - v + 1)) * ((v * v) - v + 2)) - 2 * N2 * vC * w * (v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w) - 4 * (v * v * v * v * v * v) * ((v * v) + 1) * (w * w * w * w) + (v * v) * (4 * (v * v * v * v * v * v) + (v * v * v * v * v) - (v * v * v * v) + 15 * (v * v * v) - 9 * (v * v) + 6 * v - 2) * (w * w * w) - v * ((v * v) - v + 1) * (7 * (v * v * v * v) + 5 * (v * v * v) - 2 * (v * v) + 6 * v - 4) * (w * w) + (10 * (v * v * v * v * v * v) - 19 * (v * v * v * v * v) + 22 * (v * v * v * v) - 12 * (v * v * v) + 3 * (v * v) + 2 * v - 2) * w - (v - 1) * (3 * (v * v * v * v) - 5 * (v * v * v) + 6 * (v * v) - 4 * v + 2)) + (v - 1) * (v * v) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v) * ((v * v) + 2) * (w * w * w * w) - (v * v) * ((v * v * v) + 5 * (v * v) - 2 * v + 6) * (w * w * w) + v * (7 * (v * v * v) - 3 * (v * v) + 3 * v + 6) * (w * w) - (7 * (v * v * v) - 7 * (v * v) + 6 * v + 2) * w + 3 * (v * v) - 4 * v + 3)) / (N2 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(S / q2_fragm) * (N4 * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (4 * (v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v) * (7 * (v * v) - 9 * v + 4) * (w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (23 * (v * v * v) - 56 * (v * v) + 51 * v - 16) * (w * w * w * w * w) - 4 * (v - 1) * (v * v * v) * (45 * (v * v * v * v * v) - 110 * (v * v * v * v) + 101 * (v * v * v) - 27 * (v * v) - 8 * v + 4) * (w * w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (224 * (v * v * v * v * v) - 535 * (v * v * v * v) + 498 * (v * v * v) - 123 * (v * v) - 80 * v + 48) * (w * w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * v * (88 * (v * v * v * v * v) - 203 * (v * v * v * v) + 205 * (v * v * v) - 70 * (v * v) - 24 * v + 24) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (80 * (v * v * v * v * v) - 175 * (v * v * v * v) + 208 * (v * v * v) - 111 * (v * v) + 16 * v + 16) * w - 16 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1))) - 2 * N2 * (v * v) * vC * w * (v * w - v + 1) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v * v * v) * (w * w * w * w * w) - 4 * (v * v * v * v) * (2 * (v * v) - 2 * v + 1) * (w * w * w * w) + (v * v * v) * (2 * v - 1) * (7 * (v * v) - 10 * v + 7) * (w * w * w) - 6 * (v - 1) * (v * v) * (2 * v - 1) * ((v * v) - v + 1) * (w * w) + 2 * ((v - 1) * (v - 1)) * v * (2 * (v * v * v) - (v * v) + 2 * v + 1) * w - ((v - 1) * (v - 1) * (v - 1)) * ((v * v) + 1)) + ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * (2 * (v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    case 14:
        return std::log(1 - w) * (-16 * N4 * N * (v - 1) * vC * (v * w - 1) * (v * w - v + 1) * (4 * (v * v * v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v * v * v * v * v * v) * (10 * (v * v) + v - 1) * (w * w * w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (52 * (v * v * v * v * v * v) - (v * v * v * v * v) + 7 * (v * v * v * v) - 14 * (v * v * v) + 12 * (v * v) - 6 * v + 2) * (w * w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (92 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v) + 71 * (v * v * v * v) - 80 * (v * v * v) + 65 * (v * v) - 30.0l * v + 10) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (110 * (v * v * v * v * v * v * v * v) - 59 * (v * v * v * v * v * v * v) + 75 * (v * v * v * v * v * v) - 22 * (v * v * v * v * v) - 22 * (v * v * v * v) + 62 * (v * v * v) - 58 * (v * v) + 32 * v - 8) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (90 * (v * v * v * v * v * v * v * v) - 14 * (v * v * v * v * v * v * v) - 115 * (v * v * v * v * v * v) + 350 * (v * v * v * v * v) - 437 * (v * v * v * v) + 404 * (v * v * v) - 284 * (v * v) + 128 * v - 32) * (w * w * w * w * w * w * w * w) + (v * v * v * v) * (62 * (v * v * v * v * v * v * v * v * v * v) + (v * v * v * v * v * v * v * v * v) - 166 * (v * v * v * v * v * v * v * v) + 340 * (v * v * v * v * v * v * v) - 183 * (v * v * v * v * v * v) - 30.0l * (v * v * v * v * v) + 122 * (v * v * v * v) - 168 * (v * v * v) + 132 * (v * v) - 60 * v + 12) * (w * w * w * w * w * w * w) - 2 * CQ * ((v * v) * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w) - (v * v * v * v) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * (w * w * w * w * w) - 2 * (v * v * v * v) * ((v * v * v * v) - 4 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) - 4 * (v * v * v * v * v) + 7 * (v * v * v * v) - 8 * (v * v * v) + 9 * (v * v) - 6 * v + 2) * (w * w * w) - 2 * (v - 1) * (v * v) * ((v * v * v * v) - 4 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w) - ((v - 1) * (v - 1)) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * w + ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - (v * v * v * v) * (42 * (v * v * v * v * v * v * v * v * v * v) - 14 * (v * v * v * v * v * v * v * v * v) - 88 * (v * v * v * v * v * v * v * v) + 45 * (v * v * v * v * v * v * v) + 481 * (v * v * v * v * v * v) - 937 * (v * v * v * v * v) + 975 * (v * v * v * v) - 784 * (v * v * v) + 466 * (v * v) - 180 * v + 36) * (w * w * w * w * w * w) + (v * v) * (20 * (v * v * v * v * v * v * v * v * v * v * v * v) + 31 * (v * v * v * v * v * v * v * v * v * v * v) - 214 * (v * v * v * v * v * v * v * v * v * v) + 344 * (v * v * v * v * v * v * v * v * v) - 127 * (v * v * v * v * v * v * v * v) - 2 * (v * v * v * v * v * v * v) - 166 * (v * v * v * v * v * v) + 328 * (v * v * v * v * v) - 370 * (v * v * v * v) + 280 * (v * v * v) - 144 * (v * v) + 48 * v - 8) * (w * w * w * w * w) - (v * v) * (4 * (v * v * v * v * v * v * v * v * v * v * v * v) + 50 * (v * v * v * v * v * v * v * v * v * v * v) - 190 * (v * v * v * v * v * v * v * v * v * v) + 241 * (v * v * v * v * v * v * v * v * v) - 22 * (v * v * v * v * v * v * v * v) - 71 * (v * v * v * v * v * v * v) - 221 * (v * v * v * v * v * v) + 592 * (v * v * v * v * v) - 739 * (v * v * v * v) + 570 * (v * v * v) - 290 * (v * v) + 96 * v - 16) * (w * w * w * w) + (v - 1) * (16 * (v * v * v * v * v * v * v * v * v * v * v * v) + 14 * (v * v * v * v * v * v * v * v * v * v * v) - 206 * (v * v * v * v * v * v * v * v * v * v) + 535 * (v * v * v * v * v * v * v * v * v) - 696 * (v * v * v * v * v * v * v * v) + 679 * (v * v * v * v * v * v * v) - 569 * (v * v * v * v * v * v) + 436 * (v * v * v * v * v) - 301 * (v * v * v * v) + 150 * (v * v * v) - 52 * (v * v) + 12 * v - 2) * (w * w * w) - ((v - 1) * (v - 1)) * (24 * (v * v * v * v * v * v * v * v * v * v) - 58 * (v * v * v * v * v * v * v * v * v) + 32 * (v * v * v * v * v * v * v * v) + 109 * (v * v * v * v * v * v * v) - 202 * (v * v * v * v * v * v) + 189 * (v * v * v * v * v) - 77 * (v * v * v * v) + 15 * (v * v) - 10 * v + 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (16 * (v * v * v * v * v * v * v * v) - 58 * (v * v * v * v * v * v * v) + 113 * (v * v * v * v * v * v) - 128 * (v * v * v * v * v) + 115 * (v * v * v * v) - 78 * (v * v * v) + 54 * (v * v) - 24 * v + 6) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2) * (((v * v) - v + 1) * ((v * v) - v + 1))) - 8 * GTR * N2 * ((v - 1) * (v - 1)) * vC * w * (v * w - 1) * (v * w - v + 1) * (CQ * (2 * (v * v * v * v * v * v * v * v) * (2 * (v * v * v * v) - 3 * (v * v * v) + 5 * (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (19 * (v * v * v * v) - 30.0l * (v * v * v) + 50 * (v * v) - 40 * v + 20) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (42 * (v * v * v * v * v * v) - 65 * (v * v * v * v * v) + 83 * (v * v * v * v) - 20 * (v * v * v) - 30.0l * (v * v) + 48 * v - 16) * (w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (27 * (v * v * v * v * v * v) - 34 * (v * v * v * v * v) + 10 * (v * v * v * v) + 80 * (v * v * v) - 120 * (v * v) + 96 * v - 32) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v) * (21 * (v * v * v * v * v * v * v * v) - 13 * (v * v * v * v * v * v * v) - 33 * (v * v * v * v * v * v) + 126 * (v * v * v * v * v) - 136 * (v * v * v * v) + 54 * (v * v * v) + 38 * (v * v) - 48 * v + 12) * (w * w * w * w * w * w) - (v * v * v * v) * (19 * (v * v * v * v * v * v * v * v) + 16 * (v * v * v * v * v * v * v) - 66 * (v * v * v * v * v * v) + 80 * (v * v * v * v * v) + 82 * (v * v * v * v) - 348 * (v * v * v) + 452 * (v * v) - 288 * v + 72) * (w * w * w * w * w) + (v * v) * ((v * v) + 4 * v - 4) * (4 * (v * v * v * v * v * v * v * v) + 9 * (v * v * v * v * v * v * v) - 37 * (v * v * v * v * v * v) + 70 * (v * v * v * v * v) - 66 * (v * v * v * v) + 26 * (v * v * v) + 10 * (v * v) - 16 * v + 4) * (w * w * w * w) - 2 * (v - 1) * (v * v) * (5 * (v * v * v * v * v * v * v * v) + 15 * (v * v * v * v * v * v * v) - 49 * (v * v * v * v * v * v) + 68 * (v * v * v * v * v) - 18 * (v * v * v * v) - 64 * (v * v * v) + 96 * (v * v) - 64 * v + 16) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (8 * (v * v * v * v * v * v * v * v) - 4 * (v * v * v * v * v * v * v) - 2 * (v * v * v * v * v * v) + 21 * (v * v * v * v * v) - 31 * (v * v * v * v) + 19 * (v * v * v) + 3 * (v * v) - 8 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (10 * (v * v * v * v * v * v) - 5 * (v * v * v * v * v) + 7 * (v * v * v * v) - 10 * (v * v) + 12 * v - 4) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v * v) - 5 * (v * v * v) + 7 * (v * v) - 4 * v + 2)) - 2 * ((v * v * v * v * v * v * v * v) * (3 * (v * v * v * v) - 3 * (v * v * v) + 5 * (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v * v) * (8 * (v * v * v * v) - 7 * (v * v * v) + 12 * (v * v) - 10 * v + 5) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (38 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) + 33 * (v * v * v * v) - 10 * (v * v * v) - 15 * (v * v) + 24 * v - 8) * (w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (50 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) - 19 * (v * v * v * v) + 76 * (v * v * v) - 118 * (v * v) + 96 * v - 32) * (w * w * w * w * w * w * w) + (v * v * v * v) * (38 * (v * v * v * v * v * v * v * v) + 43 * (v * v * v * v * v * v * v) - 75 * (v * v * v * v * v * v) + 98 * (v * v * v * v * v) - 122 * (v * v * v * v) + 54 * (v * v * v) + 38 * (v * v) - 48 * v + 12) * (w * w * w * w * w * w) - (v * v * v * v) * (16 * (v * v * v * v * v * v * v * v) + 60 * (v * v * v * v * v * v * v) - 43 * (v * v * v * v * v * v) - 44 * (v * v * v * v * v) + 83 * (v * v * v * v) - 174 * (v * v * v) + 226 * (v * v) - 144 * v + 36) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v * v * v * v) + 24 * (v * v * v * v * v * v * v * v) - 162 * (v * v * v * v * v * v * v) + 216 * (v * v * v * v * v * v) - 238 * (v * v * v * v * v) + 182 * (v * v * v * v) - 40 * (v * v * v) - 50 * (v * v) + 40 * v - 8) * (w * w * w * w) - (v - 1) * (v * v) * (9 * (v * v * v * v * v * v * v * v) + 47 * (v * v * v * v * v * v * v) - 58 * (v * v * v * v * v * v) + 20 * (v * v * v * v * v) + 11 * (v * v * v * v) - 70 * (v * v * v) + 98 * (v * v) - 64 * v + 16) * (w * w * w) + ((v - 1) * (v - 1)) * (14 * (v * v * v * v * v * v * v * v) + 16 * (v * v * v * v * v * v * v) - 21 * (v * v * v * v * v * v) + 19 * (v * v * v * v * v) - 30.0l * (v * v * v * v) + 19 * (v * v * v) + 3 * (v * v) - 8 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (9 * (v * v * v * v * v * v) + 3 * (v * v * v * v * v) - 3 * (v * v * v * v) + 2 * (v * v * v) - 6 * (v * v) + 6 * v - 2) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v * v * v) - 2 * (v * v * v) + 3 * (v * v) - 2 * v + 1))) + 8 * (CQ - 1) * GTR * N4 * ((v - 1) * (v - 1)) * vC * w * (v * w - 1) * (v * w - v + 1) * (2 * (v * v * v * v * v * v * v * v) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (9 * (v * v * v * v) - 20 * (v * v * v) + 40 * (v * v) - 40 * v + 20) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (20 * (v * v * v * v * v * v) - 47 * (v * v * v * v * v) + 73 * (v * v * v * v) - 36 * (v * v * v) - 22 * (v * v) + 48 * v - 16) * (w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (13 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 20 * (v * v * v * v) + 48 * (v * v * v) - 104 * (v * v) + 96 * v - 32) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v) * (10 * (v * v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v * v) - 5 * (v * v * v * v * v * v) + 84 * (v * v * v * v * v) - 130 * (v * v * v * v) + 72 * (v * v * v) + 32 * (v * v) - 48 * v + 12) * (w * w * w * w * w * w) - (v * v * v * v) * (9 * (v * v * v * v * v * v * v * v) - 8 * (v * v * v * v * v * v * v) - 10 * (v * v * v * v * v * v) + 52 * (v * v * v * v * v) + 6 * (v * v * v * v) - 240 * (v * v * v) + 416 * (v * v) - 288 * v + 72) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v * v * v * v * v * v * v) + 5 * (v * v * v * v * v * v * v * v * v) + 3 * (v * v * v * v * v * v * v * v) - 78 * (v * v * v * v * v * v * v) + 262 * (v * v * v * v * v * v) - 442 * (v * v * v * v * v) + 390 * (v * v * v * v) - 112 * (v * v * v) - 92 * (v * v) + 80 * v - 16) * (w * w * w * w) - 2 * (v - 1) * (v * v) * (2 * (v * v * v * v * v * v * v * v) + 7 * (v * v * v * v * v * v * v) - 35 * (v * v * v * v * v * v) + 64 * (v * v * v * v * v) - 36 * (v * v * v * v) - 40 * (v * v * v) + 88 * (v * v) - 64 * v + 16) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v * v * v) - 7 * (v * v * v * v * v * v * v) + 6 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 29 * (v * v * v * v) + 22 * (v * v * v) + 2 * (v * v) - 8 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) + 7 * (v * v * v * v) - 4 * (v * v * v) - 8 * (v * v) + 12 * v - 4) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v * v * v) - 3 * (v * v * v) + 5 * (v * v) - 4 * v + 2)) + 8 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (2 * CQ * ((v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) - 3 * (v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w) + 2 * (v * v) * (2 * (v * v * v * v) - 2 * (v * v * v) + (v * v) + 2 * v - 1) * (w * w * w * w) - (v * v) * (3 * (v * v * v * v) - 3 * (v * v * v) - (v * v) + 8 * v - 4) * (w * w * w) + ((v * v * v * v * v * v) - (v * v * v * v) + (v * v * v) + 2 * (v * v) - 3 * v + 1) * (w * w) - (v - 1) * ((v * v * v * v) + (v * v * v) - 2 * (v * v) + 2 * v - 1) * w + ((v - 1) * (v - 1)) * ((v * v) - v + 1)) - (v * v * v * v) * (3 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (5 * (v * v) - 4 * v + 4) * (w * w * w * w * w) - 2 * (v * v) * ((v * v) - v + 1) * (7 * (v * v) + 2 * v - 2) * (w * w * w * w) + 2 * (v * v) * (5 * (v * v * v * v) - 2 * (v * v * v) - 2 * (v * v) + 8 * v - 4) * (w * w * w) - (((v * v) + v - 1) * ((v * v) + v - 1)) * (3 * (v * v) - 2 * v + 2) * (w * w) + 2 * (v - 1) * (v * v) * (v + 1) * (2 * v - 1) * w - ((v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (-16 * N4 * N * (v - 1) * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * w - 1) * (4 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 10 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (8 * (v * v * v) - 5 * (v * v) + 6 * v + 1) * (w * w * w * w * w) - (v * v * v * v * v) * (14 * (v * v * v) - 15 * (v * v) + 18 * v + 5) * (w * w * w * w) + (v * v) * (6 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 6 * (v * v * v * v) + 15 * (v * v * v) - 8 * (v * v) + 5 * v - 2) * (w * w * w) - (v * v * v) * (2 * (v * v * v * v * v) - 3 * (v * v * v * v) + 9 * (v * v * v) - 2 * (v * v) + 5 * v - 1) * (w * w) + (2 * v - 1) * ((v * v) - v + 1) * ((v * v * v * v) + (v * v * v) + (v * v) + 3 * v - 2) * w - 2 * (v - 1) * (v + 1) * (((v * v) - v + 1) * ((v * v) - v + 1))) + 2 * CQ * ((v - 1) * w - 1) * (v * w - v + 1) * (v * w + v - 1) * ((v - 1) * v * w + 1) * ((v * v) * w - 1) * ((v * v) * w - v + 1)) - 4 * GTR * N4 * ((v - 1) * (v - 1)) * v * vC * w * (v * w - 1) * (CQ * v * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * (v * v) * (w * w) + 1) - 2 * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 8 * GTR * N2 * ((v - 1) * (v - 1)) * v * vC * w * (v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (2 * (v * v * v * v * v) * (w * w * w * w) - (v * v * v * v) * (3 * v + 2) * (w * w * w) + (v * v) * (5 * (v * v * v) - 3 * (v * v) + 5 * v - 2) * (w * w) - 2 * (v * v * v * v * v) * w + (v - 1) * (v + 1) * (2 * (v * v) - 3 * v + 2)) + CQ * v * (v * w - v + 1) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - v * w + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) - 4 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * w - 1) * (2 * (v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + v * ((v * v * v) + 2 * (v * v) - v + 2) * (w * w) - v * ((v * v * v) - v + 2) * w + ((v - 1) * (v - 1) * (v - 1))) + CQ * (v * w - v + 1) * ((v * v) * (w * w) + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (-16 * N4 * N * (v - 1) * vC * (v * w - 1) * (v * w - v + 1) * (4 * (v * v * v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w * w * w) - 22 * (v * v * v * v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v * v * v) * (31 * (v * v * v * v * v * v) - 5 * (v * v * v * v * v) + 8 * (v * v * v * v) - 7 * (v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (116 * (v * v * v * v * v * v) - 53 * (v * v * v * v * v) + 83 * (v * v * v * v) - 70 * (v * v * v) + 60 * (v * v) - 30.0l * v + 10) * (w * w * w * w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (74 * (v * v * v * v * v * v * v * v) - 41 * (v * v * v * v * v * v * v) + 40 * (v * v * v * v * v * v) + 7 * (v * v * v * v * v) - 20 * (v * v * v * v) + 31 * (v * v * v) - 29 * (v * v) + 16 * v - 4) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (132 * (v * v * v * v * v * v * v * v) - 34 * (v * v * v * v * v * v * v) - 137 * (v * v * v * v * v * v) + 432 * (v * v * v * v * v) - 473 * (v * v * v * v) + 398 * (v * v * v) - 282 * (v * v) + 128 * v - 32) * (w * w * w * w * w * w * w * w) + (v * v * v * v) * (92 * (v * v * v * v * v * v * v * v * v * v) + 8 * (v * v * v * v * v * v * v * v * v) - 261 * (v * v * v * v * v * v * v * v) + 514 * (v * v * v * v * v * v * v) - 265 * (v * v * v * v * v * v) - 36 * (v * v * v * v * v) + 124 * (v * v * v * v) - 168 * (v * v * v) + 132 * (v * v) - 60 * v + 12) * (w * w * w * w * w * w * w) - 2 * CQ * ((v * v) * w - v + 1) * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v * v) * ((v * v) - 2 * v + 2) * (w * w * w * w * w * w) - (v * v * v * v) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * (w * w * w * w * w) - 2 * (v * v * v * v) * ((v * v * v * v) - 4 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w * w * w) + 2 * (v * v) * ((v * v * v * v * v * v) - 4 * (v * v * v * v * v) + 7 * (v * v * v * v) - 8 * (v * v * v) + 9 * (v * v) - 6 * v + 2) * (w * w * w) - 2 * (v - 1) * (v * v) * ((v * v * v * v) - 4 * (v * v * v) + 5 * (v * v) - 2 * v + 1) * (w * w) - ((v - 1) * (v - 1)) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * w + ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) - (v * v * v * v) * (54 * (v * v * v * v * v * v * v * v * v * v) + 19 * (v * v * v * v * v * v * v * v * v) - 228 * (v * v * v * v * v * v * v * v) + 241 * (v * v * v * v * v * v * v) + 430 * (v * v * v * v * v * v) - 999 * (v * v * v * v * v) + 1005 * (v * v * v * v) - 792 * (v * v * v) + 468 * (v * v) - 180 * v + 36) * (w * w * w * w * w * w) + (v * v) * (22 * (v * v * v * v * v * v * v * v * v * v * v * v) + 56 * (v * v * v * v * v * v * v * v * v * v * v) - 293 * (v * v * v * v * v * v * v * v * v * v) + 388 * (v * v * v * v * v * v * v * v * v) + 23 * (v * v * v * v * v * v * v * v) - 242 * (v * v * v * v * v * v * v) - 30.0l * (v * v * v * v * v * v) + 280 * (v * v * v * v * v) - 358 * (v * v * v * v) + 280 * (v * v * v) - 144 * (v * v) + 48 * v - 8) * (w * w * w * w * w) - (v * v) * (4 * (v * v * v * v * v * v * v * v * v * v * v * v) + 56 * (v * v * v * v * v * v * v * v * v * v * v) - 198 * (v * v * v * v * v * v * v * v * v * v) + 171 * (v * v * v * v * v * v * v * v * v) + 214 * (v * v * v * v * v * v * v * v) - 359 * (v * v * v * v * v * v * v) - 41 * (v * v * v * v * v * v) + 508 * (v * v * v * v * v) - 703 * (v * v * v * v) + 560 * (v * v * v) - 288 * (v * v) + 96 * v - 16) * (w * w * w * w) + (v - 1) * (16 * (v * v * v * v * v * v * v * v * v * v * v * v) + 18 * (v * v * v * v * v * v * v * v * v * v * v) - 242 * (v * v * v * v * v * v * v * v * v * v) + 597 * (v * v * v * v * v * v * v * v * v) - 719 * (v * v * v * v * v * v * v * v) + 661 * (v * v * v * v * v * v * v) - 549 * (v * v * v * v * v * v) + 424 * (v * v * v * v * v) - 298 * (v * v * v * v) + 150 * (v * v * v) - 52 * (v * v) + 12 * v - 2) * (w * w * w) - 2 * ((v - 1) * (v - 1)) * (12 * (v * v * v * v * v * v * v * v * v * v) - 31 * (v * v * v * v * v * v * v * v * v) + 11 * (v * v * v * v * v * v * v * v) + 76 * (v * v * v * v * v * v * v) - 133 * (v * v * v * v * v * v) + 127 * (v * v * v * v * v) - 61 * (v * v * v * v) + 10 * (v * v * v) + 5 * (v * v) - 5 * v + 1) * (w * w) + 2 * ((v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (8 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) + 31 * (v * v * v * v) - 17 * (v * v * v) + 16 * (v * v) - 9 * v + 3) * w - 2 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (2 * (v * v) - 5 * v + 5)) + 4 * GTR * N4 * ((v - 1) * (v - 1)) * vC * w * (v * w - 1) * (v * w - v + 1) * (CQ * (v * v) * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - 8 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (19 * (v * v) - 18 * v + 18) * (w * w * w * w * w * w * w * w) - 4 * (v * v * v * v * v * v * v * v) * (7 * (v * v) - 12 * v + 12) * (w * w * w * w * w * w * w) + 4 * (v * v * v * v * v * v) * (6 * (v * v * v * v) - 14 * (v * v * v) + 25 * (v * v) - 22 * v + 11) * (w * w * w * w * w * w) - 4 * (v * v * v * v * v * v) * (3 * (v * v * v * v) - 9 * (v * v * v) + 29 * (v * v) - 40 * v + 20) * (w * w * w * w * w) + (v * v * v * v) * (3 * (v * v * v * v * v * v) - 6 * (v * v * v * v * v) + 56 * (v * v * v * v) - 144 * (v * v * v) + 182 * (v * v) - 132 * v + 44) * (w * w * w * w) - 4 * (v - 1) * (v * v * v * v) * ((v * v * v * v) + 5 * (v * v * v) - 17 * (v * v) + 24 * v - 12) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (5 * (v * v * v * v) - 8 * (v * v * v) + 17 * (v * v) - 18 * v + 9) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * ((v * v) + 2 * v - 2) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - 2 * (2 * (v * v * v * v * v * v * v * v) * ((v * v * v * v) - 2 * (v * v * v) + 4 * (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (9 * (v * v * v * v) - 20 * (v * v * v) + 40 * (v * v) - 40 * v + 20) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (20 * (v * v * v * v * v * v) - 47 * (v * v * v * v * v) + 73 * (v * v * v * v) - 36 * (v * v * v) - 22 * (v * v) + 48 * v - 16) * (w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (13 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 20 * (v * v * v * v) + 48 * (v * v * v) - 104 * (v * v) + 96 * v - 32) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v) * (10 * (v * v * v * v * v * v * v * v) - 17 * (v * v * v * v * v * v * v) - 5 * (v * v * v * v * v * v) + 84 * (v * v * v * v * v) - 130 * (v * v * v * v) + 72 * (v * v * v) + 32 * (v * v) - 48 * v + 12) * (w * w * w * w * w * w) - (v * v * v * v) * (9 * (v * v * v * v * v * v * v * v) - 8 * (v * v * v * v * v * v * v) - 10 * (v * v * v * v * v * v) + 52 * (v * v * v * v * v) + 6 * (v * v * v * v) - 240 * (v * v * v) + 416 * (v * v) - 288 * v + 72) * (w * w * w * w * w) + (v * v) * (2 * (v * v * v * v * v * v * v * v * v * v) + 5 * (v * v * v * v * v * v * v * v * v) + 3 * (v * v * v * v * v * v * v * v) - 78 * (v * v * v * v * v * v * v) + 262 * (v * v * v * v * v * v) - 442 * (v * v * v * v * v) + 390 * (v * v * v * v) - 112 * (v * v * v) - 92 * (v * v) + 80 * v - 16) * (w * w * w * w) - 2 * (v - 1) * (v * v) * (2 * (v * v * v * v * v * v * v * v) + 7 * (v * v * v * v * v * v * v) - 35 * (v * v * v * v * v * v) + 64 * (v * v * v * v * v) - 36 * (v * v * v * v) - 40 * (v * v * v) + 88 * (v * v) - 64 * v + 16) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v * v * v) - 7 * (v * v * v * v * v * v * v) + 6 * (v * v * v * v * v * v) + 12 * (v * v * v * v * v) - 29 * (v * v * v * v) + 22 * (v * v * v) + 2 * (v * v) - 8 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) + 7 * (v * v * v * v) - 4 * (v * v * v) - 8 * (v * v) + 12 * v - 4) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v * v * v) - 3 * (v * v * v) + 5 * (v * v) - 4 * v + 2))) - 8 * GTR * N2 * ((v - 1) * (v - 1)) * vC * w * (v * w - 1) * (v * w - v + 1) * (CQ * (v * v) * (2 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - 9 * (v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (21 * (v * v) - 10 * v + 10) * (w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v * v * v) * (15 * (v * v) - 14 * v + 14) * (w * w * w * w * w * w * w) + 2 * (v * v * v * v * v * v) * (13 * (v * v * v * v) - 15 * (v * v * v) + 25 * (v * v) - 20 * v + 10) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (13 * (v * v * v * v) - 10 * (v * v * v) + 44 * (v * v) - 68 * v + 34) * (w * w * w * w * w) + (v * v * v * v) * (3 * (v * v * v * v * v * v) + 8 * (v * v * v * v * v) + 16 * (v * v * v * v) - 68 * (v * v * v) + 84 * (v * v) - 60 * v + 20) * (w * w * w * w) - 2 * (v - 1) * (v * v * v * v) * (3 * (v * v * v * v) + 9 * (v * v * v) - 19 * (v * v) + 20 * v - 10) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (5 * (v * v * v * v) - (v * v * v) + 6 * (v * v) - 10 * v + 5) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (6 * (v * v) + 5 * v - 5) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - 2 * (v * v * v * v * v * v * v * v) * (2 * (v * v * v * v) - 3 * (v * v * v) + 5 * (v * v) - 4 * v + 2) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (23 * (v * v * v * v) - 30.0l * (v * v * v) + 50 * (v * v) - 40 * v + 20) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (58 * (v * v * v * v * v * v) - 61 * (v * v * v * v * v) + 79 * (v * v * v * v) - 20 * (v * v * v) - 30.0l * (v * v) + 48 * v - 16) * (w * w * w * w * w * w * w * w) + 8 * (v * v * v * v * v * v) * (10 * (v * v * v * v * v * v) - 5 * (v * v * v * v * v) - (v * v * v * v) + 20 * (v * v * v) - 30.0l * (v * v) + 24 * v - 8) * (w * w * w * w * w * w * w) - 4 * (v * v * v * v) * (16 * (v * v * v * v * v * v * v * v) + 9 * (v * v * v * v * v * v * v) - 29 * (v * v * v * v * v * v) + 57 * (v * v * v * v * v) - 65 * (v * v * v * v) + 27 * (v * v * v) + 19 * (v * v) - 24 * v + 6) * (w * w * w * w * w * w) + (v * v * v * v) * (29 * (v * v * v * v * v * v * v * v) + 80 * (v * v * v * v * v * v * v) - 82 * (v * v * v * v * v * v) - 16 * (v * v * v * v * v) + 130 * (v * v * v * v) - 348 * (v * v * v) + 452 * (v * v) - 288 * v + 72) * (w * w * w * w * w) - (v * v) * (6 * (v * v * v * v * v * v * v * v * v * v) + 59 * (v * v * v * v * v * v * v * v * v) + 15 * (v * v * v * v * v * v * v * v) - 234 * (v * v * v * v * v * v * v) + 392 * (v * v * v * v * v * v) - 482 * (v * v * v * v * v) + 366 * (v * v * v * v) - 80 * (v * v * v) - 100 * (v * v) + 80 * v - 16) * (w * w * w * w) + 2 * (v - 1) * (v * v) * (9 * (v * v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v * v) - 56 * (v * v * v * v * v * v) + 40 * (v * v * v * v * v) - 4 * (v * v * v * v) - 64 * (v * v * v) + 96 * (v * v) - 64 * v + 16) * (w * w * w) - 2 * ((v - 1) * (v - 1)) * (14 * (v * v * v * v * v * v * v * v) + 7 * (v * v * v * v * v * v * v) - 11 * (v * v * v * v * v * v) + 17 * (v * v * v * v * v) - 29 * (v * v * v * v) + 19 * (v * v * v) + 3 * (v * v) - 8 * v + 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (18 * (v * v * v * v * v * v) - (v * v * v * v * v) + 3 * (v * v * v * v) - 10 * (v * v) + 12 * v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (6 * (v * v * v * v) - 5 * (v * v * v) + 7 * (v * v) - 4 * v + 2)) + 4 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (CQ * (2 * (v * v * v * v * v * v) * (w * w * w * w * w * w) - 6 * (v * v * v * v * v * v) * (w * w * w * w * w) + 3 * (v * v * v * v) * (3 * (v * v) - 2 * v + 2) * (w * w * w * w) - 4 * (v * v * v * v) * (2 * (v * v) - 3 * v + 3) * (w * w * w) + (v * v) * (3 * (v * v * v * v) - 4 * (v * v * v) + 10 * (v * v) - 12 * v + 6) * (w * w) - 2 * (v - 1) * (v * v) * ((v * v) + 3 * v - 3) * w + ((v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 2)) - 4 * ((v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) - 3 * (v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w) + 2 * (v * v) * (v + 1) * (2 * v - 1) * ((v * v) - v + 1) * (w * w * w * w) - (v * v) * (v + 2) * (3 * v - 2) * ((v * v) - v + 1) * (w * w * w) + ((v * v) + v - 1) * ((v * v * v * v) + 2 * (v * v * v) - 3 * (v * v) + 2 * v - 1) * (w * w) - (v - 1) * (2 * (v * v * v * v) + 3 * (v * v * v) - 4 * (v * v) + 2 * v - 1) * w + ((v - 1) * (v - 1)) * (2 * (v * v) - v + 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (16 * N4 * N * (v - 1) * vC * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (4 * (v * v * v * v * v * v) * (w * w * w * w * w) - 4 * (v * v * v * v * v) * (v + 1) * (w * w * w * w) + (v * v * v * v) * (8 * (v * v) - 11 * v + 19) * (w * w * w) - 2 * (v * v * v) * ((v * v) + v + 4) * (w * w) - ((v * v) - v + 1) * (2 * (v * v * v) - 5 * (v * v) - 9 * v + 4) * w - 4 * (((v * v) - v + 1) * ((v * v) - v + 1))) - 16 * GTR * N2 * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 8 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 8 * GTR * N4 * ((v - 1) * (v - 1)) * v * vC * w * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(1 - v * w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (16 * N4 * N * (v - 1) * vC * (v * w - v + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v - 1) * v * w * ((v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v - 2) * (v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v) * (9 * (v * v * v) - 16 * (v * v) + 6 * v - 1) * (w * w * w * w) + 4 * (v - 1) * (v * v * v) * (3 * (v * v * v) - 3 * (v * v) + 2 * v - 1) * (w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (9 * (v * v * v) - 6 * (v * v) + 11 * v - 6) * (w * w) + 2 * ((v - 1) * (v - 1) * (v - 1)) * v * ((v * v * v) - (v * v) + 4 * v - 2) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1)) + 4 * CQ * (w - v + 1) * (v * w + 1) * (v * w + ((v - 1) * (v - 1))) * ((v * v) * w - ((v - 1) * (v - 1))) * ((v * v) * w - v + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1)))) + 8 * GTR * N4 * ((v - 1) * (v - 1)) * v * vC * w * (v * w - v + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * (-(v * v * v * v * v * v * v) * (w * w * w * w * w * w) + (v * v * v * v * v * v) * (v + 1) * (w * w * w * w * w) + CQ * v * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) + (v * v * v * v) * ((v * v * v) - 4 * (v * v) + 2 * v - 1) * (w * w * w * w) - 2 * (v - 2) * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * ((v * v * v) - 6 * (v * v) + 7 * v - 6) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * ((v * v) + v - 4) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v + 1) * ((v * v) - v + 1)) + 8 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * (CQ * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) + 4 * (v - 1) * (v * v) * (w - 1) * w) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) - 16 * GTR * N2 * ((v - 1) * (v - 1)) * (v * v) * vC * w * (v * w - v + 1) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * (CQ * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - (v - 1) * v * w + ((v - 1) * (v - 1))) - (v - 1) * v * w * (3 * (v * v) * (w * w) - 4 * (v - 1) * v * w + 3 * ((v - 1) * (v - 1)))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1)) * std::log(v * w - v + 1) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (16 * N4 * N * (v - 1) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (v * v * v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) - (v * v * v * v * v * v) * (8 * (v * v) - 13 * v + 13) * (w * w * w * w * w) + (v * v * v * v) * (14 * (v * v * v * v) - 29 * (v * v * v) + 30.0l * (v * v) - 2 * v + 1) * (w * w * w * w) - 2 * (v * v) * (7 * (v * v * v * v * v * v) - 15 * (v * v * v * v * v) + 12 * (v * v * v * v) + 8 * (v * v * v) - 9 * (v * v) + 6 * v - 2) * (w * w * w) + (v * v) * (10 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) + 26 * (v * v * v * v) - 3 * (v * v * v) - (v * v) + 3 * v - 1) * (w * w) - 4 * ((v * v) - v + 1) * ((v * v * v * v * v * v) - (v * v * v * v * v) - (v * v * v * v) + 3 * (v * v * v) + (v * v) - 3 * v + 1) * w + 2 * (v - 1) * (((v * v) - v + 1) * ((v * v) - v + 1)) * (2 * (v * v) - 3 * v + 3)) - 4 * GTR * N4 * ((v - 1) * (v - 1)) * vC * w * (CQ * (((v * v) - 2 * v + 2) * ((v * v) - 2 * v + 2)) * (2 * (w * w) - 2 * w + 1) - 2 * (v * v) * ((v * v) * w - v + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 8 * GTR * N2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v) * (2 * (v * v * v * v) * (w * w * w * w) - (v * v) * (5 * (v * v) - 2 * v + 2) * (w * w * w) + 3 * (v * v) * ((v * v) + v - 1) * (w * w) - 2 * ((v * v * v * v) + (v * v) - 2 * v + 1) * w + (v - 1) * (2 * (v * v) - v + 1)) + CQ * ((v * v) - 2 * v + 2) * ((v * v) - v + 1) * (v * w - 1) * (v * w - v + 1) * (2 * (w * w) - 2 * w + 1)) - 4 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * ((v * v * v * v) * (w * w * w * w) - (v * v) * ((v * v) + 2 * v - 2) * (w * w * w) + 5 * (v - 1) * (v * v) * (w * w) - 2 * (v - 1) * (2 * (v * v) - v + 1) * w + 2 * (v - 1) * ((v * v) - v + 1)) + CQ * ((v * v) - 2 * v + 2) * (v * w - 1) * (v * w - v + 1) * (2 * (w * w) - 2 * w + 1))) * std::log(w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-8 * N4 * N * (v - 1) * vC * (v * w - 1) * (v * w - v + 1) * ((v - 1) * (v * v * v * v * v * v * v * v) * (17 * (v * v * v * v) - 50 * (v * v * v) + 90 * (v * v) - 80 * v + 40) * (w * w * w * w * w * w * w * w * w * w) - 2 * (v - 1) * (v * v * v * v * v * v * v * v) * (34 * (v * v * v * v) - 114 * (v * v * v) + 213 * (v * v) - 198 * v + 99) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (11 * (v * v * v * v * v * v * v * v) + 103 * (v * v * v * v * v * v * v) - 571 * (v * v * v * v * v * v) + 1145 * (v * v * v * v * v) - 935 * (v * v * v * v) - 13 * (v * v * v) + 751 * (v * v) - 640 * v + 160) * (w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (33 * (v * v * v * v * v * v * v * v) + 71 * (v * v * v * v * v * v * v) - 602 * (v * v * v * v * v * v) + 806 * (v * v * v * v * v) + 869 * (v * v * v * v) - 3296 * (v * v * v) + 4048 * (v * v) - 2528 * v + 632) * (w * w * w * w * w * w * w) + (v * v * v * v) * (33 * (v * v * v * v * v * v * v * v * v * v) + 81 * (v * v * v * v * v * v * v * v * v) - 642 * (v * v * v * v * v * v * v * v) + 796 * (v * v * v * v * v * v * v) + 1121 * (v * v * v * v * v * v) - 3554 * (v * v * v * v * v) + 3350 * (v * v * v * v) - 416 * (v * v * v) - 1696 * (v * v) + 1200 * v - 240) * (w * w * w * w * w * w) - (v * v * v * v) * (11 * (v * v * v * v * v * v * v * v * v * v) + 123 * (v * v * v * v * v * v * v * v * v) - 651 * (v * v * v * v * v * v * v * v) + 1137 * (v * v * v * v * v * v * v) - 719 * (v * v * v * v * v * v) + 743 * (v * v * v * v * v) - 3309 * (v * v * v * v) + 6872 * (v * v * v) - 7028 * (v * v) + 3540 * v - 708) * (w * w * w * w * w) + (v - 1) * (v * v) * (61 * (v * v * v * v * v * v * v * v * v * v) - 124 * (v * v * v * v * v * v * v * v * v) + 13 * (v * v * v * v * v * v * v * v) - 168 * (v * v * v * v * v * v * v) + 1657 * (v * v * v * v * v * v) - 3402 * (v * v * v * v * v) + 3178 * (v * v * v * v) - 792 * (v * v * v) - 1002 * (v * v) + 800 * v - 160) * (w * w * w * w) - ((v - 1) * (v - 1)) * (v * v) * (84 * (v * v * v * v * v * v * v * v) - 166 * (v * v * v * v * v * v * v) - 183 * (v * v * v * v * v * v) + 818 * (v * v * v * v * v) - 397 * (v * v * v * v) - 888 * (v * v * v) + 1752 * (v * v) - 1248 * v + 312) * (w * w * w) + ((v - 1) * (v - 1) * (v - 1)) * (86 * (v * v * v * v * v * v * v * v) - 285 * (v * v * v * v * v * v * v) + 382 * (v * v * v * v * v * v) - 24 * (v * v * v * v * v) - 373 * (v * v * v * v) + 350 * (v * v * v) + 70 * (v * v) - 160 * v + 40) * (w * w) - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (29 * (v * v * v * v * v * v) - 47 * (v * v * v * v * v) + 87 * (v * v * v * v) - 42 * (v * v * v) - 74 * (v * v) + 114 * v - 38) * w + 17 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1))) + 8 * GTR * N4 * (v - 1) * vC * (v * w - 1) * (v * w - v + 1) * ((v - 1) * (v * v * v * v * v * v * v * v) * (7 * (v * v * v * v) - 34 * (v * v * v) + 78 * (v * v) - 88 * v + 44) * (w * w * w * w * w * w * w * w * w * w) - (v - 1) * (v * v * v * v * v * v * v * v) * (31 * (v * v * v * v) - 156 * (v * v * v) + 372 * (v * v) - 432 * v + 216) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (4 * (v * v * v * v * v * v * v * v) + 53 * (v * v * v * v * v * v * v) - 368 * (v * v * v * v * v * v) + 922 * (v * v * v * v * v) - 1015 * (v * v * v * v) + 172 * (v * v * v) + 764 * (v * v) - 704 * v + 176) * (w * w * w * w * w * w * w * w) - 2 * (v * v * v * v * v * v) * (6 * (v * v * v * v * v * v * v * v) + 23 * (v * v * v * v * v * v * v) - 194 * (v * v * v * v * v * v) + 314 * (v * v * v * v * v) + 257 * (v * v * v * v) - 1460 * (v * v * v) + 2092 * (v * v) - 1376 * v + 344) * (w * w * w * w * w * w * w) + (v * v * v * v) * (12 * (v * v * v * v * v * v * v * v * v * v) + 45 * (v * v * v * v * v * v * v * v * v) - 381 * (v * v * v * v * v * v * v * v) + 602 * (v * v * v * v * v * v * v) + 694 * (v * v * v * v * v * v) - 3226 * (v * v * v * v * v) + 3670 * (v * v * v * v) - 640 * (v * v * v) - 1820 * (v * v) + 1320 * v - 264) * (w * w * w * w * w * w) - (v * v * v * v) * (4 * (v * v * v * v * v * v * v * v * v * v) + 51 * (v * v * v * v * v * v * v * v * v) - 351 * (v * v * v * v * v * v * v * v) + 876 * (v * v * v * v * v * v * v) - 952 * (v * v * v * v * v * v) + 892 * (v * v * v * v * v) - 3060 * (v * v * v * v) + 6976 * (v * v * v) - 7504 * (v * v) + 3840 * v - 768) * (w * w * w * w * w) + (v - 1) * (v * v) * (23 * (v * v * v * v * v * v * v * v * v * v) - 95 * (v * v * v * v * v * v * v * v * v) + 287 * (v * v * v * v * v * v * v * v) - 834 * (v * v * v * v * v * v * v) + 2174 * (v * v * v * v * v * v) - 3702 * (v * v * v * v * v) + 3362 * (v * v * v * v) - 768 * (v * v * v) - 1128 * (v * v) + 880 * v - 176) * (w * w * w * w) - 2 * ((v - 1) * (v - 1)) * (v * v) * (9 * (v * v * v * v * v * v * v * v) + 20 * (v * v * v * v * v * v * v) - 213 * (v * v * v * v * v * v) + 422 * (v * v * v * v * v) - 133 * (v * v * v * v) - 564 * (v * v * v) + 972 * (v * v) - 672 * v + 168) * (w * w * w) + ((v - 1) * (v - 1) * (v - 1)) * (34 * (v * v * v * v * v * v * v * v) - 138 * (v * v * v * v * v * v * v) + 173 * (v * v * v * v * v * v) + 72 * (v * v * v * v * v) - 347 * (v * v * v * v) + 250 * (v * v * v) + 122 * (v * v) - 176 * v + 44) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v * v * v * v * v) - 29 * (v * v * v * v * v) + 33 * (v * v * v * v) - 48 * (v * v * v) + 124 * (v * v) - 120 * v + 40) * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (7 * (v * v) - 4 * v + 4)) + 24 * GTR * N2 * ((v - 1) * (v - 1)) * vC * (v * w - 1) * (v * w - v + 1) * (2 * (v - 1) * (v * v * v * v * v * v * v * v) * (5 * (v * v) - 6 * v + 6) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * ((v * v * v * v) - 46 * (v * v * v) + 106 * (v * v) - 120 * v + 60) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (4 * (v * v * v * v * v * v) - 95 * (v * v * v * v * v) + 175 * (v * v * v * v) - 112 * (v * v * v) - 64 * (v * v) + 144 * v - 48) * (w * w * w * w * w * w * w * w) + 6 * (v * v * v * v * v * v) * ((v * v * v * v * v * v) - 18 * (v * v * v * v * v) + 14 * (v * v * v * v) + 40 * (v * v * v) - 100 * (v * v) + 96 * v - 32) * (w * w * w * w * w * w * w) - 2 * (v * v * v * v) * (2 * (v * v * v * v * v * v * v * v) - 49 * (v * v * v * v * v * v * v) + 35 * (v * v * v * v * v * v) + 142 * (v * v * v * v * v) - 320 * (v * v * v * v) + 198 * (v * v * v) + 102 * (v * v) - 144 * v + 36) * (w * w * w * w * w * w) + (v * v * v * v) * ((v * v * v * v * v * v * v * v) - 80 * (v * v * v * v * v * v * v) + 166 * (v * v * v * v * v * v) - 136 * (v * v * v * v * v) + 194 * (v * v * v * v) - 756 * (v * v * v) + 1260 * (v * v) - 864 * v + 216) * (w * w * w * w * w) + (v - 1) * (v * v) * (41 * (v * v * v * v * v * v * v * v) - 88 * (v * v * v * v * v * v * v) + 218 * (v * v * v * v * v * v) - 436 * (v * v * v * v * v) + 610 * (v * v * v * v) - 336 * (v * v * v) - 112 * (v * v) + 192 * v - 48) * (w * w * w * w) - 2 * (v - 1) * (v * v) * (5 * (v * v * v * v * v * v * v * v) - 11 * (v * v * v * v * v * v * v) + 49 * (v * v * v * v * v * v) - 80 * (v * v * v * v * v) + 2 * (v * v * v * v) + 180 * (v * v * v) - 284 * (v * v) + 192 * v - 48) * (w * w * w) + 2 * ((v - 1) * (v - 1)) * (4 * (v * v * v * v * v * v * v * v) + 2 * (v * v * v * v * v * v * v) - 6 * (v * v * v * v * v * v) - 11 * (v * v * v * v * v) + 47 * (v * v * v * v) - 33 * (v * v * v) - 17 * (v * v) + 24 * v - 6) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (10 * (v * v * v * v * v * v) - 29 * (v * v * v * v * v) + 35 * (v * v * v * v) - 24 * (v * v * v) + 42 * (v * v) - 36 * v + 12) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v)) - 24 * AL * GTR * N2 * ((v - 1) * (v - 1)) * vC * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (3 * (v * v * v * v) - 6 * (v * v * v) + 10 * (v * v) - 8 * v + 4) * (w * w * w * w * w * w) - (v * v * v) * (4 * (v * v * v * v * v) + 3 * (v * v * v * v) - 14 * (v * v * v) + 32 * (v * v) - 28 * v + 16) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v) + 5 * (v * v * v * v * v) - 4 * (v * v * v * v) + 30.0l * (v * v) - 32 * v + 24) * (w * w * w * w) - 2 * v * (3 * (v * v * v * v * v * v) + (v * v * v * v * v) - 3 * (v * v * v * v) + 10 * (v * v * v) - 4 * v + 8) * (w * w * w) + (10 * (v * v * v * v * v * v) - 12 * (v * v * v * v * v) + 11 * (v * v * v * v) + 10 * (v * v * v) - 10 * (v * v) + 8 * v + 4) * (w * w) - (6 * (v * v * v * v * v) - 10 * (v * v * v * v) + 15 * (v * v * v) - 6 * (v * v) + 4) * w + 3 * (v * v * v * v) - 5 * (v * v * v) + 6 * (v * v) - 4 * v + 2) + 12 * AL * GTR * N4 * ((v - 1) * (v - 1)) * vC * (v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (3 * (v * v * v * v) - 8 * (v * v * v) + 16 * (v * v) - 16 * v + 8) * (w * w * w * w * w * w) - 4 * (v * v * v) * ((v * v * v * v * v) - 4 * (v * v * v) + 12 * (v * v) - 14 * v + 8) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 9 * (v * v * v * v) + 8 * (v * v * v) + 36 * (v * v) - 64 * v + 48) * (w * w * w * w) - 4 * v * ((v * v * v * v * v * v) - 2 * (v * v * v * v) + 8 * (v * v * v) - 4 * (v * v) - 4 * v + 8) * (w * w * w) + (10 * (v * v * v * v * v * v) - 20 * (v * v * v * v * v) + 21 * (v * v * v * v) + 8 * (v * v * v) - 24 * (v * v) + 16 * v + 8) * (w * w) - 4 * ((v * v * v * v * v) - 3 * (v * v * v * v) + 6 * (v * v * v) - 4 * (v * v) + 2) * w + 3 * (v * v * v * v) - 6 * (v * v * v) + 9 * (v * v) - 8 * v + 4) - 24 * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * ((v * v) * (w * w) + (v * v) - 2 * v + 2) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + 12 * AL * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v) * (3 * (v * v) - 4 * v + 4) * (w * w * w * w) - 4 * v * ((v * v * v) - v + 2) * (w * w * w) + (3 * (v * v * v * v) - 2 * (v * v) + 4 * v + 4) * (w * w) - 2 * ((v * v * v) + 2) * w + 3 * (v * v) - 4 * v + 3) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 24 * CQ * GTR * ((v - 1) * (v - 1)) * (v * v) * vC * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) - 24 * CQ * GTR * N4 * ((v - 1) * (v - 1)) * (v * v) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) + 48 * CQ * GTR * N2 * ((v - 1) * (v - 1)) * (v * v) * vC * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1)) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * w * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 3.0l + std::log(S / q2_fac) * (-32 * N4 * N * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v * v) * (v + 5) * (w * w * w * w * w * w * w * w) + (v * v * v * v) * (3 * (v * v * v * v * v * v) - 2 * (v * v * v * v * v) + 21 * (v * v * v * v) - 7 * (v * v * v) + 6 * (v * v) - 3 * v + 1) * (w * w * w * w * w * w * w) - (v * v * v) * ((v * v * v * v * v * v * v) + 9 * (v * v * v * v * v * v) - 9 * (v * v * v * v * v) + 47 * (v * v * v * v) - 22 * (v * v * v) + 21 * (v * v) - 11 * v + 4) * (w * w * w * w * w * w) + (v * v) * ((v * v * v * v * v * v * v * v) + 18 * (v * v * v * v * v * v) - 12 * (v * v * v * v * v) + 53 * (v * v * v * v) - 18 * (v * v * v) + 24 * (v * v) - 14 * v + 6) * (w * w * w * w * w) - v * ((v * v * v * v * v * v * v * v * v) + (v * v * v * v * v * v * v * v) + 20 * (v * v * v * v * v * v) - 3 * (v * v * v * v * v) + 27 * (v * v * v * v) + 10 * (v * v * v) + 6 * (v * v) - 6 * v + 4) * (w * w * w * w) + (4 * (v * v * v * v * v * v * v * v * v) - 6 * (v * v * v * v * v * v * v * v) + 13 * (v * v * v * v * v * v * v) + 2 * (v * v * v * v * v * v) + 15 * (v * v * v * v * v) - 2 * (v * v * v * v) + 25 * (v * v * v) - 6 * (v * v) + v + 1) * (w * w * w) - (6 * (v * v * v * v * v * v * v * v) - 14 * (v * v * v * v * v * v * v) + 30.0l * (v * v * v * v * v * v) - 27 * (v * v * v * v * v) + 34 * (v * v * v * v) - 17 * (v * v * v) + 18 * (v * v) - 3 * v + 1) * (w * w) + v * ((v * v) - v + 1) * (4 * (v * v * v * v) - 7 * (v * v * v) + 13 * (v * v) - 7 * v + 8) * w - (((v * v) - v + 1) * ((v * v) - v + 1)) * ((v * v) - v + 2)) + 8 * GTR * N2 * (v - 1) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (3 * (v * v * v * v) - 6 * (v * v * v) + 10 * (v * v) - 8 * v + 4) * (w * w * w * w * w * w) - (v * v * v) * (4 * (v * v * v * v * v) + 3 * (v * v * v * v) - 14 * (v * v * v) + 32 * (v * v) - 28 * v + 16) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v) + 5 * (v * v * v * v * v) - 4 * (v * v * v * v) + 30.0l * (v * v) - 32 * v + 24) * (w * w * w * w) - 2 * v * (3 * (v * v * v * v * v * v) + (v * v * v * v * v) - 3 * (v * v * v * v) + 10 * (v * v * v) - 4 * v + 8) * (w * w * w) + (10 * (v * v * v * v * v * v) - 12 * (v * v * v * v * v) + 11 * (v * v * v * v) + 10 * (v * v * v) - 10 * (v * v) + 8 * v + 4) * (w * w) - (6 * (v * v * v * v * v) - 10 * (v * v * v * v) + 15 * (v * v * v) - 6 * (v * v) + 4) * w + 3 * (v * v * v * v) - 5 * (v * v * v) + 6 * (v * v) - 4 * v + 2) - 4 * GTR * N4 * (v - 1) * vC * w * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (3 * (v * v * v * v) - 8 * (v * v * v) + 16 * (v * v) - 16 * v + 8) * (w * w * w * w * w * w) - 4 * (v * v * v) * ((v * v * v * v * v) - 4 * (v * v * v) + 12 * (v * v) - 14 * v + 8) * (w * w * w * w * w) + (v * v) * (3 * (v * v * v * v * v * v) + 2 * (v * v * v * v * v) - 9 * (v * v * v * v) + 8 * (v * v * v) + 36 * (v * v) - 64 * v + 48) * (w * w * w * w) - 4 * v * ((v * v * v * v * v * v) - 2 * (v * v * v * v) + 8 * (v * v * v) - 4 * (v * v) - 4 * v + 8) * (w * w * w) + (10 * (v * v * v * v * v * v) - 20 * (v * v * v * v * v) + 21 * (v * v * v * v) + 8 * (v * v * v) - 24 * (v * v) + 16 * v + 8) * (w * w) - 4 * ((v * v * v * v * v) - 3 * (v * v * v * v) + 6 * (v * v * v) - 4 * (v * v) + 2) * w + 3 * (v * v * v * v) - 6 * (v * v * v) + 9 * (v * v) - 8 * v + 4) - 4 * GTR * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (3 * (v * v) - 4 * v + 4) * (w * w * w * w) - 4 * v * ((v * v * v) - v + 2) * (w * w * w) + (3 * (v * v * v * v) - 2 * (v * v) + 4 * v + 4) * (w * w) - 2 * ((v * v * v) + 2) * w + 3 * (v * v) - 4 * v + 3) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(S / q2_fragm) * (-32 * N4 * N * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v * v) * (6 * v - 5) * (w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v) * (18 * (v * v) - 31 * v + 15) * (w * w * w * w * w * w * w) - (v - 1) * (v * v * v * v * v * v * v) * (35 * (v * v) - 57 * v + 30.0l) * (w * w * w * w * w * w) + (v - 1) * (v * v * v * v) * (47 * (v * v * v * v * v) - 120 * (v * v * v * v) + 114 * (v * v * v) - 41 * (v * v) - 2 * v + 1) * (w * w * w * w * w) - ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (45 * (v * v * v * v) - 66 * (v * v * v) + 39 * (v * v) + 3 * v - 4) * (w * w * w * w) + ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (32 * (v * v * v * v * v) - 75 * (v * v * v * v) + 72 * (v * v * v) - 24 * (v * v) - 8 * v + 6) * (w * w * w) - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (17 * (v * v * v * v * v) - 38 * (v * v * v * v) + 40 * (v * v * v) - 16 * (v * v) - 2 * v + 4) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - v + 1) * (6 * (v * v * v) - 7 * (v * v) + 3 * v + 1) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (((v * v) - v + 1) * ((v * v) - v + 1))) - 4 * GTR * N4 * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) + 8 * GTR * N2 * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) - 4 * GTR * (v - 1) * (v * v) * vC * w * ((v * v) * (w * w) + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v) * (w * w) - 2 * (v * v) * w + (v * v) + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1)) / (N2 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    case 15:
        return std::log(1 - w) * (-N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (16 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) - 16 * (v * v * v * v * v * v * v * v * v * v) * (5 * v - 1) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (224 * (v * v * v * v * v) - 141 * (v * v * v * v) + 23 * (v * v * v) + 4 * (v * v) + 2) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (384 * (v * v * v * v * v) - 323 * (v * v * v * v) - 28 * (v * v * v) + 79 * (v * v) + 8) * (w * w * w * w * w * w * w * w) + (v * v * v * v) * (416 * (v * v * v * v * v * v * v) - 280 * (v * v * v * v * v * v) - 431 * (v * v * v * v * v) + 470 * (v * v * v * v) - 88 * (v * v * v) + 5 * (v * v) + 6 * v - 6) * (w * w * w * w * w * w * w) - (v * v * v * v) * (320 * (v * v * v * v * v * v * v) - 120 * (v * v * v * v * v * v) - 770 * (v * v * v * v * v) + 829 * (v * v * v * v) - 170 * (v * v * v) - 37 * (v * v) + 18 * v - 18) * (w * w * w * w * w * w) + (v * v) * (192 * (v * v * v * v * v * v * v * v * v) - 35 * (v * v * v * v * v * v * v * v) - 679 * (v * v * v * v * v * v * v) + 670 * (v * v * v * v * v * v) + 129 * (v * v * v * v * v) - 358 * (v * v * v * v) + 122 * (v * v * v) - 15 * (v * v) - 12 * v + 6) * (w * w * w * w * w) - (v * v) * (80 * (v * v * v * v * v * v * v * v * v) + 83 * (v * v * v * v * v * v * v * v) - 710 * (v * v * v * v * v * v * v) + 903 * (v * v * v * v * v * v) - 244 * (v * v * v * v * v) - 203 * (v * v * v * v) + 98 * (v * v * v) + 9 * (v * v) - 24 * v + 12) * (w * w * w * w) + (v - 1) * (16 * (v * v * v * v * v * v * v * v * v * v) + 144 * (v * v * v * v * v * v * v * v * v) - 413 * (v * v * v * v * v * v * v * v) + 265 * (v * v * v * v * v * v * v) + 223 * (v * v * v * v * v * v) - 298 * (v * v * v * v * v) + 67 * (v * v * v * v) + 29 * (v * v * v) - 15 * (v * v) - 4 * v + 2) * (w * w * w) - ((v - 1) * (v - 1)) * (48 * (v * v * v * v * v * v * v * v) - 293 * (v * v * v * v * v * v) + 522 * (v * v * v * v * v) - 320 * (v * v * v * v) + 60 * (v * v * v) + 7 * (v * v) + 2 * v - 2) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (12 * (v * v) - 13 * v + 5) * (4 * (v * v * v * v) - 5 * (v * v * v) - (v * v) + 5 * v + 1) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 32 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) + 16 * (v * v * v * v * v * v * v * v * v) * (8 * (v * v) + v - 1) * (w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (288 * (v * v * v * v * v) - 51 * (v * v * v * v) + 13 * (v * v * v) - 44 * (v * v) + 20 * v - 2) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (448 * (v * v * v * v * v) - 335 * (v * v * v * v) + 262 * (v * v * v) - 243 * (v * v) + 116 * v - 8) * (w * w * w * w * w * w * w * w) - (v * v * v * v) * (448 * (v * v * v * v * v * v * v) - 398 * (v * v * v * v * v * v) - 13 * (v * v * v * v * v) + 294 * (v * v * v * v) - 276 * (v * v * v) + 189 * (v * v) - 66 * v + 6) * (w * w * w * w * w * w * w) + (v * v * v * v) * (320 * (v * v * v * v * v * v * v) - 206 * (v * v * v * v * v * v) - 732 * (v * v * v * v * v) + 1539 * (v * v * v * v) - 1246 * (v * v * v) + 621 * (v * v) - 210 * v + 18) * (w * w * w * w * w * w) - (v * v) * (224 * (v * v * v * v * v * v * v * v * v) - 239 * (v * v * v * v * v * v * v * v) - 489 * (v * v * v * v * v * v * v) + 952 * (v * v * v * v * v * v) - 29 * (v * v * v * v * v) - 768 * (v * v * v * v) + 590 * (v * v * v) - 267 * (v * v) + 72 * v - 6) * (w * w * w * w * w) + (v * v) * (128 * (v * v * v * v * v * v * v * v * v) - 83 * (v * v * v * v * v * v * v * v) - 666 * (v * v * v * v * v * v * v) + 1167 * (v * v * v * v * v * v) - 82 * (v * v * v * v * v) - 1091 * (v * v * v * v) + 948 * (v * v * v) - 425 * (v * v) + 124 * v - 12) * (w * w * w * w) - (v - 1) * (32 * (v * v * v * v * v * v * v * v * v * v) + 208 * (v * v * v * v * v * v * v * v * v) - 815 * (v * v * v * v * v * v * v * v) + 903 * (v * v * v * v * v * v * v) - 147 * (v * v * v * v * v * v) - 96 * (v * v * v * v * v) - 197 * (v * v * v * v) + 229 * (v * v * v) - 107 * (v * v) + 24 * v - 2) * (w * w * w) + ((v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v * v * v) - 64 * (v * v * v * v * v * v * v) - 439 * (v * v * v * v * v * v) + 938 * (v * v * v * v * v) - 648 * (v * v * v * v) + 172 * (v * v * v) + (v * v) - 10 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v) - 240 * (v * v * v * v * v) + 199 * (v * v * v * v) + 26 * (v * v * v) - 76 * (v * v) + 18 * v + 9) * w + 8 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) + 2 * N2 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * ((v * v * v) * (3 * (v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w) - (v * v) * (4 * (v * v * v * v * v) + 5 * (v * v * v * v) - 5 * (v * v * v) + 10 * (v * v) - 4 * v + 6) * (w * w * w * w * w) + v * (3 * (v * v * v * v * v * v) + 7 * (v * v * v * v * v) + 4 * (v * v * v * v) - 3 * (v * v * v) + 9 * (v * v) + 6) * (w * w * w * w) - (9 * (v * v * v * v * v * v) + (v * v * v * v * v) + 7 * (v * v * v * v) - 8 * (v * v * v) + 7 * (v * v) + 4 * v + 2) * (w * w * w) + (13 * (v * v * v * v * v) - 13 * (v * v * v * v) + 17 * (v * v * v) - 16 * (v * v) + 7 * v + 2) * (w * w) - (9 * (v * v * v * v) - 13 * (v * v * v) + 12 * (v * v) - 9 * v + 3) * w + 2 * (v - 1) * (2 * (v * v) - 2 * v + 1)) - (v * w - 1) * (4 * (v * v * v) * ((v * v * v) + (v * v) - v + 1) * (w * w * w * w * w) - 2 * (v * v) * (3 * (v * v * v * v) + 2 * (v * v * v) + 5 * (v * v) - 2 * v + 4) * (w * w * w * w) + v * (4 * (v * v * v * v * v) + 8 * (v * v * v * v) - 2 * (v * v * v) + 5 * (v * v) + 9 * v + 4) * (w * w * w) - v * (16 * (v * v * v * v) - 22 * (v * v * v) + 23 * (v * v) - 15 * v + 14) * (w * w) + (16 * (v * v * v * v) - 28 * (v * v * v) + 25 * (v * v) - 14 * v + 5) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1))) - ((v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * ((v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 2 * v - 2) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v) + 3 * (v * v * v) - 2 * (v * v) + 2 * v - 3) * (w * w * w * w) + v * (3 * (v * v * v * v * v) + 7 * (v * v * v * v) + 4 * (v * v * v) - (v * v) - 6) * (w * w * w) - (7 * (v * v * v * v * v) + 3 * (v * v * v * v) + (v * v * v) + (v * v) - 4 * v - 2) * (w * w) + (7 * (v * v * v * v) - 5 * (v * v * v) + 3 * (v * v) - v - 2) * w - (v - 1) * ((v * v) + 1)) - (v * v * v) * (5 * (v * v * v) - 2 * (v * v) + 2 * v - 2) * (w * w * w * w * w) + 2 * (v * v) * (4 * (v * v * v * v) + 6 * (v * v * v) - 2 * (v * v) + 2 * v - 3) * (w * w * w * w) - v * (5 * (v * v * v * v * v) + 19 * (v * v * v * v) + 12 * (v * v * v) - (v * v) - 6) * (w * w * w) + (13 * (v * v * v * v * v) + 15 * (v * v * v * v) + 9 * (v * v * v) + (v * v) - 4 * v - 2) * (w * w) - (13 * (v * v * v * v) - (v * v * v) + 9 * (v * v) - v - 2) * w + (3 * v - 1) * ((v * v) + 1))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(1 - v) * (N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * ((v * v) * (w * w) - 2 * v * w + 1) * (16 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w * w) - 40 * (v * v * v * v * v * v * v) * (w * w * w * w * w * w) + 2 * (v * v * v * v) * (32 * (v * v * v) - 19 * (v * v) + 7 * v + 4) * (w * w * w * w * w) - (v * v * v * v) * (56 * (v * v * v) - 57 * (v * v) + 23 * v + 14) * (w * w * w * w) + (v * v) * (24 * (v * v * v * v * v) - 20 * (v * v * v * v) - 9 * (v * v * v) + 31 * (v * v) - 4 * v - 6) * (w * w * w) - (v * v) * (8 * (v * v * v * v * v) - 11 * (v * v * v * v) + 17 * (v * v * v) - 21 * (v * v) + 23 * v - 12) * (w * w) + (v - 1) * (8 * (v * v * v * v * v) - 3 * (v * v * v * v) + 3 * (v * v) - 2 * v + 2) * w - 4 * ((v - 1) * (v - 1)) * v * (2 * (v * v) - 2 * v + 1)) + CQ * (v - 1) * (v * w - v + 1) * ((v * v * v * v * v * v) * (16 * v - 15) * (w * w * w * w * w * w) + 2 * (v * v * v * v * v) * (8 * (v * v) - 41 * v + 30.0l) * (w * w * w * w * w) - (v * v * v) * (46 * (v * v * v) - 150 * (v * v) + 87 * v + 4) * (w * w * w * w) + 4 * (v * v) * (10 * (v * v * v) - 30.0l * (v * v) + 12 * v + 3) * (w * w * w) + 4 * v * (8 * (v * v) + v - 3) * (w * w) - 4 * (4 * (v * v * v) - 2 * (v * v) + 3 * v - 1) * w + 4 * (2 * (v * v) - 2 * v + 1))) - 2 * N2 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (v - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v * v * v) * (2 * v + 3) * (w * w * w * w * w) + 2 * (v * v * v) * ((v * v * v) + 2 * (v * v) + 3 * v - 1) * (w * w * w * w) - (v * v) * (6 * (v * v * v) + 4 * (v * v) + 9 * v - 6) * (w * w * w) + v * (10 * (v * v * v) - 2 * (v * v) + 11 * v - 6) * (w * w) - 2 * (4 * (v * v * v) - 2 * (v * v) + 3 * v - 1) * w + 2 * (2 * (v * v) - 2 * v + 1)) + (2 * (v * v) * (5 * v - 1) * (w * w * w) - (v * v) * (7 * v + 1) * (w * w) + v * ((v * v * v) + 4 * (v * v) - 3 * v + 2) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1)) + ((v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * (2 * (v - 1) * ((v * v) - 2 * v + 2) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) + CQ * (v * v) * w * ((v * v) * (w * w) - 2 * v * w + 2) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(v) * (-N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (CQ * (16 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) - 16 * (v * v * v * v * v * v * v * v * v * v) * (5 * v - 1) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v * v * v * v) * (224 * (v * v) - 143 * v + 23) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v * v * v) * (384 * (v * v * v) - 331 * (v * v) - 28 * v + 63) * (w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (416 * (v * v * v * v * v) - 293 * (v * v * v * v) - 437 * (v * v * v) + 450 * (v * v) - 100 * v + 4) * (w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (320 * (v * v * v * v * v) - 131 * (v * v * v * v) - 788 * (v * v * v) + 825 * (v * v) - 206 * v - 12) * (w * w * w * w * w * w) + (v - 1) * (v * v * v * v) * (192 * (v * v * v * v * v * v) + 152 * (v * v * v * v * v) - 548 * (v * v * v * v) + 127 * (v * v * v) + 226 * (v * v) - 113 * v + 12) * (w * w * w * w * w) - (v - 1) * (v * v * v * v) * (80 * (v * v * v * v * v * v) + 162 * (v * v * v * v * v) - 560 * (v * v * v * v) + 341 * (v * v * v) + 97 * (v * v) - 119 * v + 15) * (w * w * w * w) + 4 * (v - 1) * (v * v) * (4 * (v * v * v * v * v * v * v * v) + 36 * (v * v * v * v * v * v * v) - 104 * (v * v * v * v * v * v) + 64 * (v * v * v * v * v) + 56 * (v * v * v * v) - 78 * (v * v * v) + 19 * (v * v) + 7 * v - 3) * (w * w * w) - 4 * ((v - 1) * (v - 1)) * (v * v) * (12 * (v * v * v * v * v * v) - 74 * (v * v * v * v) + 130 * (v * v * v) - 81 * (v * v) + 14 * v + 2) * (w * w) + 4 * ((v - 1) * (v - 1) * (v - 1)) * (12 * (v * v * v * v * v * v) - 28 * (v * v * v * v * v) + 18 * (v * v * v * v) + 12 * (v * v * v) - 15 * (v * v) + 3 * v + 1) * w - 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 4 * v + 3) * (2 * (v * v) - 2 * v + 1)) - 32 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) + 144 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (352 * (v * v * v * v * v) - 109 * (v * v * v * v) + 71 * (v * v * v) - 44 * (v * v) + 20 * v - 2) * (w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (576 * (v * v * v * v * v) - 435 * (v * v * v * v) + 316 * (v * v * v) - 185 * (v * v) + 80 * v - 8) * (w * w * w * w * w * w * w * w) - (v * v * v * v) * (624 * (v * v * v * v * v * v * v) - 552 * (v * v * v * v * v * v) + 5 * (v * v * v * v * v) + 446 * (v * v * v * v) - 380 * (v * v * v) + 189 * (v * v) - 66 * v + 6) * (w * w * w * w * w * w * w) + (v * v * v * v) * (480 * (v * v * v * v * v * v * v) - 340 * (v * v * v * v * v * v) - 858 * (v * v * v * v * v) + 1885 * (v * v * v * v) - 1470 * (v * v * v) + 627 * (v * v) - 198 * v + 18) * (w * w * w * w * w * w) - (v * v) * (304 * (v * v * v * v * v * v * v * v * v) - 219 * (v * v * v * v * v * v * v * v) - 927 * (v * v * v * v * v * v * v) + 1698 * (v * v * v * v * v * v) - 539 * (v * v * v * v * v) - 674 * (v * v * v * v) + 606 * (v * v * v) - 267 * (v * v) + 72 * v - 6) * (w * w * w * w * w) + (v * v) * (144 * (v * v * v * v * v * v * v * v * v) + 7 * (v * v * v * v * v * v * v * v) - 1102 * (v * v * v * v * v * v * v) + 1815 * (v * v * v * v * v * v) - 368 * (v * v * v * v * v) - 1315 * (v * v * v * v) + 1234 * (v * v * v) - 539 * (v * v) + 144 * v - 12) * (w * w * w * w) - (v - 1) * (32 * (v * v * v * v * v * v * v * v * v * v) + 240 * (v * v * v * v * v * v * v * v * v) - 913 * (v * v * v * v * v * v * v * v) + 873 * (v * v * v * v * v * v * v) + 243 * (v * v * v * v * v * v) - 586 * (v * v * v * v * v) + 47 * (v * v * v * v) + 181 * (v * v * v) - 107 * (v * v) + 24 * v - 2) * (w * w * w) + ((v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v * v * v) - 64 * (v * v * v * v * v * v * v) - 553 * (v * v * v * v * v * v) + 1186 * (v * v * v * v * v) - 808 * (v * v * v * v) + 176 * (v * v * v) + 35 * (v * v) - 22 * v + 2) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v) - 272 * (v * v * v * v * v) + 225 * (v * v * v * v) + 64 * (v * v * v) - 126 * (v * v) + 36 * v + 9) * w + 8 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 5 * v + 4) * (2 * (v * v) - 2 * v + 1)) + 2 * N2 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (CQ * (v - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - (v * v * v * v * v) * (2 * v + 3) * (w * w * w * w * w) + 2 * (v * v * v) * ((v * v * v) + 2 * (v * v) + 3 * v - 1) * (w * w * w * w) - (v * v) * (6 * (v * v * v) + 4 * (v * v) + 9 * v - 6) * (w * w * w) + v * (10 * (v * v * v) - 2 * (v * v) + 11 * v - 6) * (w * w) - 2 * (4 * (v * v * v) - 2 * (v * v) + 3 * v - 1) * w + 2 * (2 * (v * v) - 2 * v + 1)) - (v * w - 1) * ((v * v * v) * (3 * (v * v * v) + 5 * (v * v) - 4 * v + 4) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v) + 3 * (v * v * v) + 5 * (v * v) - 2 * v + 4) * (w * w * w * w) + v * (3 * (v * v) + 3 * v + 1) * ((v * v * v) + 2 * (v * v) - 3 * v + 4) * (w * w * w) - v * (16 * (v * v * v * v) - 20 * (v * v * v) + 21 * (v * v) - 15 * v + 14) * (w * w) + (17 * (v * v * v * v) - 29 * (v * v * v) + 26 * (v * v) - 15 * v + 5) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1))) - ((v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * (-(v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 2 * v - 2) * (w * w * w * w * w) + 2 * (v * v) * (2 * (v * v * v * v) + 3 * (v * v * v) - 2 * (v * v) + 2 * v - 3) * (w * w * w * w) - v * (3 * (v * v * v * v * v) + 7 * (v * v * v * v) + 4 * (v * v * v) - (v * v) - 6) * (w * w * w) + CQ * (v * v) * w * ((v * v) * (w * w) - 2 * v * w + 2) * ((v * v) * (w * w) - 2 * (v * v) * w + 2 * (v * v) - 2 * v + 1) + (7 * (v * v * v * v * v) + 3 * (v * v * v * v) + (v * v * v) + (v * v) - 4 * v - 2) * (w * w) - (7 * (v * v * v * v) - 5 * (v * v * v) + 3 * (v * v) - v - 2) * w + (v - 1) * ((v * v) + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N4 * (v - 1) * vC * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * (16 * (v * v * v * v * v) * (w * w * w * w * w) - 16 * (v * v * v * v) * (v + 1) * (w * w * w * w) + (v * v * v) * (32 * (v * v) - 43 * v + 43) * (w * w * w) - (v * v) * (10 * (v * v) - 7 * v + 13) * (w * w) - (6 * (v * v * v * v) - 21 * (v * v * v) + 12 * (v * v) + 3 * v - 4) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + 2 * N2 * (v - 1) * vC * ((v * v * v) * (v + 7) * (w * w * w) - (v * v) * (2 * (v * v) + v + 5) * (w * w) + (2 * (v * v * v * v) + (v * v * v) - v + 2) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w) - 2 * (v * v * v) * w + (2 * v - 1) * ((v * v) - v + 2)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(1 - v * w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-2 * N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * (8 * CQ * (2 * (v * v) * (w * w) - 2 * v * (2 * v - 1) * w + 2 * (v * v) - 2 * v + 1) * ((v * v * v * v * v * v) * (w * w * w * w * w * w) - 3 * (v - 1) * (v * v * v * v * v) * (w * w * w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v * v * v) * (w * w * w * w) - 7 * ((v - 1) * (v - 1) * (v - 1)) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) - 3 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) + (v - 1) * w * (5 * (v * v * v * v * v * v) * (w * w * w * w * w) + (v * v * v * v * v) * (5 * v - 7) * (w * w * w * w) - (v - 1) * (v * v * v) * (16 * (v * v * v) - 8 * (v * v) + 8 * v - 3) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (32 * (v * v * v) - 40 * (v * v) + 36 * v - 9) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * (16 * (v * v * v) - 27 * (v * v) + 27 * v - 9) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (5 * (v * v) - 3 * v + 3))) + 2 * N2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w) - (v - 3) * (v * v) * w + (v - 2) * ((v - 1) * (v - 1))) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * ((v - 1) * (v - 1)) * vC * w * ((v * v * v) * (w * w) + (v * v) * w + (v - 1) * ((v * v) - 2 * v + 3)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(v * w - v + 1) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-N4 * (v - 1) * vC * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * (2 * (8 * (v * v * v * v * v) * ((v * v) - v + 1) * (w * w * w * w * w * w) - (v * v * v * v * v) * (32 * (v * v) - 51 * v + 43) * (w * w * w * w * w) + 2 * (v * v * v) * (28 * (v * v * v * v) - 56 * (v * v * v) + 47 * (v * v) - 4 * v - 1) * (w * w * w * w) - (v * v) * (56 * (v * v * v * v * v) - 117 * (v * v * v * v) + 67 * (v * v * v) + 45 * (v * v) - 38 * v + 3) * (w * w * w) + v * (40 * (v * v * v * v * v * v) - 94 * (v * v * v * v * v) + 54 * (v * v * v * v) + 55 * (v * v * v) - 74 * (v * v) + 29 * v - 6) * (w * w) - (v - 1) * (16 * (v * v * v * v * v * v) - 16 * (v * v * v * v * v) - 30.0l * (v * v * v * v) + 73 * (v * v * v) - 45 * (v * v) + 7 * v + 3) * w + 4 * ((v - 1) * (v - 1)) * (2 * (v * v) - 3 * v + 2) * (2 * (v * v) - 2 * v + 1)) - CQ * (((v * v) + 1) * ((v * v) + 1)) * w * (v * w - 1) * (v * w - v + 1) * (2 * (w * w) - 2 * w + 1)) + ((v - 1) * (v - 1)) * vC * w * (2 * ((v * v * v) * (w * w) + (v * v) * w + v - 1) + CQ * (v - 1) * ((v * v) + 1) * (2 * (w * w) - 2 * w + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v * v * v * v) * (w * w * w * w) + 10 * (v * v * v) * (w * w * w) - 10 * (v * v) * (w * w) + 5 * v * w - 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * N2 * (v - 1) * vC * ((v * v * v * v) * (v + 7) * (w * w * w * w) - (v * v * v) * ((v + 3) * (v + 3)) * (w * w * w) + CQ * ((v * v) + 1) * ((v * v) - v + 1) * w * (v * w - 1) * (2 * (w * w) - 2 * w + 1) + v * (8 * (v * v * v) + (v * v) - v + 4) * (w * w) - (10 * (v * v * v * v) - 15 * (v * v * v) + 16 * (v * v) - 11 * v + 4) * w + 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) * ((v * v * v * v) * (w * w * w * w) - 4 * (v * v * v) * (w * w * w) + 6 * (v * v) * (w * w) - 4 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) * std::log(w) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + (-N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * (32 * (v * v * v * v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w * w * w * w) - 32 * (v * v * v * v * v * v * v * v * v * v) * (5 * v - 1) * (w * w * w * w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (416 * (v * v * v * v * v) - 245 * (v * v * v * v) + 59 * (v * v * v) - 78 * (v * v) + 52 * v - 12) * (w * w * w * w * w * w * w * w * w) - (v * v * v * v * v * v) * (704 * (v * v * v * v * v) - 641 * (v * v * v * v) + 96 * (v * v * v) - 177 * (v * v) + 192 * v - 46) * (w * w * w * w * w * w * w * w) + (v * v * v * v) * (832 * (v * v * v * v * v * v * v) - 906 * (v * v * v * v * v * v) - 165 * (v * v * v * v * v) + 228 * (v * v * v * v) - 123 * (v * v * v) + 314 * (v * v) - 192 * v + 36) * (w * w * w * w * w * w * w) - (v * v * v * v) * (704 * (v * v * v * v * v * v * v) - 714 * (v * v * v * v * v * v) - 964 * (v * v * v * v * v) + 1507 * (v * v * v * v) - 1102 * (v * v * v) + 965 * (v * v) - 522 * v + 102) * (w * w * w * w * w * w) + (v * v) * (416 * (v * v * v * v * v * v * v * v * v) - 161 * (v * v * v * v * v * v * v * v) - 1817 * (v * v * v * v * v * v * v) + 2436 * (v * v * v * v * v * v) - 1023 * (v * v * v * v * v) + 48 * (v * v * v * v) + 341 * (v * v * v) - 456 * (v * v) + 228 * v - 36) * (w * w * w * w * w) - (v * v) * (160 * (v * v * v * v * v * v * v * v * v) + 235 * (v * v * v * v * v * v * v * v) - 1864 * (v * v * v * v * v * v * v) + 2185 * (v * v * v * v * v * v) - 180 * (v * v * v * v * v) - 1327 * (v * v * v * v) + 1396 * (v * v * v) - 943 * (v * v) + 396 * v - 66) * (w * w * w * w) + (v - 1) * (32 * (v * v * v * v * v * v * v * v * v * v) + 288 * (v * v * v * v * v * v * v * v * v) - 793 * (v * v * v * v * v * v * v * v) + 13 * (v * v * v * v * v * v * v) + 1340 * (v * v * v * v * v * v) - 1476 * (v * v * v * v * v) + 683 * (v * v * v * v) - 49 * (v * v * v) - 134 * (v * v) + 76 * v - 12) * (w * w * w) - ((v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v * v * v) - 667 * (v * v * v * v * v * v) + 992 * (v * v * v * v * v) - 496 * (v * v * v * v) - 62 * (v * v * v) + 125 * (v * v) - 46 * v + 10) * (w * w) + ((v - 1) * (v - 1) * (v - 1)) * (96 * (v * v * v * v * v * v) - 224 * (v * v * v * v * v) + 53 * (v * v * v * v) + 220 * (v * v * v) - 233 * (v * v) + 66 * v - 10) * w - 8 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * (4 * (v * v * v * v) - 12 * (v * v * v) + 12 * (v * v) - 4 * v - 1)) - 2 * N2 * (v - 1) * vC * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v - 1) * (v * v * v * v * v * v) * (3 * (v * v) - 6 * v + 10) * (w * w * w * w * w * w * w * w) - (v - 1) * (v * v * v * v * v) * (10 * (v * v * v) - 24 * (v * v) + 41 * v - 10) * (w * w * w * w * w * w * w) + (v * v * v * v) * (15 * (v * v * v * v * v) - 60 * (v * v * v * v) + 125 * (v * v * v) - 77 * (v * v) - 19 * v + 20) * (w * w * w * w * w * w) - (v * v * v) * (15 * (v * v * v * v * v * v) - 80 * (v * v * v * v * v) + 198 * (v * v * v * v) - 119 * (v * v * v) - 80 * (v * v) + 94 * v - 20) * (w * w * w * w * w) + (v * v) * (10 * (v * v * v * v * v * v * v) - 55 * (v * v * v * v * v * v) + 143 * (v * v * v * v * v) - 52 * (v * v * v * v) - 145 * (v * v * v) + 123 * (v * v) - 10 * v - 10) * (w * w * w * w) - (v - 1) * v * (3 * (v * v * v * v * v * v * v) - 15 * (v * v * v * v * v * v) + 62 * (v * v * v * v * v) - 17 * (v * v * v * v) - 30.0l * (v * v * v) - 2 * (v * v) + 25 * v - 10) * (w * w * w) + ((v - 1) * (v - 1)) * v * (23 * (v * v * v * v) - 27 * (v * v * v) + 54 * (v * v) - 39 * v + 13) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * (7 * (v * v * v * v) - 18 * (v * v * v) + 39 * (v * v) - 20 * v + 8) * w + 4 * ((v - 1) * (v - 1) * (v - 1) * (v - 1))) - 2 * AL * N4 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v) * (3 * (v * v * v * v) - (v * v * v) + 4 * (v * v) + 2) * (w * w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v * v) + 4 * (v * v * v * v) + 6 * (v * v) + v + 3) * (w * w * w * w * w) + v * (3 * (v * v * v * v * v * v) + 10 * (v * v * v * v * v) + 11 * (v * v * v * v) + 3 * (v * v * v) + 13 * (v * v) + 6 * v + 6) * (w * w * w * w) - (11 * (v * v * v * v * v * v) + 6 * (v * v * v * v * v) + 12 * (v * v * v * v) + 7 * (v * v) + 6 * v + 2) * (w * w * w) + (19 * (v * v * v * v * v) - 14 * (v * v * v * v) + 18 * (v * v * v) - 8 * (v * v) + 3 * v + 2) * (w * w) - (17 * (v * v * v * v) - 24 * (v * v * v) + 18 * (v * v) - 8 * v + 1) * w + 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + 4 * AL * N2 * (v - 1) * vC * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v) * (3 * (v * v * v * v) - 3 * (v * v * v) + 4 * (v * v) - 2 * v + 2) * (w * w * w * w * w * w) - (v * v) * (4 * (v * v * v * v * v) + 5 * (v * v * v * v) - 5 * (v * v * v) + 10 * (v * v) - 4 * v + 6) * (w * w * w * w * w) + v * (3 * (v * v * v * v * v * v) + 7 * (v * v * v * v * v) + 4 * (v * v * v * v) - (v * v * v) + 7 * (v * v) + 6) * (w * w * w * w) - (9 * (v * v * v * v * v * v) + (v * v * v * v * v) + 5 * (v * v * v * v) + (v * v) + 4 * v + 2) * (w * w * w) + (13 * (v * v * v * v * v) - 13 * (v * v * v * v) + 13 * (v * v * v) - 6 * (v * v) + v + 2) * (w * w) - (9 * (v * v * v * v) - 13 * (v * v * v) + 10 * (v * v) - 5 * v + 1) * w + 2 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + ((v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v * v) * (w * w * w * w) - 4 * (v - 1) * (v * v * v) * (w * w * w) + 6 * ((v - 1) * (v - 1)) * (v * v) * (w * w) - 4 * ((v - 1) * (v - 1) * (v - 1)) * v * w + ((v - 1) * (v - 1) * (v - 1) * (v - 1))) * ((v * v * v * v) * ((v * v * v) + 2 * (v * v) - 12 * v + 12) * (w * w * w * w * w * w) - (v * v * v) * (v + 1) * ((v * v * v) + 6 * (v * v) - 26 * v + 24) * (w * w * w * w * w) + (v * v * v) * ((v * v * v * v) + 11 * (v * v * v) + 6 * (v * v) - 56 * v + 56) * (w * w * w * w) - v * ((v * v * v * v * v * v) + 5 * (v * v * v * v * v) + 20 * (v * v * v * v) - 22 * (v * v * v) - 22 * (v * v) + 60 * v - 24) * (w * w * w) + (5 * (v * v * v * v * v * v) - 23 * (v * v * v * v * v) + 78 * (v * v * v * v) - 85 * (v * v * v) + 40 * (v * v) + 4 * v - 12) * (w * w) + (v - 1) * (5 * (v * v * v * v) - 8 * (v * v * v) - 29 * (v * v) + 24 * v - 10) * w + ((v - 1) * (v - 1)) * (3 * (v * v) - 2 * v + 6)) - 2 * AL * ((v - 1) * (v - 1)) * vC * w * ((v * v) * (w * w) - 2 * v * w + 1) * ((v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 2 * v - 2) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v) + 3 * (v * v * v) - 2 * (v * v) + 2 * v - 3) * (w * w * w * w) + v * (3 * (v * v * v * v * v) + 7 * (v * v * v * v) + 4 * (v * v * v) - (v * v) - 6) * (w * w * w) - (7 * (v * v * v * v * v) + 3 * (v * v * v * v) + (v * v * v) + (v * v) - 4 * v - 2) * (w * w) + (7 * (v * v * v * v) - 5 * (v * v * v) + 3 * (v * v) - v - 2) * w - (v - 1) * ((v * v) + 1)) * ((v * v * v * v * v) * (w * w * w * w * w) - 5 * (v - 1) * (v * v * v * v) * (w * w * w * w) + 10 * ((v - 1) * (v - 1)) * (v * v * v) * (w * w * w) - 10 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) + 5 * ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)))) / (N2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) / 2.0l + std::log(S / q2_fac) * (N4 * vC * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * (16 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 16 * (v * v * v * v * v * v * v) * (v + 4) * (w * w * w * w * w * w * w) + (v * v * v) * (48 * (v * v * v * v * v) - 45 * (v * v * v * v) + 207 * (v * v * v) - 44 * (v * v) + 20 * v - 2) * (w * w * w * w * w * w) - 2 * (v * v) * (8 * (v * v * v * v * v * v) + 50 * (v * v * v * v * v) - 76 * (v * v * v * v) + 176 * (v * v * v) - 56 * (v * v) + 29 * v - 3) * (w * w * w * w * w) + v * (16 * (v * v * v * v * v * v * v) - 13 * (v * v * v * v * v * v) + 138 * (v * v * v * v * v) - 149 * (v * v * v * v) + 263 * (v * v * v) - 71 * (v * v) + 54 * v - 6) * (w * w * w * w) - (16 * (v * v * v * v * v * v * v * v) - 37 * (v * v * v * v * v * v) + 134 * (v * v * v * v * v) - 72 * (v * v * v * v) + 64 * (v * v * v) + 19 * (v * v) + 14 * v - 2) * (w * w * w) + (48 * (v * v * v * v * v * v * v) - 96 * (v * v * v * v * v * v) + 83 * (v * v * v * v * v) + 6 * (v * v * v * v) - 10 * (v * v * v) - 4 * (v * v) + 23 * v - 2) * (w * w) - (48 * (v * v * v * v * v * v) - 128 * (v * v * v * v * v) + 165 * (v * v * v * v) - 112 * (v * v * v) + 42 * (v * v) - 8 * v + 1) * w + 8 * (v - 1) * ((v * v) - v + 1) * (2 * (v * v) - 2 * v + 1)) - 2 * N2 * vC * (v * w - 1) * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v) * (3 * (v * v * v) + 5 * (v * v) - 4 * v + 4) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v) + 5 * (v * v * v) + 3 * (v * v) - 2 * v + 4) * (w * w * w * w) + v * (3 * (v * v * v * v * v) + 11 * (v * v * v * v) + 2 * (v * v * v) + 3 * (v * v) + 5 * v + 4) * (w * w * w) - v * (14 * (v * v * v * v) - 10 * (v * v * v) + 9 * (v * v) - 3 * v + 6) * (w * w) + (3 * (v * v) - 3 * v + 1) * (5 * (v * v) - 2 * v + 1) * w - 4 * (v - 1) * (2 * (v * v) - 2 * v + 1)) + (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v - 1) * (v * v) * (w * w) + 3 * ((v - 1) * (v - 1)) * v * w - ((v - 1) * (v - 1) * (v - 1))) * ((v * v * v) * (3 * (v * v * v) - 2 * (v * v) + 2 * v - 2) * (w * w * w * w * w) - 2 * (v * v) * (2 * (v * v * v * v) + 3 * (v * v * v) - 2 * (v * v) + 2 * v - 3) * (w * w * w * w) + v * (3 * (v * v * v * v * v) + 7 * (v * v * v * v) + 4 * (v * v * v) - (v * v) - 6) * (w * w * w) - (7 * (v * v * v * v * v) + 3 * (v * v * v * v) + (v * v * v) + (v * v) - 4 * v - 2) * (w * w) + (7 * (v * v * v * v) - 5 * (v * v * v) + 3 * (v * v) - v - 2) * w - (v - 1) * ((v * v) + 1))) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1))) + std::log(S / q2_fragm) * (N4 * vC * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * (16 * (v * v * v * v * v * v * v * v) * (w * w * w * w * w * w * w * w) - 16 * (v * v * v * v * v * v * v) * (5 * v - 4) * (w * w * w * w * w * w * w) + (v * v * v * v * v * v) * (208 * (v * v) - 351 * v + 151) * (w * w * w * w * w * w) - (v - 1) * (v * v * v * v * v) * (352 * (v * v) - 559 * v + 230) * (w * w * w * w * w) + 2 * ((v - 1) * (v - 1)) * (v * v * v) * (204 * (v * v * v) - 307 * (v * v) + 123 * v + 1) * (w * w * w * w) - 2 * ((v - 1) * (v - 1) * (v - 1)) * (v * v) * (168 * (v * v * v) - 235 * (v * v) + 90 * v + 3) * (w * w * w) + ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * v * (200 * (v * v * v) - 255 * (v * v) + 95 * v + 6) * (w * w) - ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (80 * (v * v * v) - 95 * (v * v) + 38 * v + 2) * w + 8 * ((v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1) * (v - 1)) * (2 * (v * v) - 2 * v + 1)) - 2 * N2 * (v - 1) * vC * w * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v * v * v) * (w * w * w * w * w) - (v * v * v * v * v) * (2 * v - 3) * (w * w * w * w) - (v - 1) * (v * v * v) * (4 * (v * v * v) - 7 * (v * v) + 10 * v - 2) * (w * w * w) + ((v - 1) * (v - 1)) * (v * v) * (8 * (v * v * v) - 15 * (v * v) + 17 * v - 6) * (w * w) - ((v - 1) * (v - 1) * (v - 1)) * v * (4 * (v * v * v) - 10 * (v * v) + 13 * v - 6) * w - ((v - 1) * (v - 1) * (v - 1) * (v - 1)) * ((v * v) - 2 * v + 2)) + (v - 1) * vC * w * ((v * v) * (w * w) - 2 * (v - 1) * v * w + ((v - 1) * (v - 1))) * ((v * v * v) * (w * w * w) - 3 * (v * v) * (w * w) + 3 * v * w - 1) * ((v * v * v * v) * (w * w * w) - (v - 2) * (v * v * v) * (w * w) + (v - 1) * v * ((v * v) - 5 * v + 2) * w - ((v - 1) * (v - 1)) * ((v * v) - 2 * v + 2))) / (N2 * ((v - 1) * (v - 1)) * (v * v) * (w * w) * ((v * w - 1) * (v * w - 1) * (v * w - 1)) * ((v * w - v + 1) * (v * w - v + 1) * (v * w - v + 1)));
    }
    std::cout << "STRUv: J0 out of range (" << J0 << "\n";
    return -1.0l;
};

/*
real STRUvC(real const &w, real const &v, real const &X3, real const &S)
{
    real NF = 2.0l * GTR;
    constexpr real DELTA = 0.0l;
    std::cout << "DELTA DELTA DELTA DELTA DELTA DELTA DELTA \n";
    real LTOT = std::log((v * v) * (1.0l - w) * (1.0l - w) * p2 * DELTA * DELTA / q2_fragm / X3 * X3);
    real Z = 1.0l - v + v * w;
    real Y = v * w / (1.0l - v + v * w);
    real T = -S * (1.0l - Y);
    real U = -S * Y;
    real FAC1 = -4.0l * N2 / (1.0l - v) / w / (1.0l - v + v * w);
    real FAC2 = 2.0l * CF * FAC1;
    real FAC3 = 2.0l * CF * FAC2;
    real PQQ = (-LTOT) * CF * (1.0l + Z * Z) / (1.0l - Z) - CF * (1.0l - Z);
    real PQG = (-LTOT) * 1.0l / 2.0l * (Z * Z + (1.0l - Z) * (1.0l - Z)) - Z * (1.0l - Z);
    real PGQ = (-LTOT) * CF * (1.0l + (1.0l - Z) * (1.0l - Z)) / Z - CF * Z;
    real PGG = (-LTOT) * 2.0l * N * ((1.0l - Z) / Z + Z / (1.0l - Z) + Z * (1.0l - Z));

    switch (J0)
    {
    case 0:
        return FAC1 * (CF / N * ((S * S) + (U * U)) / (T * T) * PQQ);
    case 1:
        return FAC1 * (CF / N * ((S * S) + (U * U)) / (T * T) * PGQ + CF / N * ((S * S) + (T * T)) / (U * U) * PGQ);
    case 2:
        return FAC1 * (CF / N * ((S * S) + (U * U)) / (T * T) * PQQ);
    case 3:
        return FAC1 * (CF / N * ((S * S) + (U * U)) / (T * T) * PGQ + CF / N * ((S * S) + (T * T)) / (U * U) * PGQ);
    case 4:
        return FAC1 * (CF / N * ((T * T) + (U * U)) / (S * S) * PQQ + 2.0l * CF * ((T * T) + (U * U)) * (CF / N / T / U - 1.0l / (S * S)) * PQG);
    case 5:
        return FAC1 * (CF / N * ((T * T * T * T) + (U * U * U * U) + (S * S) * ((T * T) + (U * U)) - 2.0l / N * U * T * (S * S)) / (U * U) / (T * T) * PQQ);
    case 6:
        return FAC1 * (CF / N * ((T * T * T * T) + (U * U * U * U) + (S * S) * ((T * T) + (U * U)) - 2.0l / N * U * T * (S * S)) / (U * U) / (T * T) * PGQ);
    case 7:
    case 8:
    case 9:
        return FAC2 * ((1.0l / (U * U) - CF / N / S / T) * ((S * S) + (T * T)) * PQG);
    case 10:
        return FAC1 * (2.0l * CF * ((T * T) + (U * U)) * (CF / N / T / U - 1.0l / (S * S)) * PQG + CF / N * ((S * S * S * S) + (T * T * T * T) + (U * U) * ((S * S) + (T * T)) - 2.0l / N * S * T * (U * U)) / (S * S) / (T * T) * PQQ);
    case 11:
        return FAC1 * (2.0l * CF * ((T * T) + (U * U)) * (CF / N / T / U - 1.0l / (S * S)) * PGG + CF / N * ((S * S * S * S) + (T * T * T * T) + (U * U) * ((S * S) + (T * T)) - 2.0l / N * S * T * (U * U)) / (S * S) / (T * T) * PGQ + CF / N * ((S * S * S * S) + (U * U * U * U) + (T * T) * ((S * S) + (U * U)) - 2.0l / N * S * U * (T * T)) / (S * S) / (U * U) * PGQ + CF / N * ((T * T) + (U * U)) / (S * S) * 2.0l * (NF - 1.0l) * PGQ);
    case 12:
        return FAC2 * ((1.0l / (U * U) - CF / N / S / T) * ((S * S) + (T * T)) * PQG + (1.0l / (T * T) - CF / N / S / U) * ((S * S) + (U * U)) * PQQ);
    case 13:
        return FAC2 * ((1.0l / (U * U) - CF / N / S / T) * ((S * S) + (T * T)) * PGG + (1.0l / (T * T) - CF / N / S / U) * ((S * S) + (U * U)) * PGQ);
    case 14:
        return FAC3 * (N / 2.0l / CF * ((S * S * S * S) + (T * T * T * T) + (U * U * U * U)) * ((S * S) + (T * T) + (U * U)) / (S * S) / (T * T) / (U * U) * PGG + 1.0l / 2.0l / CF * (CF / N / T / U - 1.0l / (S * S)) * ((T * T) + (U * U)) * PGQ * 2.0l * NF);
    case 15:
        return FAC3 * (N / 2.0l / CF * ((S * S * S * S) + (T * T * T * T) + (U * U * U * U)) * ((S * S) + (T * T) + (U * U)) / (S * S) / (T * T) / (U * U) * PQG + 1.0l / 2.0l / CF * (CF / N / T / U - 1.0l / (S * S)) * ((T * T) + (U * U)) * PQQ);
    }
    std::cout << "STRUvC: J0 out of range (" << J0 << "\n";
    return -1.0l;
};
*/

real FDEL1(real const &v, real const &X3)
{
    real BX1 = V * W / v / X3;
    real BX2 = (1. - V) / (1. - v) / X3;
    real SHD = BX1 * BX2 * S;
    real FKEL = AvDEL(v, SHD);
#if _DEBUG_FRAGM_
//std::cout << "\n\n FDEL1(" << v << ", " << X3 << "; J0 = " << J0 << ") = " << FKEL / SHD;
#endif
    return FKEL / SHD;
};

real FDEL2(real const &v, real const &X3)
{
    real BX1 = V * W / v / X3;
    real BX2 = (1. - V) / (1. - v) / X3;
    real SHD = BX1 * BX2 * S;
    real FKELC = (AvDEL(1. - v, SHD) + std::log(v / (1. - v)) * AvWPL(1.0l, 1. - v, SHD) + 0.5l * AvLO(1.0l, 1. - v, SHD) * std::pow(std::log((1. - v) / v), 2)) * (1. - v) / v;
    /*#if _DEBUG_FRAGM_
    std::cout << "\n\n FDEL2(" << v << ", " << X3 << "; J0 = " << J0 << ") = " << FKELC / SHD;
    std::cout << "\n  BX1 = " << BX1;
    std::cout << "\n  BX2 = " << BX2;
    std::cout << "\n  SHD = " << SHD;
    std::cout << "\n  FKELC = " << FKELC;
    std::cout << "\n    AvDEL(1. - v, SHD) = " << AvDEL(1. - v, SHD);
    std::cout << "\n    AvWPL(1.0l, 1. - v, SHD) = " << AvWPL(1.0l, 1. - v, SHD);
    std::cout << "\n    AvLO(1.0l, 1. - v, SHD) = " << AvLO(1.0l, 1. - v, SHD);
    #endif*/
    return FKELC / SHD;
};

real FvWPL1(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real SH = X1 * X2 * S;
    real RvWPL = AvWPL(w, v, SH);
#if _DEBUG_FRAGM_
//std::cout << "\n\n FvWPL1(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RvWPL / SH;
#endif
    return RvWPL / SH;
};

real FvWPL2(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real vX = 1. - v * w;
    real WX = (1. - v) / (1. - v * w);
    real SH = X1 * X2 * S;
    real RvWPLC = (AvWPL(WX, vX, SH) + AvLO(WX, vX, SH) * std::log(v / vX)) * vX / v;
#if _DEBUG_FRAGM_
//std::cout << "\n\n FvWPL2(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RvWPLC / SH;
#endif
    return RvWPLC / SH;
};

real FvLO1(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real SH = X1 * X2 * S;
    real RvWLO = AvLO(w, v, SH);
#if _DEBUG_FRAGM_
//std::cout << "\n\n FvLO1(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RvWLO / SH;
#endif
    return RvWLO / SH;
};

real FvLO2(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real vX = 1. - v * w;
    real WX = (1. - v) / (1. - v * w);
    real SH = X1 * X2 * S;
    real RvWLOC = AvLO(WX, vX, SH) * vX / v;
#if _DEBUG_FRAGM_
//std::cout << "\n\n FvLO2(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RvWLOC / SH;
#endif
    return RvWLOC / SH;
};

real FRESC1(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real SH = X1 * X2 * S;
    real RRESC = (STRUv(w, v, X3, SH) + AvGO(w, v));
#if _DEBUG_FRAGM_
//std::cout << "\n\n FRESC1(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RRESC / SH;
#endif
    return RRESC / SH;
};

real FRESC2(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real vX = 1. - v * w;
    real WX = (1. - v) / (1. - v * w);
    real SH = X1 * X2 * S;
    real RRESCC = STRUv(WX, vX, X3, SH) + AvGO(WX, vX);
#if _DEBUG_FRAGM_
//std::cout << "\n\n FRESC2(" << w << ", " << v << ", " << X3 << "; J0 = " << J0 << ") = " << RRESCC / SH;
#endif
    return RRESCC / SH;
};
/*
real FRESCC1(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1. - V) / (1. - v) / X3;
    real SH = X1 * X2 * P->S;
    real RRESC = STRUvC(w, v, X3, SH);
    return RRESC / SH;
};

real FRESCC2(real const &w, real const &v, real const &X3)
{
    real X1 = V * W / v / w / X3;
    real X2 = (1.0l - V) / (1.0l - v) / X3;
    real vX = 1.0l - v * w;
    real WX = (1.0l - v) / (1.0l - v * w);
    real SH = X1 * X2 * P->S;
    real RRESCC = STRUvC(WX, vX, X3, SH) * v / vX;
    return RRESCC / SH;
};
*/

/**
  * Integrand of pion & photon fragmentation cross sections
  * */
int fragm(
    const int *,
    const real x[], // x = (w,v,z,y,p,x) (y and p and x optional) (p->sqrt(p2 + m2) for massive mesons)
    const int *,
    real f[],       // f = (photon, photon*p, pion, pion*p, eta, eta*p)
    void *userdata)
{
    constexpr unsigned short comp{3u};//number of fragmentations to consider (n = 1, 2, 3 <-> photons, pions, eta)
    static unsigned short n;

    auto P{reinterpret_cast<const photon_cs_params *const>(userdata)};

    static real p, Jp, p2, xt;
    static real sqy, y_lo, y_up, y, Jy, ey;
    static real alpha_s;
    static real z, z_min, Jz;
    static real v_min, v_max, Jv, v;
    static real w_min, Jw, w;
    static real v_2, v_3, v_4, _vm1, _vm1_2, _vm1_3, _vm1_4, _1mv, _1mv_2, _1mv_3, _1mv_4, _1mw;
    static real X1, X2, BX1, BX2, BXJAC, XJAC;
    static real DPU[comp], DPD[comp], DPS[comp], DPC[comp], DPG[comp];
    static real UP1, UPB1, DO1, DOB1, ST1, CH1, GL1;
    static real UP2, UPB2, DO2, DOB2, ST2, CH2, GL2;
    static real SHD;
    static real BORN[comp][16]{};
    static real DMU[comp][16]{};
    static real help1, help2, help3, help4;
    static real F01[16]{}, F02[16]{}, FHODEL1[16]{}, FHODEL2[16]{}, FHOREST1[16]{}, FHOREST2[16]{}, FDELMU1[16], FDELMU2[16], GRRT[comp][16], GRRC[comp][16], GPPT[comp][16], GPPC[comp][16];
    static real GHD[comp], GHE[comp];

    //*************//
    //INTEGRATING P//
    //*************//
    Jp = P->int_p ? (P->p_max - P->p_min) : 1.0l;
    p = P->int_p ? P->p_min + Jp * x[P->int_y ? 4 : 3] : P->p;
    p2 = p * p;

    //*************//
    //INTEGRATING Y//
    //*************//

    xt = 2.0l * p / P->sqrtS;
    sqy = std::log((1.0l+std::sqrt(1.0l-xt*xt))/xt);
    y_lo = std::max(-sqy, P->y_min);
    y_up = std::min(+sqy, P->y_max);

#if _DEBUG_FRAGM_
    std::cout.precision(12);
    std::cout << std::scientific << "\n SQS = " << P->sqrtS;
    std::cout << "\n p = " << p;
    std::cout << "\n Jp = " << Jp;
    std::cout << "\n xt = " << xt;
    std::cout << "\n sqy = " << sqy;
    std::cout << "\n y_lo = " << y_lo;
    std::cout << "\n y_up = " << y_up;
    std::cout << std::endl;
#endif

    if(y_up < y_lo)
    {
        f[0] = f[1] = f[2] = f[3] = f[4] = f[5] = 0.0l;
        return 0;
    }

    Jy = P->int_y ? (P->y_max - P->y_min) : 1.0l;
    y = P->int_y ? (P->y_min + x[3] * Jy) : P->y;
    ey = std::exp(y);

#if _DEBUG_FRAGM_
    std::cout << std::scientific << "\n y = " << y;
    std::cout << "\n Jy = " << Jy;
    std::cout << "\n ey = " << ey;
    std::cout << std::endl;
#endif

    //******//
    //SCALES//
    //******//
    q2_fac = P->sf * p2;
    q2_mu = P->sf_mu * p2;
    q2_fragm = P->sf_fragm * p2;
    alpha_s = get_alpha_s(q2_mu);

    V = 1.0l - p / P->sqrtS / ey;
    W = p2 / P->S / V / (1.0l - V);
    S = P->S;

#if _DEBUG_FRAGM_
    std::cout << "\n q2_fac = " << q2_fac;
    std::cout << "\n q2_mu = " << q2_mu;
    std::cout << "\n q2_fragm = " << q2_fragm;
    std::cout << "\n alpha_s = " << alpha_s;
    std::cout << "\n V = " << V;
    std::cout << "\n W = " << W;
    std::cout << "\n S = " << S;
    std::cout << std::endl;
#endif
    //skipping isolation stuff(IISOL, EPSILI, EPSILA, DELTAI, DELTA, ...)


    //**************************************//
    //Z - INTEGRATION FOR NON-ISOLATED CASE//
    //**************************************//
    z_min = 1.0l - V + V * W;
    constexpr real z_max = 1.0l;
    Jz = z_max - z_min;
    z = z_min + Jz * x[2];

#if _DEBUG_FRAGM_
    std::cout << "\n z_min = " << z_min;
    std::cout << "\n z_max = " << z_max;
    std::cout << "\n z = " << z;
    std::cout << "\n Jz = " << Jz;
    std::cout << std::endl;
#endif

    //*************//
    //v-INTEGRATION//
    //*************//
    v_min = V * W / z;
    v_max = 1.0l - (1.0l - V) / z;
    Jv = v_max - v_min;
    v = v_min + Jv * x[1];

#if _DEBUG_FRAGM_
    std::cout << "\n v_min = " << v_min;
    std::cout << "\n v_max = " << v_max;
    std::cout << "\n v = " << v;
    std::cout << "\n Jv = " << Jv;
    std::cout << std::endl;
#endif

    //*************//
    //w-INTEGRATION//
    //*************//
    w_min = V * W / z / v;
    constexpr real w_max = 1.0l;
    Jw = w_max - w_min;
    w = w_min + Jw * x[0];

#if _DEBUG_FRAGM_
    std::cout << "\n w_min = " << w_min;
    std::cout << "\n w_max = " << w_max;
    std::cout << "\n w = " << w;
    std::cout << "\n Jw = " << Jw;
    std::cout << std::endl;
#endif
    //**********//
    //SHORTHANDS//
    //**********//
    v_2 = v * v;
    v_3 = v_2 * v;
    v_4 = v_3 * v;
    _vm1 = v - 1.0l;
    _vm1_2 = _vm1 * _vm1;
    _vm1_3 = _vm1_2 * _vm1;
    _vm1_4 = _vm1_3 * _vm1;
    _1mv = 1.0l - v;
    _1mv_2 = _1mv * _1mv;
    _1mv_3 = _1mv_2 * _1mv;
    _1mv_4 = _1mv_3 * _1mv;
    _1mw = 1.0l - w;

    X1 = V * W / v / w / z;
    X2 = (1.0l - V) / _1mv / z;
    BX1 = V * W / v / z;
    BX2 = X2;
    BXJAC = Jz * Jv / BX1 / BX2 / (z * z);
    XJAC = Jz * Jv / X1 / X2 / (z * z);

#if _DEBUG_FRAGM_
    std::cout << "\n X1 = " << X1;
    std::cout << "\n X2 = " << X2;
    std::cout << "\n BX1 = " << BX1;
    std::cout << "\n BX2 = " << BX2;
    std::cout << "\n BXJAC = " << BXJAC;
    std::cout << "\n XJAC = " << XJAC;
    std::cout << std::endl;
#endif

    //*****************************************************//
    //CALL OF FRAGMENTATION FUNCTIONS - RETURN D, NOT z*D !//
    //*****************************************************//

    P->gammaFF_ptr(z, q2_fragm, DPU[0], DPD[0], DPS[0], DPC[0], DPG[0]);
    P->pionFF_ptr(z, q2_fragm, DPU[1], DPD[1], DPS[1], DPC[1], DPG[1]);
    //TODO
    P->etaFF_ptr(z, q2_fragm, DPU[2], DPD[2], DPS[2], DPC[2], DPG[2]);


#if _DEBUG_FRAGM_
    /*owens data*/
    std::cout << "\n\tPHOTONS:";
    std::cout << "\n DPU = " << DPU[0];
    std::cout << "\n DPD = " << DPD[0];
    std::cout << "\n DPS = " << DPS[0];
    std::cout << "\n DPC = " << DPC[0];
    std::cout << "\n DPG = " << DPG[0];
    std::cout << "\n";
    std::cout << "\n\tPIONS:";
    std::cout << "\n DPU = " << DPU[1];
    std::cout << "\n DPD = " << DPD[1];
    std::cout << "\n DPS = " << DPS[1];
    std::cout << "\n DPC = " << DPC[1];
    std::cout << "\n DPG = " << DPG[1];
    std::cout << "\n";
#endif

    P->PDF_proj_ptr(BX1, q2_fac, UP1, UPB1, DO1, DOB1, ST1, CH1, GL1);

    P->PDF_target_ptr(BX2, q2_fac, UP2, UPB2, DO2, DOB2, ST2, CH2, GL2);

#if _DEBUG_FRAGM_
    std::cout << "\n UP1 = " << UP1;
    std::cout << "\n UPB1 = " << UPB1;
    std::cout << "\n DO1 = " << DO1;
    std::cout << "\n DOB1 = " << DOB1;
    std::cout << "\n ST1 = " << ST1;
    std::cout << "\n CH1 = " << CH1;
    std::cout << "\n GL1 = " << GL1;
    std::cout << "\n";
#endif
#if _DEBUG_FRAGM_
    std::cout << "\n UP2 = " << UP2;
    std::cout << "\n UPB2 = " << UPB2;
    std::cout << "\n DO2 = " << DO2;
    std::cout << "\n DOB2 = " << DOB2;
    std::cout << "\n ST2 = " << ST2;
    std::cout << "\n CH2 = " << CH2;
    std::cout << "\n GL2 = " << GL2;
    std::cout << "\n";
#endif

    for(n = 0; n < comp; ++n)
        STRU(UP1, UPB1, DO1, DOB1, ST1, CH1, GL1,
            UP2, UPB2, DO2, DOB2, ST2, CH2, GL2,
            DPU[n], DPD[n], DPS[n], DPC[n], DPG[n],
            GRRT[n], GRRC[n]);

    SHD = BX1 * BX2 * P->S;

#if _DEBUG_FRAGM_
    std::cout << "\n\tPHOTONS:";
    std::cout << "\n GRRT:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GRRT[0][i];

    std::cout << "\n\n GRRC:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GRRC[0][i];

    std::cout << "\n";
    std::cout << "\n\tPIONS:";

    std::cout << "\n GRRT:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GRRT[1][i];

    std::cout << "\n\n GRRC:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GRRC[1][i];

    std::cout << "\n";
    std::cout << "\n SHD = " << SHD;
#endif

    //*************************************************************//
    //SQUARE OF THE MATRIX ELEMENTS (INTEGRATED ON THE PHASE SPACE)//
    //  (formerly 'FBOR(v, SHD, F01/2)')                           //
    //*************************************************************//
    
    help1 = pi * P->cf / SHD / P->nc;
    F01[0] = help1 * (v_2 + 1.0l) / v / _1mv_3;
    F01[2] = F01[0];
    F01[4] = help1 * (2.0l * v_2 - 2.0l * v + 1.0l) / v / _1mv;
    F01[5] = 2.0l * help1 * (v - 2.0l + (4 + 1.0l / P->nc) / v - (3.0l + 1.0l / P->nc) / v_2 + 1.0l / v_3) / _1mv_3;
    F01[10] = 2.0l * help1 / P->nc * (P->nc * v_4 - (3. * P->nc + 1.) * v_3 + (4. * P->nc + 1.) * v_2 - 2.0l * P->nc * v + P->nc) / _1mv_3 / v;
    F01[11] = help1 / P->nc * (2. * v_2 - 2. * v + 1.) * (2. * N2 * v_2 - 2. * N2 * v + N2 - 1.) / v_2 / _1mv_2;
    F01[12] = pi / SHD / v / _1mv / (2. * N2) * (v_2 + 1.) * ((N2 - 1.) * v_2 + 2. * v + (N2 - 1.)) / v / _1mv_2;
    F01[13] = pi / (2. * N2) / SHD / v / _1mv * (v_2 - 2. * v + 2.) * ((N2 - 1.) * v_2 - 2. * N2 * v + 2. * N2) / v_2 / _1mv;
    F01[14] = pi * (4. * N2) / vC / SHD / v / _1mv * (3. - v * _1mv + v / _1mv_2 + _1mv / v_2);
    F01[15] = pi / (2. * P->nc) / vC / SHD / v / _1mv * (v_2 + _1mv_2) * (2. * N2 * (v_2 - v) + N2 - 1.) / v / _1mv;

    //*************************************************************//

    //FBOR(1.0l - _1mv, SHD, F02);
    F02[0] = pi * P->cf / P->nc / SHD / _1mv * (_1mv_2 + 1.) / v_3;
    F02[2] = F02[0];
    F02[4] = F01[4];
    F02[5] = F01[5];
    F02[10] = pi * 2. * P->cf / N2 / SHD / _1mv / v * (P->nc * _1mv_4 - (3. * P->nc + 1.) * _1mv_3 + (4. * P->nc + 1.) * _1mv_2 - 2. * P->nc * _1mv + P->nc) / (v_2);
    F02[11] = F01[11];
    F02[12] = F01[13];
    F02[13] = F01[12];
    F02[14] = F01[14];
    F02[15] = F01[15];

    //*************************************************************//

#if _DEBUG_FRAGM_
    std::cout << "\nF01:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl << i << " -> " << F01[i];

    std::cout << "\n\nF02:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl << i << " -> " << F02[i];
#endif

    //*********************************//
    //formerly AvDELMU(v, SHD, FDELMU1)//
    //*********************************//

    //FMU(v, SHD, FDELMU1)//
    FDELMU1[0] = (12 * (v_2 + 1) * (4 * GTR * v4 + 4 * GTR * v3 - 11 * v2 - 11 * v1) / ((_vm1 * _vm1) * v) / 18.0l / (8.0l * N2)) / _1mv / SHD;
    FDELMU1[2] = FDELMU1[0];
    FDELMU1[4] = (12 * (2 * v_2 - 2 * v + 1) * (4 * GTR * v4 + 4 * GTR * v3 - 11 * v2 - 11 * v1) / v / 18.0l / (8.0l * N2)) / _1mv / SHD;
    FDELMU1[5] = (12 * (4 * GTR * (v_4 - 2 * v_3 + 4 * v_2 - 3 * v + 1) * v4 - 11 * _vm1 * v * v4 + 4 * GTR * (v_4 - 2 * v_3 + 4 * v_2 - 3 * v + 1) * v3 - 11 * _vm1 * v * v3 - 11 * (v_4 - 2 * v_3 + 4 * v_2 - 3 * v + 1) * v2 + 4 * GTR * _vm1 * v * v2 - 11 * (v_4 - 2 * v_3 + 4 * v_2 - 3 * v + 1) * v1) / ((_vm1 * _vm1) * v_3) / 9.0l / (8.0l * N2)) / _1mv / SHD;
    FDELMU1[10] = (12 * (4 * GTR * (v_4 - 3 * v_3 + 4 * v_2 - 2 * v + 1) * v4 + 11 * _vm1 * v_2 * v4 + 4 * GTR * (v_4 - 3 * v_3 + 4 * v_2 - 2 * v + 1) * v3 + 11 * _vm1 * v_2 * v3 - 11 * (v_4 - 3 * v_3 + 4 * v_2 - 2 * v + 1) * v2 - 4 * GTR * _vm1 * v_2 * v2 - 11 * (v_4 - 3 * v_3 + 4 * v_2 - 2 * v + 1) * v1) / ((_vm1 * _vm1) * v) / 9.0l / (8.0l * N2)) / _1mv / SHD;
    FDELMU1[11] = ((132 * N4 * _vm1_4 * ((2 * v_2 - 2 * v + 1) * (2 * v_2 - 2 * v + 1)) * vC - 48 * GTR * N3 * _vm1_4 * ((2 * v_2 - 2 * v + 1) * (2 * v_2 - 2 * v + 1)) * vC - 132 * N2 * _vm1_4 * (2 * v_2 - 2 * v + 1) * vC + 48 * GTR * P->nc * _vm1_4 * (2 * v_2 - 2 * v + 1) * vC) / (N2 * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1) * v_2) / 18.0l / (8.0l * N2)) / _1mv / SHD;
    FDELMU1[12] = ((-132 * N4 * _vm1_4 * ((v_2 + 1) * (v_2 + 1)) * vC + 48 * GTR * N3 * _vm1_4 * ((v_2 + 1) * (v_2 + 1)) * vC + 132 * N2 * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1 * _vm1) * (v_2 + 1) * vC - 48 * GTR * P->nc * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1 * _vm1) * (v_2 + 1) * vC) / (N2 * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1 * _vm1) * v_2) / 18.0l / (8.0l * P->nc * vC)) / _1mv / SHD;
    FDELMU1[13] = ((44 * N4 * _vm1_4 * ((v_2 - 2 * v + 2) * (v_2 - 2 * v + 2)) * vC - 16 * GTR * N3 * _vm1_4 * ((v_2 - 2 * v + 2) * (v_2 - 2 * v + 2)) * vC - 44 * N2 * _vm1_4 * v_2 * (v_2 - 2 * v + 2) * vC + 16 * GTR * P->nc * _vm1_4 * v_2 * (v_2 - 2 * v + 2) * vC) / (N2 * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1) * v_3) / 6.0l / (8.0l * P->nc * vC)) / _1mv / SHD;
    FDELMU1[14] = ((192 * GTR * N2 * _vm1_4 * ((v_2 - v + 1) * (v_2 - v + 1) * (v_2 - v + 1)) * vC - 528 * N3 * _vm1_4 * ((v_2 - v + 1) * (v_2 - v + 1) * (v_2 - v + 1)) * vC) / ((_vm1 * _vm1 * _vm1 * _vm1 * _vm1 * _vm1) * v_3) / 9.0l / (8.0l * (vC * vC))) / _1mv / SHD;
    FDELMU1[15] = ((44 * N4 * _vm1_4 * ((2 * v_2 - 2 * v + 1) * (2 * v_2 - 2 * v + 1)) * vC - 16 * GTR * N3 * _vm1_4 * ((2 * v_2 - 2 * v + 1) * (2 * v_2 - 2 * v + 1)) * vC - 44 * N2 * _vm1_4 * (2 * v_2 - 2 * v + 1) * vC + 16 * GTR * P->nc * _vm1_4 * (2 * v_2 - 2 * v + 1) * vC) / (N2 * (_vm1 * _vm1 * _vm1 * _vm1 * _vm1) * v_2) / 6.0l / (8.0l * (vC * vC))) / _1mv / SHD;

    //*********************************//

    //FMU(1.0l - v, SHD, FDELMU2)
    FDELMU2[0] = (12.0l * (_1mv_2 + 1.0l) * (4.0l * GTR * v4 + 4.0l * GTR * v3 - 11.0l * v2 - 11.0l * v1) / (v_2 * _1mv) / 18.0l / (8.0l * N2)) / v / SHD;
    FDELMU2[2] = FDELMU2[0];
    FDELMU2[4] = FDELMU1[4];
    FDELMU2[5] = FDELMU1[5];
    FDELMU2[10] = ((12 * (4 * GTR * (_1mv_4 - 3 * _1mv_3 + 4 * _1mv_2 - 2 * _1mv + 1) * v4 + 11 * (-v) * _1mv_2 * v4 + 4 * GTR * (_1mv_4 - 3 * _1mv_3 + 4 * _1mv_2 - 2 * _1mv + 1) * v3 + 11 * (-v) * _1mv_2 * v3 - 11 * (_1mv_4 - 3 * _1mv_3 + 4 * _1mv_2 - 2 * _1mv + 1) * v2 - 4 * GTR * (-v) * _1mv_2 * v2 - 11 * (_1mv_4 - 3 * _1mv_3 + 4 * _1mv_2 - 2 * _1mv + 1) * v1) / (v_2 * _1mv) / 9.0 / (8.0l * N2)) / v / SHD);
    FDELMU2[11] = FDELMU1[11];
    FDELMU2[12] = FDELMU1[13];
    FDELMU2[13] = FDELMU1[12];
    FDELMU2[14] = FDELMU1[14];
    FDELMU2[15] = FDELMU1[15];

#if _DEBUG_FRAGM_
    std::cout << "\n\nFDELMU1:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << FDELMU1[i];

    std::cout << "\n\nFDELMU2:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << FDELMU2[i];
#endif
    for(n = 0; n < comp; ++n)
    {
        BORN[n][0] = (F01[0] * GRRT[n][0] + F02[0] * GRRC[n][0]) * BXJAC,
        //BORN[1][n] = 0.0l;
        BORN[n][2] = (F01[2] * GRRT[n][2] + F02[2] * GRRC[n][2]) * BXJAC;
        // BORN[3][n] = 0.0l;
        BORN[n][4] = (F01[4] * GRRT[n][4] + F02[4] * GRRC[n][4]) * BXJAC;
        BORN[n][5] = (F01[5] * GRRT[n][5] + F02[5] * GRRC[n][5]) * BXJAC;
        // BORN[6][n] = 0.0l;
        // BORN[7][n] = 0.0l;
        // BORN[8][n] = 0.0l;
        // BORN[9][n] = 0.0l;
        BORN[n][10] = (F01[10] * GRRT[n][10] + F02[10] * GRRC[n][10]) * BXJAC;
        BORN[n][11] = (F01[11] * GRRT[n][11] + F02[11] * GRRC[n][11]) * BXJAC;
        BORN[n][12] = (F01[12] * GRRT[n][12] + F02[12] * GRRC[n][12]) * BXJAC;
        BORN[n][13] = (F01[13] * GRRT[n][13] + F02[13] * GRRC[n][13]) * BXJAC;
        BORN[n][14] = (F01[14] * GRRT[n][14] + F02[14] * GRRC[n][14]) * BXJAC;
        BORN[n][15] = (F01[15] * GRRT[n][15] + F02[15] * GRRC[n][15]) * BXJAC;
    }

    help1 = std::log(SHD / q2_mu);

    for(n = 0; n < comp; ++n)
    {
        DMU[n][0] = (FDELMU1[0] * GRRT[n][0] + FDELMU2[0] * GRRC[n][0]) * help1 * BXJAC;
        // DMU[n][1] = 0.0l;
        DMU[n][2] = (FDELMU1[2] * GRRT[n][2] + FDELMU2[2] * GRRC[n][2]) * help1 * BXJAC;
        // DMU[n][3] = 0.0l;
        DMU[n][4] = (FDELMU1[4] * GRRT[n][4] + FDELMU2[4] * GRRC[n][4]) * help1 * BXJAC;
        DMU[n][5] = (FDELMU1[5] * GRRT[n][5] + FDELMU2[5] * GRRC[n][5]) * help1 * BXJAC;
        // DMU[n][6] = 0.0l;
        // DMU[n][7] = 0.0l;
        // DMU[n][8] = 0.0l;
        // DMU[n][9] = 0.0l;
        DMU[n][10] = (FDELMU1[10] * GRRT[n][10] + FDELMU2[10] * GRRC[n][10]) * help1 * BXJAC;
        DMU[n][11] = (FDELMU1[11] * GRRT[n][11] + FDELMU2[11] * GRRC[n][11]) * help1 * BXJAC;
        DMU[n][12] = (FDELMU1[12] * GRRT[n][12] + FDELMU2[12] * GRRC[n][12]) * help1 * BXJAC;
        DMU[n][13] = (FDELMU1[13] * GRRT[n][13] + FDELMU2[13] * GRRC[n][13]) * help1 * BXJAC;
        DMU[n][14] = (FDELMU1[14] * GRRT[n][14] + FDELMU2[14] * GRRC[n][14]) * help1 * BXJAC;
        DMU[n][15] = (FDELMU1[15] * GRRT[n][15] + FDELMU2[15] * GRRC[n][15]) * help1 * BXJAC;
    };


#if _DEBUG_FRAGM_
    std::cout << "\nBORN:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << BORN[0][i];

    std::cout << "\n\nDMU:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << DMU[0][i];
#endif

    P->PDF_proj_ptr(X1, q2_fac, UP1, UPB1, DO1, DOB1, ST1, CH1, GL1);

#if _DEBUG_FRAGM_
    std::cout << "\n UP1 = " << UP1;
    std::cout << "\n UPB1 = " << UPB1;
    std::cout << "\n DO1 = " << DO1;
    std::cout << "\n DOB1 = " << DOB1;
    std::cout << "\n ST1 = " << ST1;
    std::cout << "\n CH1 = " << CH1;
    std::cout << "\n GL1 = " << GL1;
    std::cout << "\n";
#endif

    for(n = 0; n < comp; ++n)
        STRU(UP1, UPB1, DO1, DOB1, ST1, CH1, GL1,
            UP2, UPB2, DO2, DOB2, ST2, CH2, GL2,
            DPU[n], DPD[n], DPS[n], DPC[n], DPG[n],
            GPPT[n], GPPC[n]);

#if _DEBUG_FRAGM_
    std::cout << "\n\tPHOTONS:";
    std::cout << "\nGPPT:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GPPT[0][i];

    std::cout << "\n\nGPPC:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GPPC[0][i];

    std::cout << "\n\tPIONS:";
    std::cout << "\nGPPT:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GPPT[1][i];

    std::cout << "\n\nGPPC:\n";
    for (auto i{0u}; i < 16; ++i)
        std::cout << std::endl
                  << i << " -> " << GPPC[1][i];
#endif

    help1 = std::log(1. - w_min);
    help4 = std::log(_1mw);

    for (n = 0; n < 10u; ++n)
    {
        J0 = IA1[n];
        help2 = FvWPL1(1.0l, v, z);
        help3 = FvLO1(1.0l, v, z);
        FHODEL1[J0] = (FDEL1(v, z) + help1 * (help2 + help3 * help1  / 2.0l)) / _1mv - Jw / _1mv * (help2 + help3 * help4) / _1mw;
        FHODEL1[J0] = FHODEL1[J0] / CC[J0] * BXJAC;
    }

#if _DEBUG_FRAGM_
    for (J0 = 0u; J0 < 16u; ++J0)
        std::cout << "\nFHODEL1[" << J0 << "] = " << FHODEL1[J0];

#endif

    for (J0 = 0u; J0 < 16u; ++J0)
        FHODEL2[J0] = FHODEL1[J0];

    for (n = 0; n < 6u; ++n)
    {
        J0 = IA2[n];
        help2 = FvWPL2(1.0l, v, z);
        help3 = FvLO2(1.0l, v, z);
        FHODEL2[J0] = (FDEL2(v, z) + (help2  + help3 * help1  / 2.0) * help1) / _1mv - Jw / _1mv * (help2 + help3 * help4) / _1mw;
        FHODEL2[J0] = FHODEL2[J0] / CC[J0] * BXJAC;
    }

#if _DEBUG_FRAGM_
    for (J0 = 0u; J0 < 16u; ++J0)
        std::cout << "\nFHODEL2[" << J0 << "] = " << FHODEL2[J0];
#endif

    for (J0 = 0u; J0 < 16u; ++J0)
    {
        FHOREST1[J0] = (w_max - w_min) / _1mv * (FvWPL1(w, v, z) / w / _1mw + FvLO1(w, v, z) / w * help4 / _1mw + FRESC1(w, v, z) / w);
        FHOREST1[J0] = FHOREST1[J0] / CC[J0] * XJAC;
    }

#if _DEBUG_FRAGM_
    for (J0 = 0u; J0 < 16u; ++J0)
        std::cout << "\nFHOREST1[" << J0 << "] = " << FHOREST1[J0];
#endif
    for (J0 = 0u; J0 < 16u; ++J0)
    {
        FHOREST2[J0] = FHOREST1[J0];
    }

    for (n=0; n < 9u; ++n)
    {
        J0 = IA3[n];
        FHOREST2[J0] = Jw / _1mv * (FvWPL2(w, v, z) / w / _1mw + FvLO2(w, v, z) / w * help4 / _1mw + FRESC2(w, v, z) / w);

        FHOREST2[J0] = FHOREST2[J0] / CC[J0] * XJAC;
    }

    for (n = 0; n < comp; ++n)
    {
        GHD[n] = GHE[n] = 0.0l;
        for (J0 = 0u; J0 < 16u; ++J0)
        {
#if _DEBUG_FRAGM_
            std::cout << "\nFHOREST2[" << J0 << "] = " << FHOREST2[J0];
#endif
            GHD[n] += (FHODEL1[J0] * GRRT[n][J0] + FHODEL2[J0] * GRRC[n][J0] + DMU[n][J0]) * alpha_s + BORN[n][J0];
            GHE[n] += (FHOREST1[J0] * GPPT[n][J0] + FHOREST2[J0] * GPPC[n][J0]) * alpha_s;
        }
    }

#if _DEBUG_FRAGM_
    std::cout << "\n\tPHOTONS:";
    std::cout << "\nGHD = " << GHD[0];
    std::cout << "\nGHE = " << GHE[0];

    std::cout << "\n\tPIONS:";
    std::cout << "\nGHD = " << GHD[1];
    std::cout << "\nGHE = " << GHE[1];
#endif

    //*******************************//
    // - - - - FINAL RESULTS - - - - //
    //*******************************//

    //Factor 2*hbarc2/S pulled out of integrals
    //this gives d2sigma_dydp for photons in f[0], for pions in f[2], for etas in f[4]

    for(n = 0; n < comp; ++n)
        f[2*n] = (GHD[n] + GHE[n]) * alpha_s * alpha_s * Jp * Jy * p;
    
#if _DEBUG_FRAGM_
    std::cout << "\n\n FRAGM PHOTONS = " << f[0] * hbarc2 * 2.0l / P->S;´
    std::cout << "\n FRAGM PIONS = " << f[2] * hbarc2 * 2.0l / P->S;
    std::cout << "\n FRAGM ETAS = " << f[4] * hbarc2 * 2.0l / P->S;
#endif

#if not ALTMODE
    //**********************************//
    // - - - - MESON DECAY (B1) - - - - //
    //**********************************//

    constexpr real mass[comp-1]{mass_pion, mass_eta};

    for(n = 0; n < comp - 1; ++n)
    {
        // NaN from imag. sqrt will be filtered out below
        // branching ratio pulled out of the integral!
        //if (p > 2.0l*mass[n]/std::sqrt(rez2))
        //{
            f[2+n*2] *= std::sqrt(1.0l - (4.0l * mass[n] * mass[n])/(rho2(y, P->energy) * p2));

            //lorentz factor
            f[2+n*2] /= std::sqrt(1.0l - std::pow(mass[n] / (p * std::cosh(y)), 2));
            
        //}
        //else f[2+n*2] = 0.0l;

#if _DEBUG_FRAGM_
        if(n==0)
            std::cout << "\n\n pion B1 " << f[2] * hbarc2 * 2.0l / P->S;
        else
            std::cout << "\n\n eta B1 " << f[4] * hbarc2 * 2.0l / P->S;

        std::cout << "\n \t delta_y " << delta_y(y, P->energy);
        std::cout << "\n \t delta_phi " << delta_phi(y, P->energy);
#endif
    }

#endif //ALTMODE

    //calculate first moments of integrals as well
    for(n = 0; n < 2*comp; n += 2)
    {
        if(isnanl(f[n]) or isinfl(f[n])) f[n] = 0.0l;
        f[n+1] = f[n] * p;
    }

    return 0;
}
